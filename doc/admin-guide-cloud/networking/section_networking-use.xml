<?xml version="1.0" encoding="UTF-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="section_networking-use">
    <title>Use Networking</title>
    <para>You can manage OpenStack Networking services by using the <systemitem>service</systemitem>
        command. For example:</para>
    <screen><prompt>#</prompt> <userinput>service neutron-server stop</userinput>
<prompt>#</prompt> <userinput>service neutron-server status</userinput>
<prompt>#</prompt> <userinput>service neutron-server start</userinput>
<prompt>#</prompt> <userinput>service neutron-server restart</userinput></screen>
    <para>Log files are in the <systemitem>/var/log/neutron</systemitem> directory.</para>
    <para>Configuration files are in the <systemitem>/etc/neutron</systemitem> directory.</para>
    <para>Cloud administrators and tenants can use OpenStack Networking to build rich network
        topologies. Cloud administrators can create network connectivity on behalf of
        tenants.</para>
    <!-- removed this line because there are no 'following procedures' -->
    <!--<para>A tenant or cloud administrator can both perform the
            following procedures.</para>-->
    <section xml:id="api_features">
        <title>Core Networking API features</title>
        <para>After you install and configure Networking, tenants and administrators can perform
            create-read-update-delete (CRUD) API networking operations by using the Networking API
            directly or neutron command-line interface (CLI). The neutron CLI is a wrapper around
            the Networking API. Every Networking API call has a corresponding neutron
            command.</para>
        <para>The CLI includes a number of options. For details, see the <link
                xlink:href="http://docs.openstack.org/user-guide/index.html"><citetitle>OpenStack End
                    User Guide</citetitle></link>.</para>
        <section xml:id="basic_operations">
            <title>Basic Networking operations</title>
            <para>To learn about advanced capabilities available through the neutron command-line
                interface (CLI), read the networking section in the <link
                    xlink:href="http://docs.openstack.org/user-guide/index.html"> OpenStack
                    End User Guide</link>.</para>
            <para>This table shows example neutron commands that enable you to complete basic
                network operations:</para>
            <table rules="all">
                <caption>Basic Networking operations</caption>
                <col width="40%"/>
                <col width="60%"/>
                <thead>
                    <tr>
                        <th>Operation</th>
                        <th>Command</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Creates a network.</td>
                        <td><screen><prompt>$</prompt> <userinput>neutron net-create net1</userinput></screen></td>
                    </tr>
                    <tr>
                        <td>Creates a subnet that is associated with net1.</td>
                        <td><screen><prompt>$</prompt> <userinput>neutron subnet-create net1 10.0.0.0/24</userinput></screen></td>
                    </tr>
                    <tr>
                        <td>Lists ports for a specified tenant.</td>
                        <td><screen><prompt>$</prompt> <userinput>neutron port-list</userinput></screen></td>
                    </tr>
                    <tr>
                        <td>Lists ports for a specified tenant and displays the <option>id</option>,
                                <option>fixed_ips</option>, and <option>device_owner</option>
                            columns.</td>
                        <td><screen><prompt>$</prompt> <userinput>neutron port-list -c id -c fixed_ips -c device_owner</userinput></screen></td>
                    </tr>
                    <tr>
                        <td>Shows information for a specified port.</td>
                        <td><screen><prompt>$</prompt> <userinput>neutron port-show <replaceable>PORT_ID</replaceable></userinput></screen></td>
                    </tr>
                </tbody>
            </table>
            <note>
                <para>The <option>device_owner</option> field describes who owns the port. A port
                    whose <option>device_owner</option> begins with:</para>
                <itemizedlist>
                    <listitem>
                        <para><literal>network</literal> is created by Networking.</para>
                    </listitem>
                    <listitem>
                        <para><literal>compute</literal> is created by Compute.</para>
                    </listitem>
                </itemizedlist>
            </note>
        </section>
        <section xml:id="admin_api_config">
            <title>Administrative operations</title>
            <para>The cloud administrator can run any <command>neutron</command> command on behalf
                of tenants by specifying an Identity <option>tenant_id</option> in the command, as
                follows:</para>
            <screen><prompt>$</prompt> <userinput>neutron net-create --tenant-id <replaceable>TENANT_ID</replaceable> <replaceable>NETWORK_NAME</replaceable></userinput></screen>
            <para>For example:</para>
            <screen><prompt>$</prompt> <userinput>neutron net-create --tenant-id 5e4bbe24b67a4410bc4d9fae29ec394e net1</userinput></screen>
            <note>
                <para>To view all tenant IDs in Identity, run the following command as an Identity
                    Service admin user:</para>
                <screen><prompt>$</prompt> <userinput>keystone tenant-list</userinput></screen>
            </note>
        </section>
        <?hard-pagebreak?>
        <section xml:id="advanced_networking">
            <title>Advanced Networking operations</title>
            <para>This table shows example Networking commands that enable you to complete advanced
                network operations:</para>
            <table rules="all">
                <caption>Advanced Networking operations</caption>
                <col width="40%"/>
                <col width="60%"/>
                <thead>
                    <tr>
                        <th>Operation</th>
                        <th>Command</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Creates a network that all tenants can use.</td>
                        <td><screen><prompt>$</prompt> <userinput>neutron net-create --shared public-net</userinput></screen></td>
                    </tr>
                    <tr>
                        <td>Creates a subnet with a specified gateway IP address.</td>
                        <td><screen><prompt>$</prompt> <userinput>neutron subnet-create --gateway 10.0.0.254 net1 10.0.0.0/24</userinput></screen></td>
                    </tr>
                    <tr>
                        <td>Creates a subnet that has no gateway IP address.</td>
                        <td><screen><prompt>$</prompt> <userinput>neutron subnet-create --no-gateway net1 10.0.0.0/24</userinput></screen></td>
                    </tr>
                    <tr>
                        <td>Creates a subnet with DHCP disabled.</td>
                        <td><screen><prompt>$</prompt> <userinput>neutron subnet-create net1 10.0.0.0/24 --enable-dhcp False</userinput></screen></td>
                    </tr>
                    <tr>
                        <td>Creates a subnet with a specified set of host routes.</td>
                        <td><screen><prompt>$</prompt> <userinput>neutron subnet-create test-net1 40.0.0.0/24 --host-routes type=dict list=true destination=40.0.1.0/24,nexthop=40.0.0.2</userinput></screen></td>
                    </tr>
                    <tr>
                        <td>Creates a subnet with a specified set of dns name servers.</td>
                        <td><screen><prompt>$</prompt> <userinput>neutron subnet-create test-net1 40.0.0.0/24 --dns-nameservers list=true 8.8.4.4 8.8.8.8</userinput></screen></td>
                    </tr>
                    <tr>
                        <td>Displays all ports and IPs allocated on a network.</td>
                        <td><screen><prompt>$</prompt> <userinput>neutron port-list --network_id <replaceable>NET_ID</replaceable></userinput></screen></td>
                    </tr>
                </tbody>
            </table>
        </section>
    </section>
    <?hard-pagebreak?>
    <section xml:id="using_nova_with_neutron">
        <title>Use Compute with Networking</title>
        <section xml:id="basic_workflow_with_nova">
            <title>Basic Compute and Networking operations</title>
            <para>This table shows example neutron and nova commands that enable you to complete
                basic VM networking operations:</para>
            <table rules="all">
                <caption>Basic Compute and Networking operations</caption>
                <col width="40%"/>
                <col width="60%"/>
                <thead>
                    <tr>
                        <th>Action</th>
                        <th>Command</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Checks available networks.</td>
                        <td><screen><prompt>$</prompt> <userinput>neutron net-list</userinput></screen></td>
                    </tr>
                    <tr>
                        <td>Boots a VM with a single NIC on a selected Networking network.</td>
                        <td><screen><prompt>$</prompt> <userinput>nova boot --image <replaceable>IMAGE</replaceable> --flavor <replaceable>FLAVOR</replaceable> --nic net-id=<replaceable>NET_ID</replaceable> <replaceable>VM_NAME</replaceable></userinput></screen></td>
                    </tr>
                    <tr>
                        <td><para>Searches for ports with a <option>device_id</option> that matches
                                the Compute instance UUID. See <xref linkend="network_compute_note"
                                />.</para></td>
                        <td><screen><prompt>$</prompt> <userinput>neutron port-list --device_id <replaceable>VM_ID</replaceable></userinput></screen></td>
                    </tr>
                    <tr>
                        <td>Searches for ports, but shows only the <option>mac_address</option> of
                            the port.</td>
                        <td><screen><prompt>$</prompt> <userinput>neutron port-list --field mac_address --device_id <replaceable>VM_ID</replaceable></userinput></screen></td>
                    </tr>
                    <tr>
                        <td>Temporarily disables a port from sending traffic.</td>
                        <td><screen><prompt>$</prompt> <userinput>neutron port-update <replaceable>PORT_ID</replaceable> --admin_state_up False</userinput></screen></td>
                    </tr>
                </tbody>
            </table>
            <note>
                <para>The <option>device_id</option> can also be a logical router ID.</para>
            </note>
            <note xml:id="network_compute_note">
                <title>Create and delete VMs</title>
                <itemizedlist>
                    <listitem>
                        <para>When you boot a Compute VM, a port on the network that corresponds to
                            the VM NIC is automatically created and associated with the default
                            security group. You can configure <link linkend="enabling_ping_and_ssh"
                                >security group rules</link> to enable users to access the
                            VM.</para>
                    </listitem>
                    <listitem>
                        <para>When you delete a Compute VM, the underlying Networking port is
                            automatically deleted.</para>
                    </listitem>
                </itemizedlist>
            </note>
        </section>
        <section xml:id="advanced_vm_creation">
            <title>Advanced VM creation operations</title>
            <para>This table shows example nova and neutron commands that enable you to complete
                advanced VM creation operations:</para>
            <table rules="all">
                <caption>Advanced VM creation operations</caption>
                <col width="40%"/>
                <col width="60%"/>
                <thead>
                    <tr>
                        <th>Operation</th>
                        <th>Command</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Boots a VM with multiple NICs.</td>
                        <td><screen><prompt>$</prompt> <userinput>nova boot --image <replaceable>IMAGE</replaceable> --flavor <replaceable>FLAVOR</replaceable> --nic net-id=<replaceable>NET1-ID</replaceable> --nic net-id=<replaceable>NET2-ID</replaceable> <replaceable>VM_NAME</replaceable></userinput></screen></td>
                    </tr>
                    <tr>
                        <td>Boots a VM with a specific IP address. Note that you cannot use the <parameter>--num-instances</parameter> parameter in this case.</td>
                        <td><screen><prompt>$</prompt> <userinput>nova boot --image <replaceable>IMAGE</replaceable> --flavor <replaceable>FLAVOR</replaceable> --nic net-id=<replaceable>NET-ID</replaceable>,v4-fixed-ip=<replaceable>IP-ADDR</replaceable> <replaceable>VM_NAME</replaceable></userinput></screen></td>
                    </tr>
                    <tr>
                        <td>Boots a VM that connects to all networks that are accessible to the
                            tenant who submits the request (without the <parameter>--nic</parameter>
                            option).</td>
                        <td><screen><prompt>$</prompt> <userinput>nova boot --image <replaceable>IMAGE</replaceable> --flavor <replaceable>FLAVOR</replaceable> <replaceable>VM_NAME</replaceable></userinput></screen></td>
                    </tr>
                </tbody>
            </table>
            <note>
                <para>Cloud images that distribution vendors offer usually have only one active NIC
                    configured. When you boot with multiple NICs, you must configure additional
                    interfaces on the image or the NICS are not reachable.</para>
                <para>The following Debian/Ubuntu-based example shows how to set up the interfaces
                    within the instance in the <filename>/etc/network/interfaces</filename> file.
                    You must apply this configuration to the image.</para>
                <programlisting language="bash"># The loopback network interface
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet dhcp

auto eth1
iface eth1 inet dhcp</programlisting>
            </note>
        </section>
        <section xml:id="enabling_ping_and_ssh">
            <title>Enable ping and SSH on VMs (security groups)</title>
            <para>You must configure security group rules depending on the type of plug-in you are
                using. If you are using a plug-in that:</para>
            <itemizedlist>
                <listitem>
                    <para>Implements Networking security groups, you can configure security group
                        rules directly by using the <command>neutron
                            security-group-rule-create</command> command. This example enables
                            <command>ping</command> and <command>ssh</command> access to your
                        VMs.</para>
                    <screen><prompt>$</prompt> <userinput>neutron security-group-rule-create --protocol icmp \
    --direction ingress default</userinput></screen>
                    <screen><prompt>$</prompt> <userinput>neutron security-group-rule-create --protocol tcp --port-range-min 22 \
    --port-range-max 22 --direction ingress default</userinput></screen>
                </listitem>
                <listitem>
                    <para>Does not implement Networking security groups, you can configure security
                        group rules by using the <command>nova secgroup-add-rule</command> or
                            <command>euca-authorize</command> command. These <command>nova</command>
                        commands enable <command>ping</command> and <command>ssh</command> access to
                        your VMs.</para>
                    <screen><prompt>$</prompt> <userinput>nova secgroup-add-rule default icmp -1 -1 0.0.0.0/0</userinput>
<prompt>$</prompt> <userinput>nova secgroup-add-rule default tcp 22 22 0.0.0.0/0</userinput></screen>
                </listitem>
            </itemizedlist>
            <note>
                <para>If your plug-in implements Networking security groups, you can also leverage
                    Compute security groups by setting <code>security_group_api = neutron</code> in
                    the <filename>nova.conf</filename> file. After you set this option, all Compute
                    security group commands are proxied to Networking.</para>
            </note>
        </section>
    </section>
</section>
