<?xml version="1.0" encoding="UTF-8"?>
<section xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  version="5.0"
  xml:id="section_networking-intro">
    <title>Introduction to Networking</title>
    <para>The Networking service, code-named neutron, provides an API
        that lets you define network connectivity and addressing in
        the cloud. The Networking service enables operators to
        leverage different networking technologies to power their
        cloud networking. The Networking service also provides an API
        to configure and manage a variety of network services ranging
        from L3 forwarding and NAT to load balancing, edge firewalls,
        and IPsec VPN.</para>
    <para>For a detailed description of the Networking API
        abstractions and their attributes, see the <link
            xlink:href="http://docs.openstack.org/api/openstack-network/2.0/content/"
                ><citetitle>OpenStack Networking API v2.0
                Reference</citetitle></link>.</para>
    <section xml:id="section_networking-api">
        <title>Networking API</title>
        <para>Networking is a virtual network service that provides a
            powerful API to define the network connectivity and IP
            addressing that devices from other services, such as
            Compute, use.</para>
        <para>The Compute API has a virtual server abstraction to
            describe computing resources. Similarly, the Networking
            API has virtual network, subnet, and port abstractions to
            describe networking resources.</para>
        <table rules="all">
            <caption>Networking resources</caption>
            <col width="10%"/>
            <col width="90%"/>
            <thead>
                <tr>
                    <th>Resource</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><emphasis role="bold">Network</emphasis></td>
                    <td>An isolated L2 segment, analogous to VLAN in
                        the physical networking world.</td>
                </tr>
                <tr>
                    <td><emphasis role="bold">Subnet</emphasis></td>
                    <td>A block of v4 or v6 IP addresses and
                        associated configuration state.</td>
                </tr>
                <tr>
                    <td><emphasis role="bold">Port</emphasis></td>
                    <td>A connection point for attaching a single
                        device, such as the NIC of a virtual server,
                        to a virtual network. Also describes the
                        associated network configuration, such as the
                        MAC and IP addresses to be used on that
                        port.</td>
                </tr>
            </tbody>
        </table>
        <para>To configure rich network topologies, you can create and
            configure networks and subnets and instruct other
            OpenStack services like Compute to attach virtual devices
            to ports on these networks.</para>
        <para>In particular, Networking supports each tenant having
            multiple private networks and enables tenants to choose
            their own IP addressing scheme, even if those IP addresses
            overlap with those that other tenants use.</para>
        <para>The Networking service:</para>
        <itemizedlist>
            <listitem>
                <para>Enables advanced cloud networking use cases,
                    such as building multi-tiered web applications and
                    enabling migration of applications to the cloud
                    without changing IP addresses.</para>
            </listitem>
            <listitem>
                <para>Offers flexibility for the cloud administrator
                    to customize network offerings.</para>
            </listitem>
            <listitem>
                <para>Enables developers to extend the Networking API.
                    Over time, the extended functionality becomes part
                    of the core Networking API.</para>
            </listitem>
        </itemizedlist>
    </section>
    <section xml:id="section_networking-api-ssl">
        <title>Configure SSL support for networking API</title>
        <para>OpenStack Networking supports SSL for the Networking API
            server. By default, SSL is disabled but you can enable it
            in the <filename>neutron.conf</filename> file.</para>
        <para>Set these options to configure SSL:</para>
        <variablelist>
            <varlistentry>
                <term><code>use_ssl = True</code></term>
                <listitem>
                    <para>Enables SSL on the networking API
                        server.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><code>ssl_cert_file =
                            <replaceable>PATH_TO_CERTFILE</replaceable></code></term>
                <listitem>
                    <para>Certificate file that is used when you
                        securely start the Networking API
                        server.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><code>ssl_key_file =
                            <replaceable>PATH_TO_KEYFILE</replaceable></code></term>
                <listitem>
                    <para>Private key file that is used when you
                        securely start the Networking API
                        server.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><code>ssl_ca_file =
                            <replaceable>PATH_TO_CAFILE</replaceable></code></term>
                <listitem>
                    <para>Optional. CA certificate file that is used
                        when you securely start the Networking API
                        server. This file verifies connecting clients.
                        Set this option when API clients must
                        authenticate to the API server by using SSL
                        certificates that are signed by a trusted
                        CA.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><code>tcp_keepidle = 600</code></term>
                <listitem>
                    <para>The value of TCP_KEEPIDLE, in seconds, for
                        each server socket when starting the API
                        server. Not supported on OS X.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><code>retry_until_window = 30</code></term>
                <listitem>
                    <para>Number of seconds to keep retrying to
                        listen.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><code>backlog = 4096</code></term>
                <listitem>
                    <para>Number of backlog requests with which to
                        configure the socket.</para>
                </listitem>
            </varlistentry>
        </variablelist>
    </section>
    <section xml:id="section_lbaas-overview">
        <title>Load-Balancer-as-a-Service (LBaaS) overview</title>
        <para><glossterm>Load-Balancer-as-a-Service
                (LBaaS)</glossterm> enables Networking to distribute
            incoming requests evenly among designated instances. This
            distribution ensures that the workload is shared
            predictably among instances and enables more effective use
            of system resources. Use one of these load balancing
            methods to distribute incoming requests:</para>
        <variablelist>
            <varlistentry>
                <term>Round robin</term>
                <listitem>
                    <para>Rotates requests evenly between multiple
                        instances.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Source IP</term>
                <listitem>
                    <para>Requests from a unique source IP address are
                        consistently directed to the same
                        instance.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Least connections</term>
                <listitem>
                    <para>Allocates requests to the instance with the
                        least number of active connections.</para>
                </listitem>
            </varlistentry>
        </variablelist>
        <table rules="all">
            <caption>LBaaS features</caption>
            <col width="25%"/>
            <col width="75%"/>
            <thead>
                <tr>
                    <th>Feature</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        <emphasis role="bold">Monitors</emphasis></td>
                    <td>LBaaS provides availability monitoring with
                        the <command>ping</command>, TCP, HTTP and
                        HTTPS GET methods. <glossterm
                            baseform="Monitor
                          (LBaaS)"
                            >Monitors</glossterm> are implemented to
                        determine whether pool members are available
                        to handle requests.</td>
                </tr>
                <tr>
                    <td><emphasis role="bold"
                        >Management</emphasis></td>
                    <td>LBaaS is managed using a variety of tool sets.
                        The <systemitem>REST API</systemitem> is
                        available for programmatic administration and
                        scripting. Users perform administrative
                        management of load balancers through either
                        the CLI (<command>neutron</command>) or the
                        OpenStack dashboard.</td>
                </tr>
                <tr>
                    <td><emphasis role="bold">Connection
                            limits</emphasis></td>
                    <td>Ingress traffic can be shaped with <emphasis>
                            connection limits</emphasis>. This feature
                        allows workload control, and can also assist
                        with mitigating DoS (Denial of Service)
                        attacks.</td>
                </tr>
                <tr>
                    <td><emphasis role="bold">Session
                            persistence</emphasis></td>
                    <td>
                        <para>LBaaS supports session persistence by
                            ensuring incoming requests are routed to
                            the same instance within a pool of
                            multiple instances. LBaaS supports routing
                            decisions based on cookies and source IP
                            address.</para></td>
                </tr>
            </tbody>
        </table>
    </section>
    <section xml:id="install_neutron-fwaas-agent">
        <title>Firewall-as-a-Service (FWaaS) overview</title>
        <para>The <glossterm>Firewall-as-a-Service (FWaaS)</glossterm>
            plug-in adds perimeter firewall management to Networking.
            FWaaS uses iptables to apply firewall policy to all
            Networking routers within a project. FWaaS supports one
            firewall policy and logical firewall instance per
            project.</para>
        <para>Whereas security groups operate at the instance-level,
            FWaaS operates at the perimeter to filter traffic at the
            neutron router.</para>
        <note>
            <para>FWaaS is currently in technical preview; untested
                operation is not recommended.</para>
        </note>
        <para>The example diagram illustrates the flow of ingress and
            egress traffic for the VM2 instance:</para>
        <figure>
            <title>FWaaS architecture</title>
            <mediaobject>
                <imageobject>
                    <imagedata
                        fileref="../../common/figures/fwaas.png"
                        format="PNG" contentwidth="7in"/>
                </imageobject>
            </mediaobject>
        </figure>
        <procedure>
            <title>To enable FWaaS</title>
            <para>FWaaS management options are also available in the
                OpenStack dashboard.</para>
            <step>
                <para>Enable the FWaaS plug-in in the
                        <filename>neutron.conf</filename> file:</para>
                <programlisting language="ini">service_plugins = firewall
[service_providers]
service_provider = FIREWALL:Iptables:neutron.agent.linux.iptables_firewall.OVSHybridIptablesFirewallDriver:default
[fwaas]
driver = neutron.services.firewall.drivers.linux.iptables_fwaas.IptablesFwaasDriver
enabled = True</programlisting>
            </step>
            <step>
                <para>Enable the option in the
                        <filename>/usr/share/openstack-dashboard/openstack_dashboard/local/local_settings.py</filename>
                    file, which is typically located on the controller
                    node:</para>
                <programlisting language="ini">'enable_firewall' = True</programlisting>
            </step>
            <step>
                <para>Restart the <systemitem class="service">neutron-l3-agent</systemitem> service
                    to apply the settings.</para>
            </step>
        </procedure>
        <procedure>
            <title>To configure Firewall-as-a-Service</title>
            <para>Create the firewall rules and create a policy that
                contains them. Then, create a firewall that applies
                the policy.</para>
            <step>
                <para>Create a firewall rule:</para>
                <screen><prompt>$</prompt> <userinput>neutron firewall-rule-create --protocol {tcp|udp|icmp|any} --destination-port <replaceable>PORT_RANGE</replaceable> --action {allow|deny}</userinput></screen>
                <para>The Networking client requires a protocol value;
                    if the rule is protocol agnostic, you can use the
                        <literal>any</literal> value.</para>
            </step>
            <step>
                <para>Create a firewall policy:</para>
                <screen><prompt>$</prompt> <userinput>neutron firewall-policy-create --firewall-rules  "<replaceable>FIREWALL_RULE_IDS_OR_NAMES</replaceable>" myfirewallpolicy</userinput></screen>
                <para>Separate firewall rule IDs or names with spaces. The order in which you
                    specify the rules is important.</para>
                <para>You can create a firewall policy without any
                    rules and add rules later, as follows:<itemizedlist>
                        <listitem>
                            <para>To add multiple rules, use the
                                update operation.</para>
                        </listitem>
                        <listitem>
                            <para>To add a single rule, use the
                                insert-rule operation.</para>
                        </listitem>
                    </itemizedlist> For more details, see <link
                        xlink:href="http://docs.openstack.org/cli-reference/content/neutronclient_commands.html#neutronclient_subcommand_firewall-policy-create"
                        >Networking command-line client</link> in the
                        <citetitle>OpenStack Command-Line Interface
                        Reference</citetitle>.</para>
                <note>
                    <para>FWaaS always adds a default <option>deny
                            all</option> rule at the lowest precedence
                        of each policy. Consequently, a firewall
                        policy with no rules blocks all traffic by
                        default.</para>
                </note>
            </step>
            <step>
                <para>Create a firewall:</para>
                <screen><prompt>$</prompt> <userinput>neutron firewall-create  <replaceable>FIREWALL_POLICY_UUID</replaceable></userinput></screen>
                <note>
                    <para>The firewall remains in
                            <guilabel>PENDING_CREATE</guilabel> state
                        until you create a Networking router and
                        attach an interface to it.</para>
                </note>
            </step>
        </procedure>
        <formalpara>
            <title>Allowed-address-pairs</title>
            <para><option>Allowed-address-pairs</option> enable you to
                specify mac_address/ip_address(cidr) pairs that pass
                through a port regardless of subnet. This enables the
                use of protocols such as VRRP, which floats an IP
                address between two instances to enable fast data
                plane failover.</para>
        </formalpara>
        <note>
            <para>Currently, only the ML2, Open vSwitch, and VMware
                NSX plug-ins support the allowed-address-pairs
                extension.</para>
        </note>
        <formalpara>
            <title>Basic allowed-address-pairs operations</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Create a port with a specified allowed
                            address pairs:</para>
                        <screen><prompt>$</prompt> <userinput>neutron port-create net1 --allowed-address-pairs type=dict list=true mac_address=<replaceable>MAC_ADDRESS</replaceable>,ip_address=<replaceable>IP_CIDR</replaceable></userinput></screen>
                    </listitem>
                    <listitem>
                        <para>Update a port by adding allowed address
                            pairs:</para>
                        <screen><prompt>$</prompt> <userinput>neutron port-update <replaceable>PORT_UUID</replaceable> --allowed-address-pairs type=dict list=true mac_address=<replaceable>MAC_ADDRESS</replaceable>,ip_address=<replaceable>IP_CIDR</replaceable></userinput></screen>
                    </listitem>
                </itemizedlist></para>
        </formalpara>
        <note>
            <para>In releases earlier than Juno, OpenStack Networking
                prevents setting an allowed address pair on a port
                that matches the MAC address and one of the fixed IP
                addresses of the port.</para>
        </note>
    </section>
    <section xml:id="section_plugin-arch">
        <title>Plug-in architecture</title>
        <para>The original Compute network implementation assumed a
            basic model of isolation through Linux VLANs and IP
            tables. Networking introduces support for vendor
                <glossterm>plug-in</glossterm>s, which offer a custom
            back-end implementation of the Networking API. A plug-in
            can use a variety of technologies to implement the logical
            API requests. Some Networking plug-ins might use basic
            Linux VLANs and IP tables while others might use more
            advanced technologies, such as L2-in-L3 tunneling or
            OpenFlow, to provide similar benefits.</para>
        <table rules="all">
            <caption>Available networking plug-ins</caption>
            <col width="40%"/>
            <col width="60%"/>
            <thead>
                <tr>
                    <th>Plug-in</th>
                    <th>Documentation</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><emphasis role="bold">Big Switch (Floodlight REST Proxy)</emphasis></td>
                    <td>This guide and <link
                            xlink:href="http://www.openflowhub.org/display/floodlightcontroller/Neutron+REST+Proxy+Plugin"
                            >http://www.openflowhub.org/display/floodlightcontroller/Neutron+REST+Proxy+Plugin</link></td>
                </tr>
                <tr>
                    <td><emphasis role="bold">Brocade</emphasis></td>
                    <td>This guide and <link
                            xlink:href="https://wiki.openstack.org/wiki/Brocade-neutron-plugin"
                            >https://wiki.openstack.org/wiki/Brocade-neutron-plugin</link></td>
                </tr>
                <tr>
                    <td><emphasis role="bold">Cisco</emphasis></td>
                    <td><link
                            xlink:href="http://wiki.openstack.org/cisco-neutron"
                            >http://wiki.openstack.org/cisco-neutron</link></td>
                </tr>
                <tr>
                    <td><emphasis role="bold">Cloudbase Hyper-V</emphasis></td>
                    <td><link
                            xlink:href="http://www.cloudbase.it/quantum-hyper-v-plugin/"
                            >http://www.cloudbase.it/quantum-hyper-v-plugin/</link></td>
                </tr>
                <tr>
                    <td><emphasis role="bold">IBM SDN-VE</emphasis></td>
                    <td><link
                            xlink:href="https://wiki.openstack.org/wiki/IBM-Neutron"
                            >https://wiki.openstack.org/wiki/IBM-Neutron</link></td>
                </tr>
                <tr>
                    <td><emphasis role="bold">Linux Bridge</emphasis></td>
                    <td><link
                            xlink:href="http://wiki.openstack.org/Neutron-Linux-Bridge-Plugin"
                            >http://wiki.openstack.org/Neutron-Linux-Bridge-Plugin</link></td>
                </tr>
                <tr>
                    <td><emphasis role="bold">Midonet</emphasis></td>
                    <td><link xlink:href="http://www.midokura.com/"
                            >http://www.midokura.com/</link></td>
                </tr>
                <tr>
                    <td><emphasis role="bold">ML2 (Modular Layer 2)</emphasis></td>
                    <td><link
                            xlink:href="https://wiki.openstack.org/wiki/Neutron/ML2"
                            >https://wiki.openstack.org/wiki/Neutron/ML2</link></td>
                </tr>
                <tr>
                    <td><emphasis role="bold">NEC OpenFlow</emphasis></td>
                    <td><link
                            xlink:href="https://wiki.openstack.org/wiki/Neutron/NEC_OpenFlow_Plugin"
                            >https://wiki.openstack.org/wiki/Neutron/NEC_OpenFlow_Plugin</link></td>
                </tr>
                <tr>
                    <td><emphasis role="bold">Open vSwitch</emphasis></td>
                    <td>This guide.</td>
                </tr>
                <tr>
                    <td><emphasis role="bold">OpenFlow Agent</emphasis></td>
                    <td><link
                            xlink:href="https://github.com/osrg/ryu/wiki/Configuration-OpenStack-OFAgent-agent"
                            >https://github.com/osrg/ryu/wiki/Configuration-OpenStack-OFAgent-agent</link> and
                        <link
                            xlink:href="https://git.openstack.org/cgit/openstack/neutron/tree/neutron/plugins/ofagent/README"
                            >https://git.openstack.org/cgit/openstack/neutron/tree/neutron/plugins/ofagent/README</link></td>
                </tr>
                <tr>
                    <td><emphasis role="bold">PLUMgrid</emphasis></td>
                    <td>This guide and <link
                            xlink:href="https://wiki.openstack.org/wiki/PLUMgrid-Neutron"
                            >https://https://wiki.openstack.org/wiki/PLUMgrid-Neutron</link></td>
                </tr>
                <tr>
                    <!-- TODO: update support link, when available -->
                    <td><emphasis role="bold">VMware NSX</emphasis></td>
                    <td>This guide and <link
                            xlink:href="http://www.vmware.com/products/nsx/">NSX
                            Product Overview</link>, <link
                            xlink:href="http://www.nicira.com/support"
                            >NSX Product Support</link></td>
                </tr>
            </tbody>
        </table>
        <para>Plug-ins can have different properties for hardware
            requirements, features, performance, scale, or operator
            tools. Because Networking supports a large number of
            plug-ins, the cloud administrator must determine the right
            networking technology for the deployment.</para>
        <para>The <glossterm baseform="Modular Layer 2 (ML2) neutron plug-in"
                >Modular Layer 2 (ML2) plug-in</glossterm> enables a variety
           of layer 2 networking technologies to be created and managed with
          less effort compared to stand-alone plug-ins. It currently works
          with Open vSwitch, Linux  Bridge, and Hyper-v L2 agents.</para>
        <para>The ML2 framework contains two types of drivers, type drivers and mechanism drivers. Type drivers maintain any needed type-specific network states, perform provider network validation and tenant network allocation. Mechanism drivers ensure the information established by the type driver is properly applied. Multiple mechanism drivers can access the same network simultaneously, which addresses complex requirements in large heterogeneous environments.</para>
        <para>You can enable the ML2 plug-in by editing the <literal>core-plugin</literal>
          parameter in the <filename>/etc/neutron/neutron.conf</filename>
          file:</para>
            <programlisting language = "ini">core_plugin = <replaceable>neutron.plugins.ml2.plugin.Ml2Plugin</replaceable></programlisting>
       <note>
            <title>Plug-in deprecation notice</title>
            <para>The Open vSwitch and Linux Bridge plug-ins were
                removed in the Icehouse release. The features in these
                plug-ins are now part of the ML2 plug-in in the form
                of mechanism drivers.</para>
        </note>
        <note>
          <title>Plug-in removal notice</title>
          <para>The Mellanox plug-in has been removed in the Kilo
            release.</para>
        </note>
        <para>Not all Networking plug-ins are compatible with all
            possible Compute drivers:</para>
        <table rules="all">
            <caption>Plug-in compatibility with Compute
                drivers</caption>
            <thead>
                <tr>
                    <th>Plug-in</th>
                    <th>Libvirt (KVM/QEMU)</th>
                    <th>XenServer</th>
                    <th>VMware</th>
                    <th>Hyper-V</th>
                    <th>Bare-metal</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Big Switch (Floodlight REST Proxy)</td>
                    <td>Yes</td>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                </tr>
                <tr>
                    <td>Brocade</td>
                    <td>Yes</td>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                </tr>
                <tr>
                    <td>Cisco</td>
                    <td>Yes</td>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                </tr>
                <tr>
                    <td>Cloudbase Hyper-V</td>
                    <td/>
                    <td/>
                    <td/>
                    <td>Yes</td>
                    <td/>
                </tr>
                <tr>
                    <td>IBM SDN-VE</td>
                    <td>Yes</td>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                </tr>
                <tr>
                    <td>Linux Bridge</td>
                    <td>Yes</td>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                </tr>
                <tr>
                    <td>Midonet</td>
                    <td>Yes</td>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                </tr>
                <tr>
                    <td>ML2 (Modular Layer 2)</td>
                    <td>Yes</td>
                    <td/>
                    <td/>
                    <td>Yes</td>
                    <td/>
                </tr>
                <tr>
                    <td>NEC OpenFlow</td>
                    <td>Yes</td>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                </tr>
                <tr>
                    <td>Open vSwitch</td>
                    <td>Yes</td>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                </tr>
                <tr>
                    <td>PLUMgrid</td>
                    <td>Yes</td>
                    <td/>
                    <td>Yes</td>
                    <td/>
                    <td/>
                </tr>
                <tr>
                    <td>VMware NSX</td>
                    <td>Yes</td>
                    <td>Yes</td>
                    <td>Yes</td>
                    <td/>
                    <td/>
                </tr>
            </tbody>
        </table>
    </section>
</section>
