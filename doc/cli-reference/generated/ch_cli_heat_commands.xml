<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  version="5.0"
  xml:id="heatclient_commands">

    <!-- This file is automatically generated, do not edit -->

    <?dbhtml stop-chunking?>

    <title>Orchestration command-line client</title>

    <para>The <command>heat</command> client is the command-line
        interface (CLI) for the Orchestration API and its extensions.

       This chapter documents <command>heat</command> version
        <literal>0.8.0</literal>.
    </para>

    <para>For help on a specific <command>heat</command>
       command, enter:
    </para>
    <screen><prompt>$</prompt> <userinput><command>heat</command> <option>help</option> <replaceable>COMMAND</replaceable></userinput></screen>

    <section xml:id="heatclient_command_usage">
       <title>heat usage</title>
        <screen><computeroutput>usage: heat [--version] [-d] [-v] [--api-timeout API_TIMEOUT]
            [--os-no-client-auth] [--heat-url HEAT_URL]
            [--heat-api-version HEAT_API_VERSION] [--include-password] [-k]
            [--os-cert OS_CERT] [--cert-file OS_CERT] [--os-key OS_KEY]
            [--key-file OS_KEY] [--os-cacert &lt;ca-certificate-file&gt;]
            [--ca-file OS_CACERT] [--os-username OS_USERNAME]
            [--os-user-id OS_USER_ID] [--os-user-domain-id OS_USER_DOMAIN_ID]
            [--os-user-domain-name OS_USER_DOMAIN_NAME]
            [--os-project-id OS_PROJECT_ID]
            [--os-project-name OS_PROJECT_NAME]
            [--os-project-domain-id OS_PROJECT_DOMAIN_ID]
            [--os-project-domain-name OS_PROJECT_DOMAIN_NAME]
            [--os-password OS_PASSWORD] [--os-tenant-id OS_TENANT_ID]
            [--os-tenant-name OS_TENANT_NAME] [--os-auth-url OS_AUTH_URL]
            [--os-region-name OS_REGION_NAME] [--os-auth-token OS_AUTH_TOKEN]
            [--os-service-type OS_SERVICE_TYPE]
            [--os-endpoint-type OS_ENDPOINT_TYPE]
            &lt;subcommand&gt; ...</computeroutput></screen>
  <variablelist wordsize="10">
    <title>Subcommands</title>
  <varlistentry>
    <term><command>action-check</command></term>
    <listitem>
      <para>
        Check that stack resources are in expected states.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>action-resume</command></term>
    <listitem>
      <para>
        Resume the stack.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>action-suspend</command></term>
    <listitem>
      <para>
        Suspend the stack.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>build-info</command></term>
    <listitem>
      <para>
        Retrieve build information.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>config-create</command></term>
    <listitem>
      <para>
        Create a software configuration.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>config-delete</command></term>
    <listitem>
      <para>
        Delete a software configuration.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>config-show</command></term>
    <listitem>
      <para>
        View details of a software configuration.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>deployment-create</command></term>
    <listitem>
      <para>
        Create a software deployment.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>deployment-delete</command></term>
    <listitem>
      <para>
        Delete a software deployment.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>deployment-list</command></term>
    <listitem>
      <para>
        List software deployments.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>deployment-metadata-show</command></term>
    <listitem>
      <para>
      Get deployment configuration metadata for the
      specified server.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>deployment-output-show</command></term>
    <listitem>
      <para>
      Show a specific deployment output.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>deployment-show</command></term>
    <listitem>
      <para>
        Show the details of a software deployment.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>event</command></term>
    <listitem>
      <para>
        <emphasis>DEPRECATED!</emphasis> Use event-show instead.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>event-list</command></term>
    <listitem>
      <para>
        List events for a stack.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>event-show</command></term>
    <listitem>
      <para>
        Describe the event.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>hook-clear</command></term>
    <listitem>
      <para>
        Clear hooks on a given stack.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>hook-poll</command></term>
    <listitem>
      <para>
        List resources with pending hook for a stack.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>output-list</command></term>
    <listitem>
      <para>
        Show available outputs.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>output-show</command></term>
    <listitem>
      <para>
        Show a specific stack output.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>resource-list</command></term>
    <listitem>
      <para>
        Show list of resources belonging to a stack.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>resource-metadata</command></term>
    <listitem>
      <para>
        List resource metadata.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>resource-show</command></term>
    <listitem>
      <para>
        Describe the resource.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>resource-signal</command></term>
    <listitem>
      <para>
        Send a signal to a resource.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>resource-template</command></term>
    <listitem>
      <para>
        <emphasis>DEPRECATED!</emphasis> Use resource-type-template instead.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>resource-type-list</command></term>
    <listitem>
      <para>
        List the available resource types.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>resource-type-show</command></term>
    <listitem>
      <para>
        Show the resource type.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>resource-type-template</command></term>
    <listitem>
      <para>
      Generate a template based on a resource type.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>service-list</command></term>
    <listitem>
      <para>
        List the Heat engines.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>snapshot-delete</command></term>
    <listitem>
      <para>
        Delete a snapshot of a stack.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>snapshot-list</command></term>
    <listitem>
      <para>
        List the snapshots of a stack.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>snapshot-show</command></term>
    <listitem>
      <para>
        Show a snapshot of a stack.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>stack-abandon</command></term>
    <listitem>
      <para>
        Abandon the stack.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>stack-adopt</command></term>
    <listitem>
      <para>
        Adopt a stack.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>stack-cancel-update</command></term>
    <listitem>
      <para>
      Cancel currently running update of the stack.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>stack-create</command></term>
    <listitem>
      <para>
        Create the stack.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>stack-delete</command></term>
    <listitem>
      <para>
        Delete the stack(s).
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>stack-list</command></term>
    <listitem>
      <para>
        List the user's stacks.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>stack-preview</command></term>
    <listitem>
      <para>
        Preview the stack.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>stack-restore</command></term>
    <listitem>
      <para>
        Restore a snapshot of a stack.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>stack-show</command></term>
    <listitem>
      <para>
        Describe the stack.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>stack-snapshot</command></term>
    <listitem>
      <para>
        Make a snapshot of a stack.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>stack-update</command></term>
    <listitem>
      <para>
        Update the stack.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>template-function-list</command></term>
    <listitem>
      <para>
      List the available functions.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>template-show</command></term>
    <listitem>
      <para>
        Get the template for the specified stack.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>template-validate</command></term>
    <listitem>
      <para>
        Validate a template with parameters.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>template-version-list</command></term>
    <listitem>
      <para>
      List the available template versions.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>bash-completion</command></term>
    <listitem>
      <para>
        Prints all of the commands and options to stdout.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>help</command></term>
    <listitem>
      <para>
        Display help about this program or one of its
      subcommands.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="heatclient_command_optional">
        <title>heat optional arguments</title>
  <variablelist wordsize="10">
  <varlistentry>
    <term><command>--version</command></term>
    <listitem>
      <para>
        Shows the client version and exits.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-d, --debug</command></term>
    <listitem>
      <para>
        Defaults to <code>env[HEATCLIENT_DEBUG]</code>.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-v, --verbose</command></term>
    <listitem>
      <para>
        Print more verbose output.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--api-timeout API_TIMEOUT</command></term>
    <listitem>
      <para>
      Number of seconds to wait for an API response,
      defaults to system socket timeout
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--os-no-client-auth</command></term>
    <listitem>
      <para>
        Do not contact keystone for a token. Defaults to
      <code>env[OS_NO_CLIENT_AUTH]</code>.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--heat-url HEAT_URL</command></term>
    <listitem>
      <para>
        Defaults to <code>env[HEAT_URL]</code>.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--heat-api-version HEAT_API_VERSION</command></term>
    <listitem>
      <para>
      Defaults to <code>env[HEAT_API_VERSION]</code> or 1.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--include-password</command></term>
    <listitem>
      <para>
        Send os-username and os-password to heat.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-k, --insecure</command></term>
    <listitem>
      <para>
        Explicitly allow heatclient to perform "insecure SSL"
      (https) requests. The server's certificate will not be
      verified against any certificate authorities. This
      option should be used with caution.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--os-cert OS_CERT</command></term>
    <listitem>
      <para>
        Path of certificate file to use in SSL connection.
      This file can optionally be prepended with the private
      key.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--cert-file OS_CERT</command></term>
    <listitem>
      <para>
        <emphasis>DEPRECATED!</emphasis> Use --os-cert.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--os-key OS_KEY</command></term>
    <listitem>
      <para>
        Path of client key to use in SSL connection. This
      option is not necessary if your key is prepended to
      your cert file.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--key-file OS_KEY</command></term>
    <listitem>
      <para>
        <emphasis>DEPRECATED!</emphasis> Use --os-key.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--os-cacert &lt;ca-certificate-file&gt;</command></term>
    <listitem>
      <para>
      Path of CA TLS certificate(s) used to verify the
      remote server's certificate. Without this option
      glance looks for the default system CA certificates.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--ca-file OS_CACERT</command></term>
    <listitem>
      <para>
        <emphasis>DEPRECATED!</emphasis> Use --os-cacert.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--os-username OS_USERNAME</command></term>
    <listitem>
      <para>
      Defaults to <code>env[OS_USERNAME]</code>.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--os-user-id OS_USER_ID</command></term>
    <listitem>
      <para>
      Defaults to <code>env[OS_USER_ID]</code>.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--os-user-domain-id OS_USER_DOMAIN_ID</command></term>
    <listitem>
      <para>
      Defaults to <code>env[OS_USER_DOMAIN_ID]</code>.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--os-user-domain-name OS_USER_DOMAIN_NAME</command></term>
    <listitem>
      <para>
      Defaults to <code>env[OS_USER_DOMAIN_NAME]</code>.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--os-project-id OS_PROJECT_ID</command></term>
    <listitem>
      <para>
      Another way to specify tenant ID. This option is
      mutually exclusive with --os-tenant-id. Defaults to
      <code>env[OS_PROJECT_ID]</code>.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--os-project-name OS_PROJECT_NAME</command></term>
    <listitem>
      <para>
      Another way to specify tenant name. This option is
      mutually exclusive with --os-tenant-name. Defaults to
      <code>env[OS_PROJECT_NAME]</code>.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--os-project-domain-id OS_PROJECT_DOMAIN_ID</command></term>
    <listitem>
      <para>
      Defaults to <code>env[OS_PROJECT_DOMAIN_ID]</code>.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--os-project-domain-name OS_PROJECT_DOMAIN_NAME</command></term>
    <listitem>
      <para>
      Defaults to <code>env[OS_PROJECT_DOMAIN_NAME]</code>.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--os-password OS_PASSWORD</command></term>
    <listitem>
      <para>
      Defaults to <code>env[OS_PASSWORD]</code>.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--os-tenant-id OS_TENANT_ID</command></term>
    <listitem>
      <para>
      Defaults to <code>env[OS_TENANT_ID]</code>.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--os-tenant-name OS_TENANT_NAME</command></term>
    <listitem>
      <para>
      Defaults to <code>env[OS_TENANT_NAME]</code>.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--os-auth-url OS_AUTH_URL</command></term>
    <listitem>
      <para>
      Defaults to <code>env[OS_AUTH_URL]</code>.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--os-region-name OS_REGION_NAME</command></term>
    <listitem>
      <para>
      Defaults to <code>env[OS_REGION_NAME]</code>.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--os-auth-token OS_AUTH_TOKEN</command></term>
    <listitem>
      <para>
      Defaults to <code>env[OS_AUTH_TOKEN]</code>.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--os-service-type OS_SERVICE_TYPE</command></term>
    <listitem>
      <para>
      Defaults to <code>env[OS_SERVICE_TYPE]</code>.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--os-endpoint-type OS_ENDPOINT_TYPE</command></term>
    <listitem>
      <para>
      Defaults to <code>env[OS_ENDPOINT_TYPE]</code>.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="heatclient_subcommand_action-check">
        <title>heat action-check</title>
        <screen><computeroutput>usage: heat action-check &lt;NAME or ID&gt;</computeroutput></screen>
        <para>
Check that stack resources are in expected states.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;NAME or ID&gt;</command></term>
    <listitem>
      <para>
        Name or ID of stack to check.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="heatclient_subcommand_action-resume">
        <title>heat action-resume</title>
        <screen><computeroutput>usage: heat action-resume &lt;NAME or ID&gt;</computeroutput></screen>
        <para>
Resume the stack.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;NAME or ID&gt;</command></term>
    <listitem>
      <para>
        Name or ID of stack to resume.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="heatclient_subcommand_action-suspend">
        <title>heat action-suspend</title>
        <screen><computeroutput>usage: heat action-suspend &lt;NAME or ID&gt;</computeroutput></screen>
        <para>
Suspend the stack.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;NAME or ID&gt;</command></term>
    <listitem>
      <para>
        Name or ID of stack to suspend.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="heatclient_subcommand_build-info">
        <title>heat build-info</title>
        <screen><computeroutput>usage: heat build-info</computeroutput></screen>
        <para>
Retrieve build information.
        </para>
    </section>
    <section xml:id="heatclient_subcommand_config-create">
        <title>heat config-create</title>
        <screen><computeroutput>usage: heat config-create [-f &lt;FILE or URL&gt;] [-c &lt;FILE or URL&gt;]
                          [-g &lt;GROUP_NAME&gt;]
                          &lt;CONFIG_NAME&gt;</computeroutput></screen>
        <para>
Create a software configuration.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;CONFIG_NAME&gt;</command></term>
    <listitem>
      <para>
        Name of the configuration to create.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
  <variablelist wordsize="10">
    <title>Optional arguments</title>
  <varlistentry>
    <term><command>-f &lt;FILE or URL&gt;, --definition-file &lt;FILE or URL&gt;</command></term>
    <listitem>
      <para>
      Path to JSON/YAML containing map defining &lt;inputs&gt;,
      &lt;outputs&gt;, and &lt;options&gt;.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-c &lt;FILE or URL&gt;, --config-file &lt;FILE or URL&gt;</command></term>
    <listitem>
      <para>
      Path to configuration script/data.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-g &lt;GROUP_NAME&gt;, --group &lt;GROUP_NAME&gt;</command></term>
    <listitem>
      <para>
      Group name of configuration tool expected by the
      config.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="heatclient_subcommand_config-delete">
        <title>heat config-delete</title>
        <screen><computeroutput>usage: heat config-delete &lt;ID&gt; [&lt;ID&gt; ...]</computeroutput></screen>
        <para>
Delete a software configuration.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;ID&gt;</command></term>
    <listitem>
      <para>
        IDs of the configurations to delete.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="heatclient_subcommand_config-show">
        <title>heat config-show</title>
        <screen><computeroutput>usage: heat config-show [-c] &lt;ID&gt;</computeroutput></screen>
        <para>
View details of a software configuration.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;ID&gt;</command></term>
    <listitem>
      <para>
        ID of the config.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
  <variablelist wordsize="10">
    <title>Optional arguments</title>
  <varlistentry>
    <term><command>-c, --config-only</command></term>
    <listitem>
      <para>
        Only display the value of the &lt;config&gt; property.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="heatclient_subcommand_deployment-create">
        <title>heat deployment-create</title>
        <screen><computeroutput>usage: heat deployment-create [-i &lt;KEY=VALUE&gt;] [-a &lt;ACTION&gt;] [-c &lt;CONFIG&gt;] -s
                              &lt;SERVER&gt; [-t &lt;TRANSPORT&gt;]
                              [--container &lt;CONTAINER_NAME&gt;]
                              [--timeout &lt;TIMEOUT&gt;]
                              &lt;DEPLOY_NAME&gt;</computeroutput></screen>
        <para>
Create a software deployment.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;DEPLOY_NAME&gt;</command></term>
    <listitem>
      <para>
        Name of the derived config associated with this
      deployment. This is used to apply a sort order to the
      list of configurations currently deployed to the
      server.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
  <variablelist wordsize="10">
    <title>Optional arguments</title>
  <varlistentry>
    <term><command>-i &lt;KEY=VALUE&gt;, --input-value &lt;KEY=VALUE&gt;</command></term>
    <listitem>
      <para>
      Input value to set on the deployment. This can be
      specified multiple times.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-a &lt;ACTION&gt;, --action &lt;ACTION&gt;</command></term>
    <listitem>
      <para>
      Name of action for this deployment. Can be a custom
      action, or one of: CREATE, UPDATE, DELETE, SUSPEND,
      RESUME
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-c &lt;CONFIG&gt;, --config &lt;CONFIG&gt;</command></term>
    <listitem>
      <para>
      ID of the configuration to deploy.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-s &lt;SERVER&gt;, --server &lt;SERVER&gt;</command></term>
    <listitem>
      <para>
      ID of the server being deployed to.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-t &lt;TRANSPORT&gt;, --signal-transport &lt;TRANSPORT&gt;</command></term>
    <listitem>
      <para>
      How the server should signal to heat with the
      deployment output values. TEMP_URL_SIGNAL will create
      a Swift TempURL to be signaled via HTTP PUT. NO_SIGNAL
      will result in the resource going to the COMPLETE
      state without waiting for any signal.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--container &lt;CONTAINER_NAME&gt;</command></term>
    <listitem>
      <para>
      Optional name of container to store TEMP_URL_SIGNAL
      objects in. If not specified a container will be
      created with a name derived from the DEPLOY_NAME
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--timeout &lt;TIMEOUT&gt;</command></term>
    <listitem>
      <para>
        Deployment timeout in minutes.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="heatclient_subcommand_deployment-delete">
        <title>heat deployment-delete</title>
        <screen><computeroutput>usage: heat deployment-delete &lt;ID&gt; [&lt;ID&gt; ...]</computeroutput></screen>
        <para>
Delete a software deployment.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;ID&gt;</command></term>
    <listitem>
      <para>
        IDs of the deployments to delete.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="heatclient_subcommand_deployment-list">
        <title>heat deployment-list</title>
        <screen><computeroutput>usage: heat deployment-list [-s &lt;SERVER&gt;]</computeroutput></screen>
        <para>
List software deployments.
        </para>  <variablelist wordsize="10">
    <title>Optional arguments</title>
  <varlistentry>
    <term><command>-s &lt;SERVER&gt;, --server &lt;SERVER&gt;</command></term>
    <listitem>
      <para>
      ID of the server to fetch deployments for.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="heatclient_subcommand_deployment-metadata-show">
        <title>heat deployment-metadata-show</title>
        <screen><computeroutput>usage: heat deployment-metadata-show &lt;ID&gt;</computeroutput></screen>
        <para>
Get deployment configuration metadata for the specified server.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;ID&gt;</command></term>
    <listitem>
      <para>
        ID of the server to fetch deployments for.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="heatclient_subcommand_deployment-output-show">
        <title>heat deployment-output-show</title>
        <screen><computeroutput>usage: heat deployment-output-show [-a] [-F &lt;FORMAT&gt;] &lt;ID&gt; [&lt;OUTPUT NAME&gt;]</computeroutput></screen>
        <para>
Show a specific deployment output.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;ID&gt;</command></term>
    <listitem>
      <para>
        ID deployment to show the output for.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>&lt;OUTPUT NAME&gt;</command></term>
    <listitem>
      <para>
        Name of an output to display.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
  <variablelist wordsize="10">
    <title>Optional arguments</title>
  <varlistentry>
    <term><command>-a, --all</command></term>
    <listitem>
      <para>
        Display all deployment outputs.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-F &lt;FORMAT&gt;, --format &lt;FORMAT&gt;</command></term>
    <listitem>
      <para>
      The output value format, one of: raw, json
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="heatclient_subcommand_deployment-show">
        <title>heat deployment-show</title>
        <screen><computeroutput>usage: heat deployment-show &lt;ID&gt;</computeroutput></screen>
        <para>
Show the details of a software deployment.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;ID&gt;</command></term>
    <listitem>
      <para>
        ID of the deployment.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="heatclient_subcommand_event-list">
        <title>heat event-list</title>
        <screen><computeroutput>usage: heat event-list [-r &lt;RESOURCE&gt;] [-f &lt;KEY1=VALUE1;KEY2=VALUE2...&gt;]
                       [-l &lt;LIMIT&gt;] [-m &lt;ID&gt;] [-n &lt;DEPTH&gt;] [-F &lt;FORMAT&gt;]
                       &lt;NAME or ID&gt;</computeroutput></screen>
        <para>
List events for a stack.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;NAME or ID&gt;</command></term>
    <listitem>
      <para>
        Name or ID of stack to show the events for.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
  <variablelist wordsize="10">
    <title>Optional arguments</title>
  <varlistentry>
    <term><command>-r &lt;RESOURCE&gt;, --resource &lt;RESOURCE&gt;</command></term>
    <listitem>
      <para>
      Name of the resource to filter events by.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-f &lt;KEY1=VALUE1;KEY2=VALUE2...&gt;, --filters &lt;KEY1=VALUE1;KEY2=VALUE2...&gt;</command></term>
    <listitem>
      <para>
      Filter parameters to apply on returned events. This
      can be specified multiple times, or once with
      parameters separated by a semicolon.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-l &lt;LIMIT&gt;, --limit &lt;LIMIT&gt;</command></term>
    <listitem>
      <para>
      Limit the number of events returned.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-m &lt;ID&gt;, --marker &lt;ID&gt;</command></term>
    <listitem>
      <para>
      Only return events that appear after the given event
      ID.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-n &lt;DEPTH&gt;, --nested-depth &lt;DEPTH&gt;</command></term>
    <listitem>
      <para>
      Depth of nested stacks from which to display events.
      Note this cannot be specified with --resource.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-F &lt;FORMAT&gt;, --format &lt;FORMAT&gt;</command></term>
    <listitem>
      <para>
      The output value format, one of: log, table
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="heatclient_subcommand_event-show">
        <title>heat event-show</title>
        <screen><computeroutput>usage: heat event-show &lt;NAME or ID&gt; &lt;RESOURCE&gt; &lt;EVENT&gt;</computeroutput></screen>
        <para>
Describe the event.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;NAME or ID&gt;</command></term>
    <listitem>
      <para>
        Name or ID of stack to show the events for.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>&lt;RESOURCE&gt;</command></term>
    <listitem>
      <para>
        Name of the resource the event belongs to.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>&lt;EVENT&gt;</command></term>
    <listitem>
      <para>
        ID of event to display details for.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="heatclient_subcommand_hook-clear">
        <title>heat hook-clear</title>
        <screen><computeroutput>usage: heat hook-clear [--pre-create] [--pre-update]
                       &lt;NAME or ID&gt; &lt;RESOURCE&gt; [&lt;RESOURCE&gt; ...]</computeroutput></screen>
        <para>
Clear hooks on a given stack.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;NAME or ID&gt;</command></term>
    <listitem>
      <para>
        Name or ID of the stack these resources belong to.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>&lt;RESOURCE&gt;</command></term>
    <listitem>
      <para>
        Resource names with hooks to clear. Resources in nested stacks
      can be set using slash as a separator:
      nested_stack/another/my_resource. You can use wildcards to
      match multiple stacks or resources:
      nested_stack/an*/*_resource
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
  <variablelist wordsize="10">
    <title>Optional arguments</title>
  <varlistentry>
    <term><command>--pre-create</command></term>
    <listitem>
      <para>
        Clear the pre-create hooks (optional)
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--pre-update</command></term>
    <listitem>
      <para>
        Clear the pre-update hooks (optional)
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="heatclient_subcommand_hook-poll">
        <title>heat hook-poll</title>
        <screen><computeroutput>usage: heat hook-poll [-n &lt;DEPTH&gt;] &lt;NAME or ID&gt;</computeroutput></screen>
        <para>
List resources with pending hook for a stack.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;NAME or ID&gt;</command></term>
    <listitem>
      <para>
        Name or ID of stack to show the pending hooks for.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
  <variablelist wordsize="10">
    <title>Optional arguments</title>
  <varlistentry>
    <term><command>-n &lt;DEPTH&gt;, --nested-depth &lt;DEPTH&gt;</command></term>
    <listitem>
      <para>
      Depth of nested stacks from which to display hooks.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="heatclient_subcommand_output-list">
        <title>heat output-list</title>
        <screen><computeroutput>usage: heat output-list &lt;NAME or ID&gt;</computeroutput></screen>
        <para>
Show available outputs.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;NAME or ID&gt;</command></term>
    <listitem>
      <para>
        Name or ID of stack to query.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="heatclient_subcommand_output-show">
        <title>heat output-show</title>
        <screen><computeroutput>usage: heat output-show [-a] [-F &lt;FORMAT&gt;] &lt;NAME or ID&gt; [&lt;OUTPUT NAME&gt;]</computeroutput></screen>
        <para>
Show a specific stack output.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;NAME or ID&gt;</command></term>
    <listitem>
      <para>
        Name or ID of stack to query.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>&lt;OUTPUT NAME&gt;</command></term>
    <listitem>
      <para>
        Name of an output to display.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
  <variablelist wordsize="10">
    <title>Optional arguments</title>
  <varlistentry>
    <term><command>-a, --all</command></term>
    <listitem>
      <para>
        Display all stack outputs.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-F &lt;FORMAT&gt;, --format &lt;FORMAT&gt;</command></term>
    <listitem>
      <para>
      The output value format, one of: json, raw
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="heatclient_subcommand_resource-list">
        <title>heat resource-list</title>
        <screen><computeroutput>usage: heat resource-list [-n &lt;DEPTH&gt;] [--with-detail] &lt;NAME or ID&gt;</computeroutput></screen>
        <para>
Show list of resources belonging to a stack.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;NAME or ID&gt;</command></term>
    <listitem>
      <para>
        Name or ID of stack to show the resources for.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
  <variablelist wordsize="10">
    <title>Optional arguments</title>
  <varlistentry>
    <term><command>-n &lt;DEPTH&gt;, --nested-depth &lt;DEPTH&gt;</command></term>
    <listitem>
      <para>
      Depth of nested stacks from which to display
      resources.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--with-detail</command></term>
    <listitem>
      <para>
        Enable detail information presented for each resource
      in resources list.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="heatclient_subcommand_resource-metadata">
        <title>heat resource-metadata</title>
        <screen><computeroutput>usage: heat resource-metadata &lt;NAME or ID&gt; &lt;RESOURCE&gt;</computeroutput></screen>
        <para>
List resource metadata.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;NAME or ID&gt;</command></term>
    <listitem>
      <para>
        Name or ID of stack to show the resource metadata for.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>&lt;RESOURCE&gt;</command></term>
    <listitem>
      <para>
        Name of the resource to show the metadata for.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="heatclient_subcommand_resource-show">
        <title>heat resource-show</title>
        <screen><computeroutput>usage: heat resource-show [-a &lt;ATTRIBUTE&gt;] &lt;NAME or ID&gt; &lt;RESOURCE&gt;</computeroutput></screen>
        <para>
Describe the resource.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;NAME or ID&gt;</command></term>
    <listitem>
      <para>
        Name or ID of stack to show the resource for.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>&lt;RESOURCE&gt;</command></term>
    <listitem>
      <para>
        Name of the resource to show the details for.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
  <variablelist wordsize="10">
    <title>Optional arguments</title>
  <varlistentry>
    <term><command>-a &lt;ATTRIBUTE&gt;, --with-attr &lt;ATTRIBUTE&gt;</command></term>
    <listitem>
      <para>
      Attribute to show, it can be specified multiple times.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="heatclient_subcommand_resource-signal">
        <title>heat resource-signal</title>
        <screen><computeroutput>usage: heat resource-signal [-D &lt;DATA&gt;] [-f &lt;FILE&gt;] &lt;NAME or ID&gt; &lt;RESOURCE&gt;</computeroutput></screen>
        <para>
Send a signal to a resource.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;NAME or ID&gt;</command></term>
    <listitem>
      <para>
        Name or ID of stack the resource belongs to.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>&lt;RESOURCE&gt;</command></term>
    <listitem>
      <para>
        Name of the resource to signal.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
  <variablelist wordsize="10">
    <title>Optional arguments</title>
  <varlistentry>
    <term><command>-D &lt;DATA&gt;, --data &lt;DATA&gt;</command></term>
    <listitem>
      <para>
      JSON Data to send to the signal handler.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-f &lt;FILE&gt;, --data-file &lt;FILE&gt;</command></term>
    <listitem>
      <para>
      File containing JSON data to send to the signal
      handler.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="heatclient_subcommand_resource-type-list">
        <title>heat resource-type-list</title>
        <screen><computeroutput>usage: heat resource-type-list [-f &lt;KEY1=VALUE1;KEY2=VALUE2...&gt;]</computeroutput></screen>
        <para>
List the available resource types.
        </para>  <variablelist wordsize="10">
    <title>Optional arguments</title>
  <varlistentry>
    <term><command>-f &lt;KEY1=VALUE1;KEY2=VALUE2...&gt;, --filters &lt;KEY1=VALUE1;KEY2=VALUE2...&gt;</command></term>
    <listitem>
      <para>
      Filter parameters to apply on returned resource types.
      This can be specified multiple times, or once with
      parameters separated by a semicolon. It can be any of
      name, version and support_status
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="heatclient_subcommand_resource-type-show">
        <title>heat resource-type-show</title>
        <screen><computeroutput>usage: heat resource-type-show &lt;RESOURCE_TYPE&gt;</computeroutput></screen>
        <para>
Show the resource type.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;RESOURCE_TYPE&gt;</command></term>
    <listitem>
      <para>
        Resource type to get the details for.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="heatclient_subcommand_resource-type-template">
        <title>heat resource-type-template</title>
        <screen><computeroutput>usage: heat resource-type-template [-t &lt;TEMPLATE_TYPE&gt;] [-F &lt;FORMAT&gt;]
                                   &lt;RESOURCE_TYPE&gt;</computeroutput></screen>
        <para>
Generate a template based on a resource type.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;RESOURCE_TYPE&gt;</command></term>
    <listitem>
      <para>
        Resource type to generate a template for.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
  <variablelist wordsize="10">
    <title>Optional arguments</title>
  <varlistentry>
    <term><command>-t &lt;TEMPLATE_TYPE&gt;, --template-type &lt;TEMPLATE_TYPE&gt;</command></term>
    <listitem>
      <para>
      Template type to generate, hot or cfn.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-F &lt;FORMAT&gt;, --format &lt;FORMAT&gt;</command></term>
    <listitem>
      <para>
      The template output format, one of: yaml, json.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="heatclient_subcommand_service-list">
        <title>heat service-list</title>
        <screen><computeroutput>usage: heat service-list</computeroutput></screen>
        <para>
List the Heat engines.
        </para>
    </section>
    <section xml:id="heatclient_subcommand_snapshot-delete">
        <title>heat snapshot-delete</title>
        <screen><computeroutput>usage: heat snapshot-delete &lt;NAME or ID&gt; &lt;SNAPSHOT&gt;</computeroutput></screen>
        <para>
Delete a snapshot of a stack.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;NAME or ID&gt;</command></term>
    <listitem>
      <para>
        Name or ID of the stack containing the snapshot.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>&lt;SNAPSHOT&gt;</command></term>
    <listitem>
      <para>
        The ID of the snapshot to delete.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="heatclient_subcommand_snapshot-list">
        <title>heat snapshot-list</title>
        <screen><computeroutput>usage: heat snapshot-list &lt;NAME or ID&gt;</computeroutput></screen>
        <para>
List the snapshots of a stack.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;NAME or ID&gt;</command></term>
    <listitem>
      <para>
        Name or ID of the stack containing the snapshots.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="heatclient_subcommand_snapshot-show">
        <title>heat snapshot-show</title>
        <screen><computeroutput>usage: heat snapshot-show &lt;NAME or ID&gt; &lt;SNAPSHOT&gt;</computeroutput></screen>
        <para>
Show a snapshot of a stack.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;NAME or ID&gt;</command></term>
    <listitem>
      <para>
        Name or ID of the stack containing the snapshot.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>&lt;SNAPSHOT&gt;</command></term>
    <listitem>
      <para>
        The ID of the snapshot to show.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="heatclient_subcommand_stack-abandon">
        <title>heat stack-abandon</title>
        <screen><computeroutput>usage: heat stack-abandon [-O &lt;FILE&gt;] &lt;NAME or ID&gt;</computeroutput></screen>
        <para>
Abandon the stack. This will delete the record of the stack from Heat, but
will not delete any of the underlying resources. Prints an adoptable JSON
representation of the stack to stdout or a file on success.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;NAME or ID&gt;</command></term>
    <listitem>
      <para>
        Name or ID of stack to abandon.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
  <variablelist wordsize="10">
    <title>Optional arguments</title>
  <varlistentry>
    <term><command>-O &lt;FILE&gt;, --output-file &lt;FILE&gt;</command></term>
    <listitem>
      <para>
      file to output abandon result. If the option is
      specified, the result will be output into &lt;FILE&gt;.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="heatclient_subcommand_stack-adopt">
        <title>heat stack-adopt</title>
        <screen><computeroutput>usage: heat stack-adopt [-e &lt;FILE or URL&gt;] [-c &lt;TIMEOUT&gt;] [-t &lt;TIMEOUT&gt;]
                        [-a &lt;FILE or URL&gt;] [-r]
                        [-P &lt;KEY1=VALUE1;KEY2=VALUE2...&gt;]
                        &lt;STACK_NAME&gt;</computeroutput></screen>
        <para>
Adopt a stack.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;STACK_NAME&gt;</command></term>
    <listitem>
      <para>
        Name of the stack to adopt.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
  <variablelist wordsize="10">
    <title>Optional arguments</title>
  <varlistentry>
    <term><command>-e &lt;FILE or URL&gt;, --environment-file &lt;FILE or URL&gt;</command></term>
    <listitem>
      <para>
      Path to the environment, it can be specified multiple
      times.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-c &lt;TIMEOUT&gt;, --create-timeout &lt;TIMEOUT&gt;</command></term>
    <listitem>
      <para>
      Stack creation timeout in minutes. <emphasis>DEPRECATED</emphasis> use
      --timeout instead.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-t &lt;TIMEOUT&gt;, --timeout &lt;TIMEOUT&gt;</command></term>
    <listitem>
      <para>
      Stack creation timeout in minutes.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-a &lt;FILE or URL&gt;, --adopt-file &lt;FILE or URL&gt;</command></term>
    <listitem>
      <para>
      Path to adopt stack data file.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-r, --enable-rollback</command></term>
    <listitem>
      <para>
      Enable rollback on create/update failure.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-P &lt;KEY1=VALUE1;KEY2=VALUE2...&gt;, --parameters &lt;KEY1=VALUE1;KEY2=VALUE2...&gt;</command></term>
    <listitem>
      <para>
      Parameter values used to create the stack. This can be
      specified multiple times, or once with parameters
      separated by a semicolon.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="heatclient_subcommand_stack-cancel-update">
        <title>heat stack-cancel-update</title>
        <screen><computeroutput>usage: heat stack-cancel-update &lt;NAME or ID&gt;</computeroutput></screen>
        <para>
Cancel currently running update of the stack.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;NAME or ID&gt;</command></term>
    <listitem>
      <para>
        Name or ID of stack to cancel update for.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="heatclient_subcommand_stack-create">
        <title>heat stack-create</title>
        <screen><computeroutput>usage: heat stack-create [-f &lt;FILE&gt;] [-e &lt;FILE or URL&gt;]
                         [--pre-create &lt;RESOURCE&gt;] [-u &lt;URL&gt;] [-o &lt;URL&gt;]
                         [-c &lt;TIMEOUT&gt;] [-t &lt;TIMEOUT&gt;] [-r]
                         [-P &lt;KEY1=VALUE1;KEY2=VALUE2...&gt;] [-Pf &lt;KEY=FILE&gt;]
                         [--poll [SECONDS]] [--tags &lt;TAG1,TAG2&gt;]
                         &lt;STACK_NAME&gt;</computeroutput></screen>
        <para>
Create the stack.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;STACK_NAME&gt;</command></term>
    <listitem>
      <para>
        Name of the stack to create.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
  <variablelist wordsize="10">
    <title>Optional arguments</title>
  <varlistentry>
    <term><command>-f &lt;FILE&gt;, --template-file &lt;FILE&gt;</command></term>
    <listitem>
      <para>
      Path to the template.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-e &lt;FILE or URL&gt;, --environment-file &lt;FILE or URL&gt;</command></term>
    <listitem>
      <para>
      Path to the environment, it can be specified multiple
      times.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--pre-create &lt;RESOURCE&gt;</command></term>
    <listitem>
      <para>
      Name of a resource to set a pre-create hook to.
      Resources in nested stacks can be set using slash as a
      separator: nested_stack/another/my_resource. You can
      use wildcards to match multiple stacks or resources:
      nested_stack/an*/*_resource. This can be specified
      multiple times
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-u &lt;URL&gt;, --template-url &lt;URL&gt;</command></term>
    <listitem>
      <para>
      URL of template.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-o &lt;URL&gt;, --template-object &lt;URL&gt;</command></term>
    <listitem>
      <para>
      URL to retrieve template object (e.g. from swift).
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-c &lt;TIMEOUT&gt;, --create-timeout &lt;TIMEOUT&gt;</command></term>
    <listitem>
      <para>
      Stack creation timeout in minutes. <emphasis>DEPRECATED</emphasis> use
      --timeout instead.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-t &lt;TIMEOUT&gt;, --timeout &lt;TIMEOUT&gt;</command></term>
    <listitem>
      <para>
      Stack creation timeout in minutes.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-r, --enable-rollback</command></term>
    <listitem>
      <para>
      Enable rollback on create/update failure.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-P &lt;KEY1=VALUE1;KEY2=VALUE2...&gt;, --parameters &lt;KEY1=VALUE1;KEY2=VALUE2...&gt;</command></term>
    <listitem>
      <para>
      Parameter values used to create the stack. This can be
      specified multiple times, or once with parameters
      separated by a semicolon.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-Pf &lt;KEY=FILE&gt;, --parameter-file &lt;KEY=FILE&gt;</command></term>
    <listitem>
      <para>
      Parameter values from file used to create the stack.
      This can be specified multiple times. Parameter value
      would be the content of the file
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--poll [SECONDS]</command></term>
    <listitem>
      <para>
        Poll and report events until stack completes. Optional
      poll interval in seconds can be provided as argument,
      default 5.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--tags &lt;TAG1,TAG2&gt;</command></term>
    <listitem>
      <para>
        A list of tags to associate with the stack.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="heatclient_subcommand_stack-delete">
        <title>heat stack-delete</title>
        <screen><computeroutput>usage: heat stack-delete &lt;NAME or ID&gt; [&lt;NAME or ID&gt; ...]</computeroutput></screen>
        <para>
Delete the stack(s).
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;NAME or ID&gt;</command></term>
    <listitem>
      <para>
        Name or ID of stack(s) to delete.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="heatclient_subcommand_stack-list">
        <title>heat stack-list</title>
        <screen><computeroutput>usage: heat stack-list [-s] [-n] [-a] [-f &lt;KEY1=VALUE1;KEY2=VALUE2...&gt;]
                       [-t &lt;TAG1,TAG2...&gt;] [--tags-any &lt;TAG1,TAG2...&gt;]
                       [--not-tags &lt;TAG1,TAG2...&gt;]
                       [--not-tags-any &lt;TAG1,TAG2...&gt;] [-l &lt;LIMIT&gt;] [-m &lt;ID&gt;]
                       [-k &lt;KEY1,KEY2...&gt;] [-d [asc|desc]] [-g] [-o]</computeroutput></screen>
        <para>
List the user's stacks.
        </para>  <variablelist wordsize="10">
    <title>Optional arguments</title>
  <varlistentry>
    <term><command>-s, --show-deleted</command></term>
    <listitem>
      <para>
        Include soft-deleted stacks in the stack listing.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-n, --show-nested</command></term>
    <listitem>
      <para>
        Include nested stacks in the stack listing.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-a, --show-hidden</command></term>
    <listitem>
      <para>
        Include hidden stacks in the stack listing.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-f &lt;KEY1=VALUE1;KEY2=VALUE2...&gt;, --filters &lt;KEY1=VALUE1;KEY2=VALUE2...&gt;</command></term>
    <listitem>
      <para>
      Filter parameters to apply on returned stacks. This
      can be specified multiple times, or once with
      parameters separated by a semicolon.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-t &lt;TAG1,TAG2...&gt;, --tags &lt;TAG1,TAG2...&gt;</command></term>
    <listitem>
      <para>
      Show stacks containing these tags, combine multiple
      tags using the boolean AND expression
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--tags-any &lt;TAG1,TAG2...&gt;</command></term>
    <listitem>
      <para>
      Show stacks containing these tags, combine multiple
      tags using the boolean OR expression
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--not-tags &lt;TAG1,TAG2...&gt;</command></term>
    <listitem>
      <para>
      Show stacks not containing these tags, combine
      multiple tags using the boolean AND expression
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--not-tags-any &lt;TAG1,TAG2...&gt;</command></term>
    <listitem>
      <para>
      Show stacks not containing these tags, combine
      multiple tags using the boolean OR expression
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-l &lt;LIMIT&gt;, --limit &lt;LIMIT&gt;</command></term>
    <listitem>
      <para>
      Limit the number of stacks returned.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-m &lt;ID&gt;, --marker &lt;ID&gt;</command></term>
    <listitem>
      <para>
      Only return stacks that appear after the given stack
      ID.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-k &lt;KEY1,KEY2...&gt;, --sort-keys &lt;KEY1,KEY2...&gt;</command></term>
    <listitem>
      <para>
      List of keys for sorting the returned stacks. This can
      be specified multiple times or once with keys
      separated by semicolons. Valid sorting keys include
      "stack_name", "stack_status", "creation_time" and
      "updated_time".
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-d [asc|desc], --sort-dir [asc|desc]</command></term>
    <listitem>
      <para>
      Sorting direction (either "asc" or "desc") for the
      sorting keys.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-g, --global-tenant</command></term>
    <listitem>
      <para>
        Display stacks from all tenants. Operation only
      authorized for users who match the policy in heat's
      policy.json.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-o, --show-owner</command></term>
    <listitem>
      <para>
        Display stack owner information. This is automatically
      enabled when using --global-tenant.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="heatclient_subcommand_stack-preview">
        <title>heat stack-preview</title>
        <screen><computeroutput>usage: heat stack-preview [-f &lt;FILE&gt;] [-e &lt;FILE or URL&gt;] [-u &lt;URL&gt;] [-o &lt;URL&gt;]
                          [-t &lt;TIMEOUT&gt;] [-r]
                          [-P &lt;KEY1=VALUE1;KEY2=VALUE2...&gt;] [-Pf &lt;KEY=FILE&gt;]
                          [--tags &lt;TAG1,TAG2&gt;]
                          &lt;STACK_NAME&gt;</computeroutput></screen>
        <para>
Preview the stack.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;STACK_NAME&gt;</command></term>
    <listitem>
      <para>
        Name of the stack to preview.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
  <variablelist wordsize="10">
    <title>Optional arguments</title>
  <varlistentry>
    <term><command>-f &lt;FILE&gt;, --template-file &lt;FILE&gt;</command></term>
    <listitem>
      <para>
      Path to the template.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-e &lt;FILE or URL&gt;, --environment-file &lt;FILE or URL&gt;</command></term>
    <listitem>
      <para>
      Path to the environment, it can be specified multiple
      times.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-u &lt;URL&gt;, --template-url &lt;URL&gt;</command></term>
    <listitem>
      <para>
      URL of template.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-o &lt;URL&gt;, --template-object &lt;URL&gt;</command></term>
    <listitem>
      <para>
      URL to retrieve template object (e.g. from swift)
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-t &lt;TIMEOUT&gt;, --timeout &lt;TIMEOUT&gt;</command></term>
    <listitem>
      <para>
      Stack creation timeout in minutes. This is only used
      duringvalidation in preview.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-r, --enable-rollback</command></term>
    <listitem>
      <para>
      Enable rollback on failure. This option is not used
      duringpreview and exists only for symmetry with stack-
      create.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-P &lt;KEY1=VALUE1;KEY2=VALUE2...&gt;, --parameters &lt;KEY1=VALUE1;KEY2=VALUE2...&gt;</command></term>
    <listitem>
      <para>
      Parameter values used to preview the stack. This can
      be specified multiple times, or once with parameters
      separated by semicolon.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-Pf &lt;KEY=FILE&gt;, --parameter-file &lt;KEY=FILE&gt;</command></term>
    <listitem>
      <para>
      Parameter values from file used to create the stack.
      This can be specified multiple times. Parameter value
      would be the content of the file
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--tags &lt;TAG1,TAG2&gt;</command></term>
    <listitem>
      <para>
        A list of tags to associate with the stack.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="heatclient_subcommand_stack-restore">
        <title>heat stack-restore</title>
        <screen><computeroutput>usage: heat stack-restore &lt;NAME or ID&gt; &lt;SNAPSHOT&gt;</computeroutput></screen>
        <para>
Restore a snapshot of a stack.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;NAME or ID&gt;</command></term>
    <listitem>
      <para>
        Name or ID of the stack containing the snapshot.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>&lt;SNAPSHOT&gt;</command></term>
    <listitem>
      <para>
        The ID of the snapshot to restore.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="heatclient_subcommand_stack-show">
        <title>heat stack-show</title>
        <screen><computeroutput>usage: heat stack-show &lt;NAME or ID&gt;</computeroutput></screen>
        <para>
Describe the stack.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;NAME or ID&gt;</command></term>
    <listitem>
      <para>
        Name or ID of stack to describe.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="heatclient_subcommand_stack-snapshot">
        <title>heat stack-snapshot</title>
        <screen><computeroutput>usage: heat stack-snapshot [-n &lt;NAME&gt;] &lt;NAME or ID&gt;</computeroutput></screen>
        <para>
Make a snapshot of a stack.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;NAME or ID&gt;</command></term>
    <listitem>
      <para>
        Name or ID of stack to snapshot.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
  <variablelist wordsize="10">
    <title>Optional arguments</title>
  <varlistentry>
    <term><command>-n &lt;NAME&gt;, --name &lt;NAME&gt;</command></term>
    <listitem>
      <para>
      If specified, the name given to the snapshot.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="heatclient_subcommand_stack-update">
        <title>heat stack-update</title>
        <screen><computeroutput>usage: heat stack-update [-f &lt;FILE&gt;] [-e &lt;FILE or URL&gt;]
                         [--pre-update &lt;RESOURCE&gt;] [-u &lt;URL&gt;] [-o &lt;URL&gt;]
                         [-t &lt;TIMEOUT&gt;] [-r] [--rollback &lt;VALUE&gt;] [-y]
                         [-P &lt;KEY1=VALUE1;KEY2=VALUE2...&gt;] [-Pf &lt;KEY=FILE&gt;]
                         [-x] [-c &lt;PARAMETER&gt;] [--tags &lt;TAG1,TAG2&gt;]
                         &lt;NAME or ID&gt;</computeroutput></screen>
        <para>
Update the stack.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;NAME or ID&gt;</command></term>
    <listitem>
      <para>
        Name or ID of stack to update.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
  <variablelist wordsize="10">
    <title>Optional arguments</title>
  <varlistentry>
    <term><command>-f &lt;FILE&gt;, --template-file &lt;FILE&gt;</command></term>
    <listitem>
      <para>
      Path to the template.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-e &lt;FILE or URL&gt;, --environment-file &lt;FILE or URL&gt;</command></term>
    <listitem>
      <para>
      Path to the environment, it can be specified multiple
      times.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--pre-update &lt;RESOURCE&gt;</command></term>
    <listitem>
      <para>
      Name of a resource to set a pre-update hook to.
      Resources in nested stacks can be set using slash as a
      separator: nested_stack/another/my_resource. You can
      use wildcards to match multiple stacks or resources:
      nested_stack/an*/*_resource. This can be specified
      multiple times
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-u &lt;URL&gt;, --template-url &lt;URL&gt;</command></term>
    <listitem>
      <para>
      URL of template.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-o &lt;URL&gt;, --template-object &lt;URL&gt;</command></term>
    <listitem>
      <para>
      URL to retrieve template object (e.g. from swift).
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-t &lt;TIMEOUT&gt;, --timeout &lt;TIMEOUT&gt;</command></term>
    <listitem>
      <para>
      Stack update timeout in minutes.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-r, --enable-rollback</command></term>
    <listitem>
      <para>
      <emphasis>DEPRECATED!</emphasis> Use --rollback argument instead. Enable
      rollback on stack update failure. NOTE: default
      behavior is now to use the rollback value of existing
      stack.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--rollback &lt;VALUE&gt;</command></term>
    <listitem>
      <para>
        Set rollback on update failure. Values ('1', 't',
      'true', 'on', 'y', 'yes') set rollback to enabled.
      Values ('0', 'f', 'false', 'off', 'n', 'no') set
      rollback to disabled. Default is to use the value of
      existing stack to be updated.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-y, --dry-run</command></term>
    <listitem>
      <para>
        Do not actually perform the stack update, but show
      what would be changed
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-P &lt;KEY1=VALUE1;KEY2=VALUE2...&gt;, --parameters &lt;KEY1=VALUE1;KEY2=VALUE2...&gt;</command></term>
    <listitem>
      <para>
      Parameter values used to create the stack. This can be
      specified multiple times, or once with parameters
      separated by a semicolon.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-Pf &lt;KEY=FILE&gt;, --parameter-file &lt;KEY=FILE&gt;</command></term>
    <listitem>
      <para>
      Parameter values from file used to create the stack.
      This can be specified multiple times. Parameter value
      would be the content of the file
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-x, --existing</command></term>
    <listitem>
      <para>
        Re-use the template, parameters and environment of the
      current stack. If the template argument is omitted
      then the existing template is used. If no
      --environment-file is specified then the existing
      environment is used. Parameters specified in
      --parameters will patch over the existing values in
      the current stack. Parameters omitted will keep the
      existing values.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-c &lt;PARAMETER&gt;, --clear-parameter &lt;PARAMETER&gt;</command></term>
    <listitem>
      <para>
      Remove the parameters from the set of parameters of
      current stack for the stack-update. The default value
      in the template will be used. This can be specified
      multiple times.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>--tags &lt;TAG1,TAG2&gt;</command></term>
    <listitem>
      <para>
        An updated list of tags to associate with the stack.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="heatclient_subcommand_template-function-list">
        <title>heat template-function-list</title>
        <screen><computeroutput>usage: heat template-function-list &lt;TEMPLATE_VERSION&gt;</computeroutput></screen>
        <para>
List the available functions.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;TEMPLATE_VERSION&gt;</command></term>
    <listitem>
      <para>
        Template version to get the functions for.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="heatclient_subcommand_template-show">
        <title>heat template-show</title>
        <screen><computeroutput>usage: heat template-show &lt;NAME or ID&gt;</computeroutput></screen>
        <para>
Get the template for the specified stack.
        </para>  <variablelist wordsize="10">
    <title>Positional arguments</title>
  <varlistentry>
    <term><command>&lt;NAME or ID&gt;</command></term>
    <listitem>
      <para>
        Name or ID of stack to get the template for.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="heatclient_subcommand_template-validate">
        <title>heat template-validate</title>
        <screen><computeroutput>usage: heat template-validate [-u &lt;URL&gt;] [-f &lt;FILE&gt;] [-e &lt;FILE or URL&gt;]
                              [-o &lt;URL&gt;] [-n]</computeroutput></screen>
        <para>
Validate a template with parameters.
        </para>  <variablelist wordsize="10">
    <title>Optional arguments</title>
  <varlistentry>
    <term><command>-u &lt;URL&gt;, --template-url &lt;URL&gt;</command></term>
    <listitem>
      <para>
      URL of template.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-f &lt;FILE&gt;, --template-file &lt;FILE&gt;</command></term>
    <listitem>
      <para>
      Path to the template.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-e &lt;FILE or URL&gt;, --environment-file &lt;FILE or URL&gt;</command></term>
    <listitem>
      <para>
      Path to the environment, it can be specified multiple
      times.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-o &lt;URL&gt;, --template-object &lt;URL&gt;</command></term>
    <listitem>
      <para>
      URL to retrieve template object (e.g. from swift).
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><command>-n, --show-nested</command></term>
    <listitem>
      <para>
        Resolve parameters from nested templates as well.
      </para>
    </listitem>
  </varlistentry>
 </variablelist>
    </section>
    <section xml:id="heatclient_subcommand_template-version-list">
        <title>heat template-version-list</title>
        <screen><computeroutput>usage: heat template-version-list</computeroutput></screen>
        <para>
List the available template versions.
        </para>
    </section>
</chapter>
