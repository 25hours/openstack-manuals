<?xml version="1.0" encoding="UTF-8"?>
<section xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
    xml:id="ceilometerclient_commands">

    <!-- This file is automatically generated, do not edit -->

    <?dbhtml stop-chunking?>

    <title>ceilometer commands</title>
    <para>The ceilometer client is the command-line interface (CLI) for the
         OpenStack Telemetry API and its extensions.</para>
    <para>For help on a specific <command>ceilometer</command>
       command, enter:
    </para>
    <screen><prompt>$</prompt> <userinput><command>ceilometer</command> <option>help</option> <replaceable>COMMAND</replaceable></userinput></screen>

    <section xml:id="ceilometerclient_command_usage">
       <title>ceilometer usage</title>
        <screen><computeroutput>                  [--key-file KEY_FILE] [--os-cacert &lt;ca-certificate-file>]
                  [--ca-file OS_CACERT] [--timeout TIMEOUT]
                  [--os-username OS_USERNAME] [--os-password OS_PASSWORD]
                  [--os-tenant-id OS_TENANT_ID]
                  [--os-tenant-name OS_TENANT_NAME]
                  [--os-auth-url OS_AUTH_URL]
                  [--os-region-name OS_REGION_NAME]
                  [--os-auth-token OS_AUTH_TOKEN]
                  [--ceilometer-url CEILOMETER_URL]
                  [--ceilometer-api-version CEILOMETER_API_VERSION]
                  [--os-service-type OS_SERVICE_TYPE]
                  [--os-endpoint-type OS_ENDPOINT_TYPE]
                  &lt;subcommand> ...</computeroutput></screen>
    </section>
    <section xml:id="ceilometerclient_command_pos">
        <title>ceilometer positional arguments</title>
        <screen><computeroutput>  &lt;subcommand>
    alarm-combination-create
                        Create a new alarm based on state of other alarms.
    alarm-combination-update
                        Update an existing alarm based on state of other
                        alarms.
    alarm-create        Create a new alarm (Deprecated).
    alarm-delete        Delete an alarm.
    alarm-history       Display the change history of an alarm.
    alarm-list          List the user's alarms.
    alarm-show          Show an alarm.
    alarm-state-get     Get the state of an alarm.
    alarm-state-set     Set the state of an alarm.
    alarm-threshold-create
                        Create a new alarm based on computed statistics.
    alarm-threshold-update
                        Update an existing alarm based on computed statistics.
    alarm-update        Update an existing alarm.
    event-list          List events.
    event-show          Show a particular event.
    event-type-list     List event types.
    meter-list          List the user's meters.
    resource-list       List the resources.
    resource-show       Show the resource.
    sample-create       Create a sample.
    sample-list         List the samples for a meter.
    statistics          List the statistics for a meter.
    trait-description-list
                        List trait info for an event type.
    trait-list          List trait all traits with name &lt;trait_name> for Event
                        Type
    bash-completion     Prints all of the commands and options to stdout.
    help                Display help about this program or one of its
                        subcommands.
</computeroutput></screen>
    </section>
    <section xml:id="ceilometerclient_command_optional">
        <title>ceilometer optional arguments</title>
        <screen><computeroutput>  --version             show program's version number and exit
  -d, --debug           Defaults to env[CEILOMETERCLIENT_DEBUG]
  -v, --verbose         Print more verbose output
  -k, --insecure        Explicitly allow ceilometerclient to perform
                        "insecure" SSL (https) requests. The server's
                        certificate will not be verified against any
                        certificate authorities. This option should be used
                        with caution.
  --cert-file CERT_FILE
                        Path of certificate file to use in SSL connection.
                        This file can optionally be prepended with the private
                        key.
  --key-file KEY_FILE   Path of client key to use in SSL connection. This
                        option is not necessary if your key is prepended to
                        your cert file.
  --os-cacert &lt;ca-certificate-file>
                        Path of CA TLS certificate(s) used to verifythe remote
                        server's certificate. Without this option ceilometer
                        looks for the default system CA certificates.
  --ca-file OS_CACERT   DEPRECATED! Use --os-cacert.
  --timeout TIMEOUT     Number of seconds to wait for a response
  --os-username OS_USERNAME
                        Defaults to env[OS_USERNAME]
  --os-password OS_PASSWORD
                        Defaults to env[OS_PASSWORD]
  --os-tenant-id OS_TENANT_ID
                        Defaults to env[OS_TENANT_ID]
  --os-tenant-name OS_TENANT_NAME
                        Defaults to env[OS_TENANT_NAME]
  --os-auth-url OS_AUTH_URL
                        Defaults to env[OS_AUTH_URL]
  --os-region-name OS_REGION_NAME
                        Defaults to env[OS_REGION_NAME]
  --os-auth-token OS_AUTH_TOKEN
                        Defaults to env[OS_AUTH_TOKEN]
  --ceilometer-url CEILOMETER_URL
                        Defaults to env[CEILOMETER_URL]
  --ceilometer-api-version CEILOMETER_API_VERSION
                        Defaults to env[CEILOMETER_API_VERSION] or 2
  --os-service-type OS_SERVICE_TYPE
                        Defaults to env[OS_SERVICE_TYPE]
  --os-endpoint-type OS_ENDPOINT_TYPE
                        Defaults to env[OS_ENDPOINT_TYPE]
</computeroutput></screen>
    </section>
    <section xml:id="ceilometerclient_subcommand_alarm-combination-create">
        <title>ceilometer alarm-combination-create command</title>
        <screen><computeroutput>usage: ceilometer alarm-combination-create --name &lt;NAME>
                                           [--project-id &lt;PROJECT_ID>]
                                           [--user-id &lt;USER_ID>]
                                           [--description &lt;DESCRIPTION>]
                                           [--state &lt;STATE>]
                                           [--enabled {True|False}]
                                           [--alarm-action &lt;Webhook URL>]
                                           [--ok-action &lt;Webhook URL>]
                                           [--insufficient-data-action &lt;Webhook URL>]
                                           --alarm_ids &lt;ALARM IDS>
                                           [--operator &lt;OPERATOR>]
                                           [--repeat-actions {True|False}]

Create a new alarm based on state of other alarms.

Optional arguments:
  --name &lt;NAME>         Name of the alarm (must be unique per tenant)
                        Required.
  --project-id &lt;PROJECT_ID>
                        Tenant to associate with alarm (only settable by admin
                        users)
  --user-id &lt;USER_ID>   User to associate with alarm (only settable by admin
                        users)
  --description &lt;DESCRIPTION>
                        Free text description of the alarm
  --state &lt;STATE>       State of the alarm, one of: ['ok', 'alarm',
                        'insufficient_data']
  --enabled {True|False}
                        True if alarm evaluation/actioning is enabled
  --alarm-action &lt;Webhook URL>
                        URL to invoke when state transitions to alarm. May be
                        used multiple times. Defaults to None.
  --ok-action &lt;Webhook URL>
                        URL to invoke when state transitions to OK. May be
                        used multiple times. Defaults to None.
  --insufficient-data-action &lt;Webhook URL>
                        URL to invoke when state transitions to unkown. May be
                        used multiple times. Defaults to None.
  --alarm_ids &lt;ALARM IDS>
                        List of alarm id Required.
  --operator &lt;OPERATOR>
                        Operator to compare with, one of: ['and', 'or']
  --repeat-actions {True|False}
                        True if actions should be repeatedly notified while
                        alarm remains in target state Defaults to False.

</computeroutput></screen>
    </section>
    <section xml:id="ceilometerclient_subcommand_alarm-combination-update">
        <title>ceilometer alarm-combination-update command</title>
        <screen><computeroutput>usage: ceilometer alarm-combination-update -a &lt;ALARM_ID> [--name &lt;NAME>]
                                           [--project-id &lt;PROJECT_ID>]
                                           [--user-id &lt;USER_ID>]
                                           [--description &lt;DESCRIPTION>]
                                           [--state &lt;STATE>]
                                           [--enabled {True|False}]
                                           [--alarm-action &lt;Webhook URL>]
                                           [--ok-action &lt;Webhook URL>]
                                           [--insufficient-data-action &lt;Webhook URL>]
                                           [--alarm_ids &lt;ALARM IDS>]
                                           [--operator &lt;OPERATOR>]
                                           [--repeat-actions {True|False}]

Update an existing alarm based on state of other alarms.

Optional arguments:
  -a &lt;ALARM_ID>, --alarm_id &lt;ALARM_ID>
                        ID of the alarm to update. Required.
  --name &lt;NAME>         Name of the alarm (must be unique per tenant)
  --project-id &lt;PROJECT_ID>
                        Tenant to associate with alarm (only settable by admin
                        users)
  --user-id &lt;USER_ID>   User to associate with alarm (only settable by admin
                        users)
  --description &lt;DESCRIPTION>
                        Free text description of the alarm
  --state &lt;STATE>       State of the alarm, one of: ['ok', 'alarm',
                        'insufficient_data']
  --enabled {True|False}
                        True if alarm evaluation/actioning is enabled
  --alarm-action &lt;Webhook URL>
                        URL to invoke when state transitions to alarm. May be
                        used multiple times. Defaults to None.
  --ok-action &lt;Webhook URL>
                        URL to invoke when state transitions to OK. May be
                        used multiple times. Defaults to None.
  --insufficient-data-action &lt;Webhook URL>
                        URL to invoke when state transitions to unkown. May be
                        used multiple times. Defaults to None.
  --alarm_ids &lt;ALARM IDS>
                        List of alarm id
  --operator &lt;OPERATOR>
                        Operator to compare with, one of: ['and', 'or']
  --repeat-actions {True|False}
                        True if actions should be repeatedly notified while
                        alarm remains in target state

</computeroutput></screen>
    </section>
    <section xml:id="ceilometerclient_subcommand_alarm-delete">
        <title>ceilometer alarm-delete command</title>
        <screen><computeroutput>usage: ceilometer alarm-delete -a &lt;ALARM_ID>

Delete an alarm.

Optional arguments:
  -a &lt;ALARM_ID>, --alarm_id &lt;ALARM_ID>
                        ID of the alarm to delete. Required.

</computeroutput></screen>
    </section>
    <section xml:id="ceilometerclient_subcommand_alarm-history">
        <title>ceilometer alarm-history command</title>
        <screen><computeroutput>usage: ceilometer alarm-history -a &lt;ALARM_ID> [-q &lt;QUERY>]

Display the change history of an alarm.

Optional arguments:
  -a &lt;ALARM_ID>, --alarm_id &lt;ALARM_ID>
                        ID of the alarm for which history is shown. Required.
  -q &lt;QUERY>, --query &lt;QUERY>
                        key[op]data_type::value; list. data_type is optional,
                        but if supplied must be string, integer, float, or
                        boolean

</computeroutput></screen>
    </section>
    <section xml:id="ceilometerclient_subcommand_alarm-list">
        <title>ceilometer alarm-list command</title>
        <screen><computeroutput>usage: ceilometer alarm-list [-q &lt;QUERY>]

List the user's alarms.

Optional arguments:
  -q &lt;QUERY>, --query &lt;QUERY>
                        key[op]data_type::value; list. data_type is optional,
                        but if supplied must be string, integer, float, or
                        boolean

</computeroutput></screen>
    </section>
    <section xml:id="ceilometerclient_subcommand_alarm-show">
        <title>ceilometer alarm-show command</title>
        <screen><computeroutput>usage: ceilometer alarm-show -a &lt;ALARM_ID>

Show an alarm.

Optional arguments:
  -a &lt;ALARM_ID>, --alarm_id &lt;ALARM_ID>
                        ID of the alarm to show. Required.

</computeroutput></screen>
    </section>
    <section xml:id="ceilometerclient_subcommand_alarm-state-get">
        <title>ceilometer alarm-state-get command</title>
        <screen><computeroutput>usage: ceilometer alarm-state-get -a &lt;ALARM_ID>

Get the state of an alarm.

Optional arguments:
  -a &lt;ALARM_ID>, --alarm_id &lt;ALARM_ID>
                        ID of the alarm state to show. Required.

</computeroutput></screen>
    </section>
    <section xml:id="ceilometerclient_subcommand_alarm-state-set">
        <title>ceilometer alarm-state-set command</title>
        <screen><computeroutput>usage: ceilometer alarm-state-set -a &lt;ALARM_ID> --state &lt;STATE>

Set the state of an alarm.

Optional arguments:
  -a &lt;ALARM_ID>, --alarm_id &lt;ALARM_ID>
                        ID of the alarm state to set. Required.
  --state &lt;STATE>       State of the alarm, one of: ['ok', 'alarm',
                        'insufficient_data'] Required.

</computeroutput></screen>
    </section>
    <section xml:id="ceilometerclient_subcommand_alarm-threshold-create">
        <title>ceilometer alarm-threshold-create command</title>
        <screen><computeroutput>usage: ceilometer alarm-threshold-create --name &lt;NAME>
                                         [--project-id &lt;PROJECT_ID>]
                                         [--user-id &lt;USER_ID>]
                                         [--description &lt;DESCRIPTION>]
                                         [--state &lt;STATE>]
                                         [--enabled {True|False}]
                                         [--alarm-action &lt;Webhook URL>]
                                         [--ok-action &lt;Webhook URL>]
                                         [--insufficient-data-action &lt;Webhook URL>]
                                         --meter-name &lt;METRIC>
                                         [--period &lt;PERIOD>]
                                         [--evaluation-periods &lt;COUNT>]
                                         [--statistic &lt;STATISTIC>]
                                         [--comparison-operator &lt;OPERATOR>]
                                         --threshold &lt;THRESHOLD> [-q &lt;QUERY>]
                                         [--repeat-actions {True|False}]

Create a new alarm based on computed statistics.

Optional arguments:
  --name &lt;NAME>         Name of the alarm (must be unique per tenant)
                        Required.
  --project-id &lt;PROJECT_ID>
                        Tenant to associate with alarm (only settable by admin
                        users)
  --user-id &lt;USER_ID>   User to associate with alarm (only settable by admin
                        users)
  --description &lt;DESCRIPTION>
                        Free text description of the alarm
  --state &lt;STATE>       State of the alarm, one of: ['ok', 'alarm',
                        'insufficient_data']
  --enabled {True|False}
                        True if alarm evaluation/actioning is enabled
  --alarm-action &lt;Webhook URL>
                        URL to invoke when state transitions to alarm. May be
                        used multiple times. Defaults to None.
  --ok-action &lt;Webhook URL>
                        URL to invoke when state transitions to OK. May be
                        used multiple times. Defaults to None.
  --insufficient-data-action &lt;Webhook URL>
                        URL to invoke when state transitions to unkown. May be
                        used multiple times. Defaults to None.
  --meter-name &lt;METRIC>
                        Metric to evaluate against Required.
  --period &lt;PERIOD>     Length of each period (seconds) to evaluate over
  --evaluation-periods &lt;COUNT>
                        Number of periods to evaluate over
  --statistic &lt;STATISTIC>
                        Statistic to evaluate, one of: ['max', 'min', 'avg',
                        'sum', 'count']
  --comparison-operator &lt;OPERATOR>
                        Operator to compare with, one of: ['lt', 'le', 'eq',
                        'ne', 'ge', 'gt']
  --threshold &lt;THRESHOLD>
                        Threshold to evaluate against Required.
  -q &lt;QUERY>, --query &lt;QUERY>
                        key[op]data_type::value; list. data_type is optional,
                        but if supplied must be string, integer, float, or
                        boolean
  --repeat-actions {True|False}
                        True if actions should be repeatedly notified while
                        alarm remains in target state Defaults to False.

</computeroutput></screen>
    </section>
    <section xml:id="ceilometerclient_subcommand_alarm-threshold-update">
        <title>ceilometer alarm-threshold-update command</title>
        <screen><computeroutput>usage: ceilometer alarm-threshold-update -a &lt;ALARM_ID> [--name &lt;NAME>]
                                         [--project-id &lt;PROJECT_ID>]
                                         [--user-id &lt;USER_ID>]
                                         [--description &lt;DESCRIPTION>]
                                         [--state &lt;STATE>]
                                         [--enabled {True|False}]
                                         [--alarm-action &lt;Webhook URL>]
                                         [--ok-action &lt;Webhook URL>]
                                         [--insufficient-data-action &lt;Webhook URL>]
                                         [--meter-name &lt;METRIC>]
                                         [--period &lt;PERIOD>]
                                         [--evaluation-periods &lt;COUNT>]
                                         [--statistic &lt;STATISTIC>]
                                         [--comparison-operator &lt;OPERATOR>]
                                         [--threshold &lt;THRESHOLD>]
                                         [-q &lt;QUERY>]
                                         [--repeat-actions {True|False}]

Update an existing alarm based on computed statistics.

Optional arguments:
  -a &lt;ALARM_ID>, --alarm_id &lt;ALARM_ID>
                        ID of the alarm to update. Required.
  --name &lt;NAME>         Name of the alarm (must be unique per tenant)
  --project-id &lt;PROJECT_ID>
                        Tenant to associate with alarm (only settable by admin
                        users)
  --user-id &lt;USER_ID>   User to associate with alarm (only settable by admin
                        users)
  --description &lt;DESCRIPTION>
                        Free text description of the alarm
  --state &lt;STATE>       State of the alarm, one of: ['ok', 'alarm',
                        'insufficient_data']
  --enabled {True|False}
                        True if alarm evaluation/actioning is enabled
  --alarm-action &lt;Webhook URL>
                        URL to invoke when state transitions to alarm. May be
                        used multiple times. Defaults to None.
  --ok-action &lt;Webhook URL>
                        URL to invoke when state transitions to OK. May be
                        used multiple times. Defaults to None.
  --insufficient-data-action &lt;Webhook URL>
                        URL to invoke when state transitions to unkown. May be
                        used multiple times. Defaults to None.
  --meter-name &lt;METRIC>
                        Metric to evaluate against
  --period &lt;PERIOD>     Length of each period (seconds) to evaluate over
  --evaluation-periods &lt;COUNT>
                        Number of periods to evaluate over
  --statistic &lt;STATISTIC>
                        Statistic to evaluate, one of: ['max', 'min', 'avg',
                        'sum', 'count']
  --comparison-operator &lt;OPERATOR>
                        Operator to compare with, one of: ['lt', 'le', 'eq',
                        'ne', 'ge', 'gt']
  --threshold &lt;THRESHOLD>
                        Threshold to evaluate against
  -q &lt;QUERY>, --query &lt;QUERY>
                        key[op]data_type::value; list. data_type is optional,
                        but if supplied must be string, integer, float, or
                        boolean
  --repeat-actions {True|False}
                        True if actions should be repeatedly notified while
                        alarm remains in target state

</computeroutput></screen>
    </section>
    <section xml:id="ceilometerclient_subcommand_alarm-update">
        <title>ceilometer alarm-update command</title>
        <screen><computeroutput>usage: ceilometer alarm-update -a &lt;ALARM_ID> [--name &lt;NAME>]
                               [--project-id &lt;PROJECT_ID>]
                               [--user-id &lt;USER_ID>]
                               [--description &lt;DESCRIPTION>] [--state &lt;STATE>]
                               [--enabled {True|False}]
                               [--alarm-action &lt;Webhook URL>]
                               [--ok-action &lt;Webhook URL>]
                               [--insufficient-data-action &lt;Webhook URL>]
                               [--period &lt;PERIOD>]
                               [--evaluation-periods &lt;COUNT>]
                               [--meter-name &lt;METRIC>]
                               [--statistic &lt;STATISTIC>]
                               [--comparison-operator &lt;OPERATOR>]
                               [--threshold &lt;THRESHOLD>]
                               [--matching-metadata &lt;Matching Metadata>]
                               [--repeat-actions {True|False}]

Update an existing alarm.

Optional arguments:
  -a &lt;ALARM_ID>, --alarm_id &lt;ALARM_ID>
                        ID of the alarm to update. Required.
  --name &lt;NAME>         Name of the alarm (must be unique per tenant)
  --project-id &lt;PROJECT_ID>
                        Tenant to associate with alarm (only settable by admin
                        users)
  --user-id &lt;USER_ID>   User to associate with alarm (only settable by admin
                        users)
  --description &lt;DESCRIPTION>
                        Free text description of the alarm
  --state &lt;STATE>       State of the alarm, one of: ['ok', 'alarm',
                        'insufficient_data']
  --enabled {True|False}
                        True if alarm evaluation/actioning is enabled
  --alarm-action &lt;Webhook URL>
                        URL to invoke when state transitions to alarm. May be
                        used multiple times. Defaults to None.
  --ok-action &lt;Webhook URL>
                        URL to invoke when state transitions to OK. May be
                        used multiple times. Defaults to None.
  --insufficient-data-action &lt;Webhook URL>
                        URL to invoke when state transitions to unkown. May be
                        used multiple times. Defaults to None.
  --period &lt;PERIOD>     Length of each period (seconds) to evaluate over
  --evaluation-periods &lt;COUNT>
                        Number of periods to evaluate over
  --meter-name &lt;METRIC>
                        Metric to evaluate against
  --statistic &lt;STATISTIC>
                        Statistic to evaluate, one of: ['max', 'min', 'avg',
                        'sum', 'count']
  --comparison-operator &lt;OPERATOR>
                        Operator to compare with, one of: ['lt', 'le', 'eq',
                        'ne', 'ge', 'gt']
  --threshold &lt;THRESHOLD>
                        Threshold to evaluate against
  --matching-metadata &lt;Matching Metadata>
                        A meter should match this resource metadata
                        (key=value) additionally to the meter_name Defaults to
                        None.
  --repeat-actions {True|False}
                        True if actions should be repeatedly notified while
                        alarm remains in target state

</computeroutput></screen>
    </section>
    <section xml:id="ceilometerclient_subcommand_event-list">
        <title>ceilometer event-list command</title>
        <screen><computeroutput>usage: ceilometer event-list [-q &lt;QUERY>]

List events.

Optional arguments:
  -q &lt;QUERY>, --query &lt;QUERY>
                        key[op]data_type::value; list. data_type is optional,
                        but if supplied must be string, integer, floator
                        datetime.

</computeroutput></screen>
    </section>
    <section xml:id="ceilometerclient_subcommand_event-show">
        <title>ceilometer event-show command</title>
        <screen><computeroutput>usage: ceilometer event-show -m &lt;message_id>

Show a particular event.

Optional arguments:
  -m &lt;message_id>, --message_id &lt;message_id>
                        The id of the event. Should be a UUID Required.

</computeroutput></screen>
    </section>
    <section xml:id="ceilometerclient_subcommand_event-type-list">
        <title>ceilometer event-type-list command</title>
        <screen><computeroutput>usage: ceilometer event-type-list

List event types.

</computeroutput></screen>
    </section>
    <section xml:id="ceilometerclient_subcommand_meter-list">
        <title>ceilometer meter-list command</title>
        <screen><computeroutput>usage: ceilometer meter-list [-q &lt;QUERY>]

List the user's meters.

Optional arguments:
  -q &lt;QUERY>, --query &lt;QUERY>
                        key[op]data_type::value; list. data_type is optional,
                        but if supplied must be string, integer, float, or
                        boolean

</computeroutput></screen>
    </section>
    <section xml:id="ceilometerclient_subcommand_resource-list">
        <title>ceilometer resource-list command</title>
        <screen><computeroutput>usage: ceilometer resource-list [-q &lt;QUERY>]

List the resources.

Optional arguments:
  -q &lt;QUERY>, --query &lt;QUERY>
                        key[op]data_type::value; list. data_type is optional,
                        but if supplied must be string, integer, float, or
                        boolean.

</computeroutput></screen>
    </section>
    <section xml:id="ceilometerclient_subcommand_resource-show">
        <title>ceilometer resource-show command</title>
        <screen><computeroutput>usage: ceilometer resource-show -r &lt;RESOURCE_ID>

Show the resource.

Optional arguments:
  -r &lt;RESOURCE_ID>, --resource_id &lt;RESOURCE_ID>
                        ID of the resource to show. Required.

</computeroutput></screen>
    </section>
    <section xml:id="ceilometerclient_subcommand_sample-create">
        <title>ceilometer sample-create command</title>
        <screen><computeroutput>usage: ceilometer sample-create [--project-id &lt;PROJECT_ID>]
                                [--user-id &lt;USER_ID>] -r &lt;RESOURCE_ID> -m
                                &lt;METER_NAME> --meter-type &lt;METER_TYPE>
                                --meter-unit &lt;METER_UNIT> --sample-volume
                                &lt;SAMPLE_VOLUME>
                                [--resource-metadata &lt;RESOURCE_METADATA>]
                                [--timestamp &lt;TIMESTAMP>]

Create a sample.

Optional arguments:
  --project-id &lt;PROJECT_ID>
                        Tenant to associate with sample (only settable by
                        admin users)
  --user-id &lt;USER_ID>   User to associate with sample (only settable by admin
                        users)
  -r &lt;RESOURCE_ID>, --resource-id &lt;RESOURCE_ID>
                        ID of the resource. Required.
  -m &lt;METER_NAME>, --meter-name &lt;METER_NAME>
                        the meter name Required.
  --meter-type &lt;METER_TYPE>
                        the meter type Required.
  --meter-unit &lt;METER_UNIT>
                        the meter unit Required.
  --sample-volume &lt;SAMPLE_VOLUME>
                        The sample volume Required.
  --resource-metadata &lt;RESOURCE_METADATA>
                        resource metadata
  --timestamp &lt;TIMESTAMP>
                        the sample timestamp

</computeroutput></screen>
    </section>
    <section xml:id="ceilometerclient_subcommand_sample-list">
        <title>ceilometer sample-list command</title>
        <screen><computeroutput>usage: ceilometer sample-list [-q &lt;QUERY>] -m &lt;NAME> [-l &lt;NUMBER>]

List the samples for a meter.

Optional arguments:
  -q &lt;QUERY>, --query &lt;QUERY>
                        key[op]data_type::value; list. data_type is optional,
                        but if supplied must be string, integer, float, or
                        boolean
  -m &lt;NAME>, --meter &lt;NAME>
                        Name of meter to show samples for. Required.
  -l &lt;NUMBER>, --limit &lt;NUMBER>
                        Maximum number of samples to return.

</computeroutput></screen>
    </section>
    <section xml:id="ceilometerclient_subcommand_statistics">
        <title>ceilometer statistics command</title>
        <screen><computeroutput>usage: ceilometer statistics [-q &lt;QUERY>] -m &lt;NAME> [-p &lt;PERIOD>]

List the statistics for a meter.

Optional arguments:
  -q &lt;QUERY>, --query &lt;QUERY>
                        key[op]data_type::value; list. data_type is optional,
                        but if supplied must be string, integer, float, or
                        boolean
  -m &lt;NAME>, --meter &lt;NAME>
                        Name of meter to show samples for. Required.
  -p &lt;PERIOD>, --period &lt;PERIOD>
                        Period in seconds over which to group samples.

</computeroutput></screen>
    </section>
    <section xml:id="ceilometerclient_subcommand_trait-description-list">
        <title>ceilometer trait-description-list command</title>
        <screen><computeroutput>usage: ceilometer trait-description-list -e &lt;EVENT_TYPE>

List trait info for an event type.

Optional arguments:
  -e &lt;EVENT_TYPE>, --event_type &lt;EVENT_TYPE>
                        Type of the event for which traits will be shown
                        Required.

</computeroutput></screen>
    </section>
    <section xml:id="ceilometerclient_subcommand_trait-list">
        <title>ceilometer trait-list command</title>
        <screen><computeroutput>usage: ceilometer trait-list -e &lt;EVENT_TYPE> -t &lt;TRAIT_NAME>

List trait all traits with name &lt;trait_name> for Event Type &lt;event_type>.

Optional arguments:
  -e &lt;EVENT_TYPE>, --event_type &lt;EVENT_TYPE>
                        Type of the event for which traits will listed
                        Required.
  -t &lt;TRAIT_NAME>, --trait_name &lt;TRAIT_NAME>
                        The name of the trait to list Required.

</computeroutput></screen>
    </section>
</section>
