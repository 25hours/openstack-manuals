<?xml version="1.0" encoding="UTF-8"?>
<section xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
    xml:id="heatclient_commands">

    <!-- This file is automatically generated, do not edit -->

    <?dbhtml stop-chunking?>

    <title>heat commands</title>
    <para>The heat client is the command-line interface (CLI) for the
         OpenStack Orchestration API and its extensions.</para>
    <para>For help on a specific <command>heat</command>
       command, enter:
    </para>
    <screen><prompt>$</prompt> <userinput><command>heat</command> <option>help</option> <replaceable>COMMAND</replaceable></userinput></screen>

    <section xml:id="heatclient_command_usage">
       <title>heat usage</title>
        <screen><computeroutput>            [--key-file KEY_FILE] [--ca-file CA_FILE] [--timeout TIMEOUT]
            [--os-username OS_USERNAME] [--os-password OS_PASSWORD]
            [--os-tenant-id OS_TENANT_ID] [--os-tenant-name OS_TENANT_NAME]
            [--os-auth-url OS_AUTH_URL] [--os-region-name OS_REGION_NAME]
            [--os-auth-token OS_AUTH_TOKEN] [--os-no-client-auth]
            [--heat-url HEAT_URL] [--heat-api-version HEAT_API_VERSION]
            [--os-service-type OS_SERVICE_TYPE]
            [--os-endpoint-type OS_ENDPOINT_TYPE] [--include-password]
            &lt;subcommand> ...</computeroutput></screen>
    </section>
    <section xml:id="heatclient_command_pos">
        <title>heat positional arguments</title>
        <screen><computeroutput>  &lt;subcommand>
    action-resume       Resume the stack.
    action-suspend      Suspend the stack.
    create              DEPRECATED! Use stack-create instead.
    delete              DEPRECATED! Use stack-delete instead.
    describe            DEPRECATED! Use stack-show instead.
    event               DEPRECATED! Use event-show instead.
    event-list          List events for a stack.
    event-show          Describe the event.
    gettemplate         DEPRECATED! Use template-show instead.
    list                DEPRECATED! Use stack-list instead.
    resource            DEPRECATED! Use resource-show instead.
    resource-list       Show list of resources belonging to a stack.
    resource-metadata   List resource metadata.
    resource-show       Describe the resource.
    resource-template   Generate a template based on a resource.
    resource-type-list  List the available resource types.
    resource-type-show  Show the resource type.
    stack-create        Create the stack.
    stack-delete        Delete the stack(s).
    stack-list          List the user's stacks.
    stack-show          Describe the stack.
    stack-update        Update the stack.
    template-show       Get the template for the specified stack.
    template-validate   Validate a template with parameters.
    update              DEPRECATED! Use stack-update instead.
    validate            DEPRECATED! Use template-validate instead.
    bash-completion     Prints all of the commands and options to stdout.
    help                Display help about this program or one of its
                        subcommands.
</computeroutput></screen>
    </section>
    <section xml:id="heatclient_command_optional">
        <title>heat optional arguments</title>
        <screen><computeroutput>  --version             Shows the client version and exits
  -d, --debug           Defaults to env[HEATCLIENT_DEBUG]
  -v, --verbose         Print more verbose output
  -k, --insecure        Explicitly allow the client to perform"insecure" SSL
                        (https) requests. The server's certificate will not be
                        verified against any certificate authorities. This
                        option should be used with caution.
  --cert-file CERT_FILE
                        Path of certificate file to use in SSL connection.
                        This file can optionally be prependedwith the private
                        key.
  --key-file KEY_FILE   Path of client key to use in SSL connection.This
                        option is not necessary if your key is prepended to
                        your cert file.
  --ca-file CA_FILE     Path of CA SSL certificate(s) used to verify the
                        remote server's certificate. Without this option the
                        client looks for the default system CA certificates.
  --timeout TIMEOUT     Number of seconds to wait for a response
  --os-username OS_USERNAME
                        Defaults to env[OS_USERNAME]
  --os-password OS_PASSWORD
                        Defaults to env[OS_PASSWORD]
  --os-tenant-id OS_TENANT_ID
                        Defaults to env[OS_TENANT_ID]
  --os-tenant-name OS_TENANT_NAME
                        Defaults to env[OS_TENANT_NAME]
  --os-auth-url OS_AUTH_URL
                        Defaults to env[OS_AUTH_URL]
  --os-region-name OS_REGION_NAME
                        Defaults to env[OS_REGION_NAME]
  --os-auth-token OS_AUTH_TOKEN
                        Defaults to env[OS_AUTH_TOKEN]
  --os-no-client-auth   Do not contact keystone for a token. Defaults to
                        env[OS_NO_CLIENT_AUTH]
  --heat-url HEAT_URL   Defaults to env[HEAT_URL]
  --heat-api-version HEAT_API_VERSION
                        Defaults to env[HEAT_API_VERSION] or 1
  --os-service-type OS_SERVICE_TYPE
                        Defaults to env[OS_SERVICE_TYPE]
  --os-endpoint-type OS_ENDPOINT_TYPE
                        Defaults to env[OS_ENDPOINT_TYPE]
  --include-password    Send os-username and os-password to heat
</computeroutput></screen>
    </section>
    <section xml:id="heatclient_subcommand_action-resume">
        <title>heat action-resume command</title>
        <screen><computeroutput>usage: heat action-resume &lt;NAME or ID>

Resume the stack.

Positional arguments:
  &lt;NAME or ID>  Name or ID of stack to resume.

</computeroutput></screen>
    </section>
    <section xml:id="heatclient_subcommand_action-suspend">
        <title>heat action-suspend command</title>
        <screen><computeroutput>usage: heat action-suspend &lt;NAME or ID>

Suspend the stack.

Positional arguments:
  &lt;NAME or ID>  Name or ID of stack to suspend.

</computeroutput></screen>
    </section>
    <section xml:id="heatclient_subcommand_event-list">
        <title>heat event-list command</title>
        <screen><computeroutput>usage: heat event-list [-r &lt;RESOURCE>] &lt;NAME or ID>

List events for a stack.

Positional arguments:
  &lt;NAME or ID>          Name or ID of stack to show the events for.

Optional arguments:
  -r &lt;RESOURCE>, --resource &lt;RESOURCE>
                        Name of the resource to filter events by

</computeroutput></screen>
    </section>
    <section xml:id="heatclient_subcommand_event-show">
        <title>heat event-show command</title>
        <screen><computeroutput>usage: heat event-show &lt;NAME or ID> &lt;RESOURCE> &lt;EVENT>

Describe the event.

Positional arguments:
  &lt;NAME or ID>  Name or ID of stack to show the events for.
  &lt;RESOURCE>    Name of the resource the event belongs to.
  &lt;EVENT>       ID of event to display details for

</computeroutput></screen>
    </section>
    <section xml:id="heatclient_subcommand_resource-list">
        <title>heat resource-list command</title>
        <screen><computeroutput>usage: heat resource-list &lt;NAME or ID>

Show list of resources belonging to a stack.

Positional arguments:
  &lt;NAME or ID>  Name or ID of stack to show the resources for.

</computeroutput></screen>
    </section>
    <section xml:id="heatclient_subcommand_resource-metadata">
        <title>heat resource-metadata command</title>
        <screen><computeroutput>usage: heat resource-metadata &lt;NAME or ID> &lt;RESOURCE>

List resource metadata.

Positional arguments:
  &lt;NAME or ID>  Name or ID of stack to show the resource metadata for.
  &lt;RESOURCE>    Name of the resource to show the metadata for.

</computeroutput></screen>
    </section>
    <section xml:id="heatclient_subcommand_resource-show">
        <title>heat resource-show command</title>
        <screen><computeroutput>usage: heat resource-show &lt;NAME or ID> &lt;RESOURCE>

Describe the resource.

Positional arguments:
  &lt;NAME or ID>  Name or ID of stack to show the resource for.
  &lt;RESOURCE>    Name of the resource to show the details for.

</computeroutput></screen>
    </section>
    <section xml:id="heatclient_subcommand_resource-template">
        <title>heat resource-template command</title>
        <screen><computeroutput>usage: heat resource-template [-F &lt;FORMAT>] &lt;RESOURCE>

Generate a template based on a resource.

Positional arguments:
  &lt;RESOURCE>            Name of the resource to generate a template for.

Optional arguments:
  -F &lt;FORMAT>, --format &lt;FORMAT>
                        The template output format, one of: yaml, json

</computeroutput></screen>
    </section>
    <section xml:id="heatclient_subcommand_resource-type-list">
        <title>heat resource-type-list command</title>
        <screen><computeroutput>usage: heat resource-type-list

List the available resource types.

</computeroutput></screen>
    </section>
    <section xml:id="heatclient_subcommand_resource-type-show">
        <title>heat resource-type-show command</title>
        <screen><computeroutput>usage: heat resource-type-show &lt;RESOURCE_TYPE>

Show the resource type.

Positional arguments:
  &lt;RESOURCE_TYPE>  Resource Type to get the details for.

</computeroutput></screen>
    </section>
    <section xml:id="heatclient_subcommand_stack-create">
        <title>heat stack-create command</title>
        <screen><computeroutput>usage: heat stack-create [-f &lt;FILE>] [-e &lt;FILE>] [-u &lt;URL>] [-o &lt;URL>]
                         [-c &lt;TIMEOUT>] [-r] [-P &lt;KEY1=VALUE1;KEY2=VALUE2...>]
                         &lt;STACK_NAME>

Create the stack.

Positional arguments:
  &lt;STACK_NAME>          Name of the stack to create.

Optional arguments:
  -f &lt;FILE>, --template-file &lt;FILE>
                        Path to the template.
  -e &lt;FILE>, --environment-file &lt;FILE>
                        Path to the environment.
  -u &lt;URL>, --template-url &lt;URL>
                        URL of template.
  -o &lt;URL>, --template-object &lt;URL>
                        URL to retrieve template object (e.g from swift)
  -c &lt;TIMEOUT>, --create-timeout &lt;TIMEOUT>
                        Stack creation timeout in minutes. Default: 60
  -r, --enable-rollback
                        Enable rollback on create/update failure
  -P &lt;KEY1=VALUE1;KEY2=VALUE2...>, --parameters &lt;KEY1=VALUE1;KEY2=VALUE2...>
                        Parameter values used to create the stack. This can be
                        specified multiple times, or once with parameters
                        separated by semicolon.

</computeroutput></screen>
    </section>
    <section xml:id="heatclient_subcommand_stack-delete">
        <title>heat stack-delete command</title>
        <screen><computeroutput>usage: heat stack-delete &lt;NAME or ID> [&lt;NAME or ID> ...]

Delete the stack(s).

Positional arguments:
  &lt;NAME or ID>  Name or ID of stack(s) to delete.

</computeroutput></screen>
    </section>
    <section xml:id="heatclient_subcommand_stack-list">
        <title>heat stack-list command</title>
        <screen><computeroutput>usage: heat stack-list

List the user's stacks.

</computeroutput></screen>
    </section>
    <section xml:id="heatclient_subcommand_stack-show">
        <title>heat stack-show command</title>
        <screen><computeroutput>usage: heat stack-show &lt;NAME or ID>

Describe the stack.

Positional arguments:
  &lt;NAME or ID>  Name or ID of stack to describe.

</computeroutput></screen>
    </section>
    <section xml:id="heatclient_subcommand_stack-update">
        <title>heat stack-update command</title>
        <screen><computeroutput>usage: heat stack-update [-f &lt;FILE>] [-e &lt;FILE>] [-u &lt;URL>] [-o &lt;URL>]
                         [-P &lt;KEY1=VALUE1;KEY2=VALUE2...>]
                         &lt;NAME or ID>

Update the stack.

Positional arguments:
  &lt;NAME or ID>          Name or ID of stack to update.

Optional arguments:
  -f &lt;FILE>, --template-file &lt;FILE>
                        Path to the template.
  -e &lt;FILE>, --environment-file &lt;FILE>
                        Path to the environment.
  -u &lt;URL>, --template-url &lt;URL>
                        URL of template.
  -o &lt;URL>, --template-object &lt;URL>
                        URL to retrieve template object (e.g from swift)
  -P &lt;KEY1=VALUE1;KEY2=VALUE2...>, --parameters &lt;KEY1=VALUE1;KEY2=VALUE2...>
                        Parameter values used to create the stack. This can be
                        specified multiple times, or once with parameters
                        separated by semicolon.

</computeroutput></screen>
    </section>
    <section xml:id="heatclient_subcommand_template-show">
        <title>heat template-show command</title>
        <screen><computeroutput>usage: heat template-show &lt;NAME or ID>

Get the template for the specified stack.

Positional arguments:
  &lt;NAME or ID>  Name or ID of stack to get the template for.

</computeroutput></screen>
    </section>
    <section xml:id="heatclient_subcommand_template-validate">
        <title>heat template-validate command</title>
        <screen><computeroutput>usage: heat template-validate [-u &lt;URL>] [-f &lt;FILE>] [-e &lt;FILE>] [-o &lt;URL>]
                              [-P &lt;KEY1=VALUE1;KEY2=VALUE2...>]

Validate a template with parameters.

Optional arguments:
  -u &lt;URL>, --template-url &lt;URL>
                        URL of template.
  -f &lt;FILE>, --template-file &lt;FILE>
                        Path to the template.
  -e &lt;FILE>, --environment-file &lt;FILE>
                        Path to the environment.
  -o &lt;URL>, --template-object &lt;URL>
                        URL to retrieve template object (e.g from swift)
  -P &lt;KEY1=VALUE1;KEY2=VALUE2...>, --parameters &lt;KEY1=VALUE1;KEY2=VALUE2...>
                        Parameter values to validate. This can be specified
                        multiple times, or once with parameters separated by
                        semicolon.

</computeroutput></screen>
    </section>
</section>
