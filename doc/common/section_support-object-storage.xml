<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
    xml:id="troubleshooting-openstack-object-storage">
    <title>Troubleshoot Object Storage</title>
    <para>For OpenStack Object Storage, everything is logged in
            <filename>/var/log/syslog</filename> (or messages on some
        distros). Several settings enable further customization of
        logging, such as <option>log_name</option>,
            <option>log_facility</option>, and
            <option>log_level</option>, within the object server
        configuration files.</para>
    <section xml:id="handling-drive-failure">
        <title>Recover drive failures</title>
        <para>If a drive fails, make sure the
            drive is unmounted to make it easier for Object
            Storage to work around the failure while you resolve
            it. If you plan to replace the drive immediately, replace
            the drive, format it, remount it, and let replication fill
            it.</para>
        <para>If you cannot replace the drive immediately, leave it
            unmounted and remove the drive from the ring. This enables
            you to replicate all the replicas on that drive elsewhere
            until you can replace the drive. After you replace the
            drive, you can add it to the ring again.</para>
        <note>
            <para>Rackspace has seen hints at drive failures by
                looking at error messages in
                    <filename>/var/log/kern.log</filename>. Check this
                file in your monitoring.</para>
        </note>
    </section>
    <section xml:id="handling-server-failure">
        <title>Recover server failures</title>
        <para>If a server has hardware issues, make sure that the
            Object Storage services are not running. This enables
            Object Storage to work around the failure while you
            troubleshoot.</para>
        <para>If the server needs a reboot or a minimal amount of
            work, let Object Storage work around the failure while you
            fix the machine and get it back online. When the machine
            comes back online, replication updates anything that was
            missing during the downtime.</para>
        <para>If the server has more serious issues,remove all server
            devices from the ring. After you repair and put the server
            online, you can add the devices for the server back to the
            ring. You must reformat the devices before you add them to
            the ring because they might be responsible for a different
            set of partitions than before.</para>
    </section>
    <section xml:id="detecting-failed-drives">
        <title>Detect failed drives</title>
        <para>When a drive is about to fail, many error messages
            appear in the <filename>/var/log/kern.log</filename> file.
            You can run the <package>swift-drive-audit</package>
            script through <command>cron</command> to watch for bad
            drives. If errors are detected, it unmounts the bad drive
            so that Object Storage can work around it. The script uses
            a configuration file with these settings:</para>
        <xi:include href="tables/swift-drive-audit-drive-audit.xml"/>
        <para>This script has been tested on only Ubuntu 10.04. If you
            use a different distribution or operating system, take
            care before using the script in production.</para>
    </section>
    <section xml:id="recover-ring-builder-file">
        <title>Recover ring builder files (emergency)</title>
        <para>You should always keep a backup of Swift ring builder
            files. However, if an emergency occurs, use this procedure
            to return your cluster to an operational state.</para>
        <para>Existing Swift tools do not enable you to recover a
            builder file from a <filename>ring.gz</filename> file.
            However, if you have Python knowledge, you can construct a
            builder file similar to the one you have lost.</para>
        <warning>
            <para>This procedure is a last-resort in an emergency. It
                requires knowledge of the swift Python code and might
                not succeed.</para>
        </warning>
        <procedure>
            <step>
                <para>Load the ring and a new ringbuilder object in a
                    Python REPL:</para>
                <programlisting language="python">>>> from swift.common.ring import RingData, RingBuilder
>>> ring = RingData.load('/path/to/account.ring.gz')</programlisting>
            </step>
            <step>
                <para>Copy the data in the ring into the
                    builder.</para>
                <programlisting language="python">>>> import math
>>> partitions = len(ring._replica2part2dev_id[0])
>>> replicas = len(ring._replica2part2dev_id)

>>> builder = RingBuilder(int(Math.log(partitions, 2)), replicas, 1)
>>> builder.devs = ring.devs
>>> builder._replica2part2dev = ring.replica2part2dev_id
>>> builder._last_part_moves_epoch = 0
>>> builder._last_part_moves = array('B', (0 for _ in xrange(self.parts)))
>>> builder._set_parts_wanted()
>>> for d in builder._iter_devs():
            d['parts'] = 0
>>> for p2d in builder._replica2part2dev:
            for dev_id in p2d:
                builder.devs[dev_id]['parts'] += 1</programlisting>
                <para>This is the extent of the recoverable
                    fields.</para>
            </step>
            <step>
                <para>For <option>min_part_hours</option>, you must
                    remember the value that you used previously or
                    create a new value.</para>
                <programlisting language="python">>>> builder.change_min_part_hours(24) # or whatever you want it to be</programlisting>
                <para>If validation succeeds without raising an
                    exception, you have succeeded.</para>
                <programlisting language="python">>>> builder.validate()</programlisting>
            </step>
            <step>
                <para>Save the builder.</para>
                <programlisting language="python">>>> import pickle
>>> pickle.dump(builder.to_dict(), open('account.builder', 'wb'), protocol=2)</programlisting>
                <para>The <filename>account.builder</filename> file
                    appears in the current working directory.</para>
            </step>
            <step>
                <para>Run <literal>swift-ring-builder account.builder
                        write_ring</literal>.</para>
                <para>Compare the new
                        <filename>account.ring.gz</filename> to the
                    original <filename>account.ring.gz</filename>
                    file. They might not be byte-for-byte identical,
                    but if you load them in REPL and their
                        <option>_replica2part2dev_id</option> and
                        <option>devs</option> attributes are the same
                    (or nearly so), you have succeeded.</para>
            </step>
            <step>
                <para>Repeat this procedure for the
                        <filename>container.ring.gz</filename> and
                        <filename>object.ring.gz</filename> files, and
                    you might get usable builder files.</para>
            </step>
        </procedure>
    </section>
</chapter>
