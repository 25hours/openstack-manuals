<?xml version="1.0" encoding="UTF-8"?>
        <!-- Warning: Do not edit this file. It is automatically
             generated and your changes will be overwritten.
             The tool to do so lives in the tools directory of this
             repository -->
        <para xmlns="http://docbook.org/ns/docbook" version="5.0">
        <table rules="all" xml:id="config_table_cinder_rpc">
          <caption>Description of configuration options for rpc</caption>
           <col width="50%"/>
           <col width="50%"/>
           <thead>
              <tr>
                  <th>Configuration option = Default value</th>
                  <th>Description</th>
              </tr>
          </thead>
          <tbody>
              <tr>
                  <th colspan="2">[DEFAULT]</th>
              </tr>
              <tr>
                       <td>allowed_rpc_exception_modules = nova.exception, cinder.exception, exceptions</td>
                       <td>(ListOpt) Modules of exceptions that are permitted to be recreated upon receiving exception data from an rpc call.</td>
              </tr>
              <tr>
                       <td>amqp_auto_delete = False</td>
                       <td>(BoolOpt) Auto-delete queues in amqp.</td>
              </tr>
              <tr>
                       <td>amqp_durable_queues = False</td>
                       <td>(BoolOpt) Use durable queues in amqp.</td>
              </tr>
              <tr>
                       <td>control_exchange = openstack</td>
                       <td>(StrOpt) AMQP exchange to connect to if using RabbitMQ or Qpid</td>
              </tr>
              <tr>
                       <td>default_timeout = 20</td>
                       <td>(IntOpt) Default Time Out For CLI operations in minutes</td>
              </tr>
              <tr>
                       <td>fake_rabbit = False</td>
                       <td>(BoolOpt) If passed, use a fake RabbitMQ provider</td>
              </tr>
              <tr>
                       <td>kombu_reconnect_delay = 1.0</td>
                       <td>(FloatOpt) How long to wait before reconnecting in response to an AMQP consumer cancel notification.</td>
              </tr>
              <tr>
                       <td>kombu_ssl_ca_certs = </td>
                       <td>(StrOpt) SSL certification authority file (valid only if SSL enabled).</td>
              </tr>
              <tr>
                       <td>kombu_ssl_certfile = </td>
                       <td>(StrOpt) SSL cert file (valid only if SSL enabled).</td>
              </tr>
              <tr>
                       <td>kombu_ssl_keyfile = </td>
                       <td>(StrOpt) SSL key file (valid only if SSL enabled).</td>
              </tr>
              <tr>
                       <td>kombu_ssl_version = </td>
                       <td>(StrOpt) SSL version to use (valid only if SSL enabled). valid values are TLSv1, SSLv23 and SSLv3. SSLv2 may be available on some distributions.</td>
              </tr>
              <tr>
                       <td>matchmaker_heartbeat_freq = 300</td>
                       <td>(IntOpt) Heartbeat frequency.</td>
              </tr>
              <tr>
                       <td>matchmaker_heartbeat_ttl = 600</td>
                       <td>(IntOpt) Heartbeat time-to-live.</td>
              </tr>
              <tr>
                       <td>notification_driver = []</td>
                       <td>(MultiStrOpt) Driver or drivers to handle sending notifications.</td>
              </tr>
              <tr>
                       <td>notification_topics = notifications</td>
                       <td>(ListOpt) AMQP topic used for OpenStack notifications.</td>
              </tr>
              <tr>
                       <td>password = None</td>
                       <td>(StrOpt) Password for Redis server (optional).</td>
              </tr>
              <tr>
                       <td>port = 6379</td>
                       <td>(IntOpt) Use this port to connect to redis host.</td>
              </tr>
              <tr>
                       <td>publish_errors = False</td>
                       <td>(BoolOpt) Publish error events</td>
              </tr>
              <tr>
                       <td>qpid_heartbeat = 60</td>
                       <td>(IntOpt) Seconds between connection keepalive heartbeats.</td>
              </tr>
              <tr>
                       <td>qpid_hostname = oslo</td>
                       <td>(StrOpt) Qpid broker hostname.</td>
              </tr>
              <tr>
                       <td>qpid_hosts = $qpid_hostname:$qpid_port</td>
                       <td>(ListOpt) Qpid HA cluster host:port pairs.</td>
              </tr>
              <tr>
                       <td>qpid_password = </td>
                       <td>(StrOpt) Password for Qpid connection.</td>
              </tr>
              <tr>
                       <td>qpid_port = 5672</td>
                       <td>(IntOpt) Qpid broker port.</td>
              </tr>
              <tr>
                       <td>qpid_protocol = tcp</td>
                       <td>(StrOpt) Transport to use, either 'tcp' or 'ssl'.</td>
              </tr>
              <tr>
                       <td>qpid_sasl_mechanisms = </td>
                       <td>(StrOpt) Space separated list of SASL mechanisms to use for auth.</td>
              </tr>
              <tr>
                       <td>qpid_tcp_nodelay = True</td>
                       <td>(BoolOpt) Whether to disable the Nagle algorithm.</td>
              </tr>
              <tr>
                       <td>qpid_topology_version = 1</td>
                       <td>(IntOpt) The qpid topology version to use.  Version 1 is what was originally used by impl_qpid.  Version 2 includes some backwards-incompatible changes that allow broker federation to work.  Users should update to version 2 when they are able to take everything down, as it requires a clean break.</td>
              </tr>
              <tr>
                       <td>qpid_username = </td>
                       <td>(StrOpt) Username for Qpid connection.</td>
              </tr>
              <tr>
                       <td>rabbit_ha_queues = False</td>
                       <td>(BoolOpt) Use HA queues in RabbitMQ (x-ha-policy: all). If you change this option, you must wipe the RabbitMQ database.</td>
              </tr>
              <tr>
                       <td>rabbit_host = oslo</td>
                       <td>(StrOpt) The RabbitMQ broker address where a single node is used.</td>
              </tr>
              <tr>
                       <td>rabbit_hosts = $rabbit_host:$rabbit_port</td>
                       <td>(ListOpt) RabbitMQ HA cluster host:port pairs.</td>
              </tr>
              <tr>
                       <td>rabbit_login_method = AMQPLAIN</td>
                       <td>(StrOpt) the RabbitMQ login method</td>
              </tr>
              <tr>
                       <td>rabbit_max_retries = 0</td>
                       <td>(IntOpt) Maximum number of RabbitMQ connection retries. Default is 0 (infinite retry count).</td>
              </tr>
              <tr>
                       <td>rabbit_password = guest</td>
                       <td>(StrOpt) The RabbitMQ password.</td>
              </tr>
              <tr>
                       <td>rabbit_port = 5672</td>
                       <td>(IntOpt) The RabbitMQ broker port where a single node is used.</td>
              </tr>
              <tr>
                       <td>rabbit_retry_backoff = 2</td>
                       <td>(IntOpt) How long to backoff for between retries when connecting to RabbitMQ.</td>
              </tr>
              <tr>
                       <td>rabbit_retry_interval = 1</td>
                       <td>(IntOpt) How frequently to retry connecting with RabbitMQ.</td>
              </tr>
              <tr>
                       <td>rabbit_use_ssl = False</td>
                       <td>(BoolOpt) Connect over SSL for RabbitMQ.</td>
              </tr>
              <tr>
                       <td>rabbit_userid = guest</td>
                       <td>(StrOpt) The RabbitMQ userid.</td>
              </tr>
              <tr>
                       <td>rabbit_virtual_host = /</td>
                       <td>(StrOpt) The RabbitMQ virtual host.</td>
              </tr>
              <tr>
                       <td>rpc_backend = cinder.openstack.common.rpc.impl_kombu</td>
                       <td>(StrOpt) The messaging module to use, defaults to kombu.</td>
              </tr>
              <tr>
                       <td>rpc_cast_timeout = 30</td>
                       <td>(IntOpt) Seconds to wait before a cast expires (TTL). Only supported by impl_zmq.</td>
              </tr>
              <tr>
                       <td>rpc_conn_pool_size = 30</td>
                       <td>(IntOpt) Size of RPC connection pool</td>
              </tr>
              <tr>
                       <td>rpc_response_timeout = 60</td>
                       <td>(IntOpt) Seconds to wait for a response from call or multicall</td>
              </tr>
              <tr>
                       <td>rpc_thread_pool_size = 64</td>
                       <td>(IntOpt) Size of RPC thread pool</td>
              </tr>
              <tr>
                       <td>rpc_zmq_bind_address = *</td>
                       <td>(StrOpt) ZeroMQ bind address. Should be a wildcard (*), an ethernet interface, or IP. The "host" option should point or resolve to this address.</td>
              </tr>
              <tr>
                       <td>rpc_zmq_contexts = 1</td>
                       <td>(IntOpt) Number of ZeroMQ contexts, defaults to 1.</td>
              </tr>
              <tr>
                       <td>rpc_zmq_host = oslo</td>
                       <td>(StrOpt) Name of this node. Must be a valid hostname, FQDN, or IP address. Must match "host" option, if running Nova.</td>
              </tr>
              <tr>
                       <td>rpc_zmq_ipc_dir = /var/run/openstack</td>
                       <td>(StrOpt) Directory for holding IPC sockets.</td>
              </tr>
              <tr>
                       <td>rpc_zmq_matchmaker = oslo.messaging._drivers.matchmaker.MatchMakerLocalhost</td>
                       <td>(StrOpt) MatchMaker driver.</td>
              </tr>
              <tr>
                       <td>rpc_zmq_port = 9501</td>
                       <td>(IntOpt) ZeroMQ receiver listening port.</td>
              </tr>
              <tr>
                       <td>rpc_zmq_topic_backlog = None</td>
                       <td>(IntOpt) Maximum number of ingress messages to locally buffer per topic. Default is unlimited.</td>
              </tr>
              <tr>
                       <td>transport_url = None</td>
                       <td>(StrOpt) A URL representing the messaging driver to use and its full configuration. If not set, we fall back to the rpc_backend option and driver specific configuration.</td>
              </tr>
              <tr>
                       <td>volume_topic = cinder-volume</td>
                       <td>(StrOpt) the topic volume nodes listen on</td>
              </tr>
              <tr>
                  <th colspan="2">[matchmaker_ring]</th>
              </tr>
              <tr>
                       <td>ringfile = /etc/oslo/matchmaker_ring.json</td>
                       <td>(StrOpt) Matchmaker ring file (JSON).</td>
              </tr>
       </tbody>
        </table>
        </para>
