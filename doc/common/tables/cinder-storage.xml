<?xml version="1.0" encoding="UTF-8"?>
        <!-- Warning: Do not edit this file. It is automatically
             generated and your changes will be overwritten.
             The tool to do so lives in the tools directory of this
             repository -->
        <para xmlns="http://docbook.org/ns/docbook" version="5.0">
        <table rules="all">
          <caption>Description of configuration options for storage</caption>
           <col width="50%"/>
           <col width="50%"/>
           <thead>
              <tr>
                  <th>Configuration option = Default value</th>
                  <th>Description</th>
              </tr>
          </thead>
          <tbody>
              <tr>
                       <td>backend = sqlalchemy</td>
                       <td>(StrOpt) The backend to use for db</td>
              </tr>
              <tr>
                       <td>bindir = $pybasedir/bin</td>
                       <td>(StrOpt) Directory where cinder binaries are installed</td>
              </tr>
              <tr>
                       <td>capacity_weight_multiplier = 1.0</td>
                       <td>(FloatOpt) Multiplier used for weighing volume capacity. Negative numbers mean to stack vs spread.</td>
              </tr>
              <tr>
                       <td>enabled_backends = None</td>
                       <td>(ListOpt) A list of backend names to use. These backend names should be backed by a unique [CONFIG] group with its options</td>
              </tr>
              <tr>
                       <td>iscsi_helper = tgtadm</td>
                       <td>(StrOpt) iscsi target user-land tool to use</td>
              </tr>
              <tr>
                       <td>iscsi_iotype = fileio</td>
                       <td>(StrOpt) Sets the behavior of the iSCSI target to either perform blockio or fileio optionally, auto can be set and Cinder will autodetect type of backing device</td>
              </tr>
              <tr>
                       <td>iscsi_ip_address = $my_ip</td>
                       <td>(StrOpt) The IP address that the iSCSI daemon is listening on</td>
              </tr>
              <tr>
                       <td>iscsi_num_targets = 100</td>
                       <td>(IntOpt) The maximum number of iscsi target ids per host</td>
              </tr>
              <tr>
                       <td>iscsi_port = 3260</td>
                       <td>(IntOpt) The port that the iSCSI daemon is listening on</td>
              </tr>
              <tr>
                       <td>iscsi_target_prefix = iqn.2010-10.org.openstack:</td>
                       <td>(StrOpt) prefix for iscsi volumes</td>
              </tr>
              <tr>
                       <td>iser_helper = tgtadm</td>
                       <td>(StrOpt) iser target user-land tool to use</td>
              </tr>
              <tr>
                       <td>iser_ip_address = $my_ip</td>
                       <td>(StrOpt) The IP address that the iSER daemon is listening on</td>
              </tr>
              <tr>
                       <td>iser_num_targets = 100</td>
                       <td>(IntOpt) The maximum number of iser target ids per host</td>
              </tr>
              <tr>
                       <td>iser_port = 3260</td>
                       <td>(IntOpt) The port that the iSER daemon is listening on</td>
              </tr>
              <tr>
                       <td>iser_target_prefix = iqn.2010-10.org.iser.openstack:</td>
                       <td>(StrOpt) prefix for iser volumes</td>
              </tr>
              <tr>
                       <td>max_gigabytes = 10000</td>
                       <td>(IntOpt) maximum number of volume gigabytes to allow per host</td>
              </tr>
              <tr>
                       <td>max_overflow = None</td>
                       <td>(IntOpt) If set, use this value for max_overflow with sqlalchemy</td>
              </tr>
              <tr>
                       <td>max_pool_size = 5</td>
                       <td>(IntOpt) Maximum number of SQL connections to keep open in a pool</td>
              </tr>
              <tr>
                       <td>max_retries = 10</td>
                       <td>(IntOpt) maximum db connection retries during startup. (setting -1 implies an infinite retry count)</td>
              </tr>
              <tr>
                       <td>memcached_servers = None</td>
                       <td>(ListOpt) Memcached servers or None for in process cache.</td>
              </tr>
              <tr>
                       <td>migration_create_volume_timeout_secs = 300</td>
                       <td>(IntOpt) Timeout for creating the volume to migrate to when performing volume migration (seconds)</td>
              </tr>
              <tr>
                       <td>min_pool_size = 1</td>
                       <td>(IntOpt) Minimum number of SQL connections to keep open in a pool</td>
              </tr>
              <tr>
                       <td>num_iser_scan_tries = 3</td>
                       <td>(IntOpt) The maximum number of times to rescan iSER targetto find volume</td>
              </tr>
              <tr>
                       <td>num_volume_device_scan_tries = 3</td>
                       <td>(IntOpt) The maximum number of times to rescan targets to find volume</td>
              </tr>
              <tr>
                       <td>volume_backend_name = None</td>
                       <td>(StrOpt) The backend name for a given driver implementation</td>
              </tr>
              <tr>
                       <td>volume_clear_size = 0</td>
                       <td>(IntOpt) Size in MiB to wipe at start of old volumes. 0  = &gt; all</td>
              </tr>
              <tr>
                       <td>volume_clear = zero</td>
                       <td>(StrOpt) Method used to wipe old voumes (valid options are: none, zero, shred)</td>
              </tr>
              <tr>
                       <td>volume_dd_blocksize = 1M</td>
                       <td>(StrOpt) The default block size used when copying/clearing volumes</td>
              </tr>
              <tr>
                       <td>volume_driver = cinder.volume.drivers.lvm.LVMISCSIDriver</td>
                       <td>(StrOpt) Driver to use for volume creation</td>
              </tr>
              <tr>
                       <td>volume_manager = cinder.volume.manager.VolumeManager</td>
                       <td>(StrOpt) full class name for the Manager for volume</td>
              </tr>
              <tr>
                       <td>volumes_dir = $state_path/volumes</td>
                       <td>(StrOpt) Volume configuration file storage directory</td>
              </tr>
              <tr>
                       <td>volume_usage_audit_period = month</td>
                       <td>(StrOpt) time period to generate volume usages for.  Time period must be hour, day, month or year</td>
              </tr>
              <tr>
                       <td>zadara_default_stripesize = 64</td>
                       <td>(StrOpt) Default stripe size for volumes</td>
              </tr>
       </tbody>
        </table>
        </para>
