<?xml version='1.0' encoding='UTF-8'?>
<para xmlns="http://docbook.org/ns/docbook" version="5.0">
  <!-- Warning: Do not edit this file. It is automatically
     generated and your changes will be overwritten.
     The tool to do so lives in openstack-doc-tools repository. -->
  <table rules="all" xml:id="config_table_heat_common">
    <caption>Description of common configuration options</caption>
    <col width="50%"/>
    <col width="50%"/>
    <thead>
      <tr>
        <th>Configuration option = Default value</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <th colspan="2">[DEFAULT]</th>
      </tr>
      <tr>
        <td><option>convergence_engine</option> = <replaceable>False</replaceable></td>
        <td>(BoolOpt) Enables engine with convergence architecture. All stacks with this option will be created using convergence engine .</td>
      </tr>
      <tr>
        <td><option>default_deployment_signal_transport</option> = <replaceable>CFN_SIGNAL</replaceable></td>
        <td>(StrOpt) Template default for how the server should signal to heat with the deployment output values. CFN_SIGNAL will allow an HTTP POST to a CFN keypair signed URL (requires enabled heat-api-cfn). TEMP_URL_SIGNAL will create a Swift TempURL to be signaled via HTTP PUT (requires object-store endpoint which supports TempURL). HEAT_SIGNAL will allow calls to the Heat API resource-signal using the provided keystone credentials</td>
      </tr>
      <tr>
        <td><option>default_software_config_transport</option> = <replaceable>POLL_SERVER_CFN</replaceable></td>
        <td>(StrOpt) Template default for how the server should receive the metadata required for software configuration. POLL_SERVER_CFN will allow calls to the cfn API action DescribeStackResource authenticated with the provided keypair (requires enabled heat-api-cfn). POLL_SERVER_HEAT will allow calls to the Heat API resource-show using the provided keystone credentials (requires keystone v3 API, and configured stack_user_* config options). POLL_TEMP_URL will create and populate a Swift TempURL with metadata for polling (requires object-store endpoint which supports TempURL).</td>
      </tr>
      <tr>
        <td><option>deferred_auth_method</option> = <replaceable>trusts</replaceable></td>
        <td>(StrOpt) Select deferred auth method, stored password or trusts.</td>
      </tr>
      <tr>
        <td><option>environment_dir</option> = <replaceable>/etc/heat/environment.d</replaceable></td>
        <td>(StrOpt) The directory to search for environment files.</td>
      </tr>
      <tr>
        <td><option>error_wait_time</option> = <replaceable>240</replaceable></td>
        <td>(IntOpt) Error wait time in seconds for stack action (ie. create or update).</td>
      </tr>
      <tr>
        <td><option>event_purge_batch_size</option> = <replaceable>10</replaceable></td>
        <td>(IntOpt) Controls how many events will be pruned whenever a stack's events exceed max_events_per_stack. Set this lower to keep more events at the expense of more frequent purges.</td>
      </tr>
      <tr>
        <td><option>executor_thread_pool_size</option> = <replaceable>64</replaceable></td>
        <td>(IntOpt) Size of executor thread pool.</td>
      </tr>
      <tr>
        <td><option>host</option> = <replaceable>localhost</replaceable></td>
        <td>(StrOpt) Name of the engine node. This can be an opaque identifier. It is not necessarily a hostname, FQDN, or IP address.</td>
      </tr>
      <tr>
        <td><option>keystone_backend</option> = <replaceable>heat.common.heat_keystoneclient.KeystoneClientV3</replaceable></td>
        <td>(StrOpt) Fully qualified class name to use as a keystone backend.</td>
      </tr>
      <tr>
        <td><option>memcached_servers</option> = <replaceable>None</replaceable></td>
        <td>(ListOpt) Memcached servers or None for in process cache.</td>
      </tr>
      <tr>
        <td><option>periodic_interval</option> = <replaceable>60</replaceable></td>
        <td>(IntOpt) Seconds between running periodic tasks.</td>
      </tr>
      <tr>
        <td><option>plugin_dirs</option> = <replaceable>/usr/lib64/heat, /usr/lib/heat, /usr/local/lib/heat, /usr/local/lib64/heat</replaceable></td>
        <td>(ListOpt) List of directories to search for plug-ins.</td>
      </tr>
      <tr>
        <th colspan="2">[cache]</th>
      </tr>
      <tr>
        <td><option>backend</option> = <replaceable>dogpile.cache.null</replaceable></td>
        <td>(StrOpt) Dogpile.cache backend module. It is recommended that Memcache with pooling (oslo_cache.memcache_pool) or Redis (dogpile.cache.redis) be used in production deployments.  Small workloads (single process) like devstack can use the dogpile.cache.memory backend.</td>
      </tr>
      <tr>
        <td><option>backend_argument</option> = <replaceable>[]</replaceable></td>
        <td>(MultiStrOpt) Arguments supplied to the backend module. Specify this option once per argument to be passed to the dogpile.cache backend. Example format: "&lt;argname&gt;:&lt;value&gt;".</td>
      </tr>
      <tr>
        <td><option>config_prefix</option> = <replaceable>cache.oslo</replaceable></td>
        <td>(StrOpt) Prefix for building the configuration dictionary for the cache region. This should not need to be changed unless there is another dogpile.cache region with the same configuration name.</td>
      </tr>
      <tr>
        <td><option>debug_cache_backend</option> = <replaceable>False</replaceable></td>
        <td>(BoolOpt) Extra debugging from the cache backend (cache keys, get/set/delete/etc calls). This is only really useful if you need to see the specific cache-backend get/set/delete calls with the keys/values.  Typically this should be left set to false.</td>
      </tr>
      <tr>
        <td><option>enabled</option> = <replaceable>False</replaceable></td>
        <td>(BoolOpt) Global toggle for caching.</td>
      </tr>
      <tr>
        <td><option>expiration_time</option> = <replaceable>600</replaceable></td>
        <td>(IntOpt) Default TTL, in seconds, for any cached item in the dogpile.cache region. This applies to any cached method that doesn't have an explicit cache expiration time defined for it.</td>
      </tr>
      <tr>
        <td><option>memcache_dead_retry</option> = <replaceable>300</replaceable></td>
        <td>(IntOpt) Number of seconds memcached server is considered dead before it is tried again. (dogpile.cache.memcache and oslo_cache.memcache_pool backends only).</td>
      </tr>
      <tr>
        <td><option>memcache_pool_connection_get_timeout</option> = <replaceable>10</replaceable></td>
        <td>(IntOpt) Number of seconds that an operation will wait to get a memcache client connection.</td>
      </tr>
      <tr>
        <td><option>memcache_pool_maxsize</option> = <replaceable>10</replaceable></td>
        <td>(IntOpt) Max total number of open connections to every memcached server. (oslo_cache.memcache_pool backend only).</td>
      </tr>
      <tr>
        <td><option>memcache_pool_unused_timeout</option> = <replaceable>60</replaceable></td>
        <td>(IntOpt) Number of seconds a connection to memcached is held unused in the pool before it is closed. (oslo_cache.memcache_pool backend only).</td>
      </tr>
      <tr>
        <td><option>memcache_servers</option> = <replaceable>localhost:11211</replaceable></td>
        <td>(ListOpt) Memcache servers in the format of "host:port". (dogpile.cache.memcache and oslo_cache.memcache_pool backends only).</td>
      </tr>
      <tr>
        <td><option>memcache_socket_timeout</option> = <replaceable>3</replaceable></td>
        <td>(IntOpt) Timeout in seconds for every call to a server. (dogpile.cache.memcache and oslo_cache.memcache_pool backends only).</td>
      </tr>
      <tr>
        <td><option>proxies</option> = <replaceable></replaceable></td>
        <td>(ListOpt) Proxy classes to import that will affect the way the dogpile.cache backend functions. See the dogpile.cache documentation on changing-backend-behavior.</td>
      </tr>
      <tr>
        <th colspan="2">[constraint_validation_cache]</th>
      </tr>
      <tr>
        <td><option>caching</option> = <replaceable>True</replaceable></td>
        <td>(BoolOpt) Toggle to enable/disable caching when Orchestration Engine validates property constraints of stack.During property validation with constraints Orchestration Engine caches requests to other OpenStack services. Please note that the global toggle for oslo.cache(enabled=True in [cache] group) must be enabled to use this feature.</td>
      </tr>
      <tr>
        <td><option>expiration_time</option> = <replaceable>60</replaceable></td>
        <td>(IntOpt) TTL, in seconds, for any cached item in the dogpile.cache region used for caching of validation constraints.</td>
      </tr>
      <tr>
        <th colspan="2">[keystone_authtoken]</th>
      </tr>
      <tr>
        <td><option>memcached_servers</option> = <replaceable>None</replaceable></td>
        <td>(ListOpt) Optionally specify a list of memcached server(s) to use for caching. If left undefined, tokens will instead be cached in-process.</td>
      </tr>
      <tr>
        <th colspan="2">[revision]</th>
      </tr>
      <tr>
        <td><option>heat_revision</option> = <replaceable>unknown</replaceable></td>
        <td>(StrOpt) Heat build revision. If you would prefer to manage your build revision separately, you can move this section to a different file and add it as another config option.</td>
      </tr>
    </tbody>
  </table>
</para>
