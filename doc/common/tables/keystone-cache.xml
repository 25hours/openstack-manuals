<?xml version='1.0' encoding='UTF-8'?>
<para xmlns="http://docbook.org/ns/docbook" version="5.0">
  <!-- Warning: Do not edit this file. It is automatically
     generated and your changes will be overwritten.
     The tool to do so lives in openstack-doc-tools repository. -->
  <table rules="all" xml:id="config_table_keystone_cache">
    <caption>Description of cache configuration options</caption>
    <col width="50%"/>
    <col width="50%"/>
    <thead>
      <tr>
        <th>Configuration option = Default value</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <th colspan="2">[cache]</th>
      </tr>
      <tr>
        <td>backend = keystone.common.cache.noop</td>
        <td>(StrOpt) Dogpile.cache backend module. It is recommended that Memcache with pooling (keystone.cache.memcache_pool) or Redis (dogpile.cache.redis) be used in production deployments.  Small workloads (single process) like devstack can use the dogpile.cache.memory backend.</td>
      </tr>
      <tr>
        <td>backend_argument = []</td>
        <td>(MultiStrOpt) Arguments supplied to the backend module. Specify this option once per argument to be passed to the dogpile.cache backend. Example format: "&lt;argname&gt;:&lt;value&gt;".</td>
      </tr>
      <tr>
        <td>config_prefix = cache.keystone</td>
        <td>(StrOpt) Prefix for building the configuration dictionary for the cache region. This should not need to be changed unless there is another dogpile.cache region with the same configuration name.</td>
      </tr>
      <tr>
        <td>debug_cache_backend = False</td>
        <td>(BoolOpt) Extra debugging from the cache backend (cache keys, get/set/delete/etc calls). This is only really useful if you need to see the specific cache-backend get/set/delete calls with the keys/values.  Typically this should be left set to false.</td>
      </tr>
      <tr>
        <td>enabled = False</td>
        <td>(BoolOpt) Global toggle for all caching using the should_cache_fn mechanism.</td>
      </tr>
      <tr>
        <td>expiration_time = 600</td>
        <td>(IntOpt) Default TTL, in seconds, for any cached item in the dogpile.cache region. This applies to any cached method that doesn't have an explicit cache expiration time defined for it.</td>
      </tr>
      <tr>
        <td>memcache_dead_retry = 300</td>
        <td>(IntOpt) Number of seconds memcached server is considered dead before it is tried again. (dogpile.cache.memcache and keystone.cache.memcache_pool backends only)</td>
      </tr>
      <tr>
        <td>memcache_pool_connection_get_timeout = 10</td>
        <td>(IntOpt) Number of seconds that an operation will wait to get a memcache client connection.</td>
      </tr>
      <tr>
        <td>memcache_pool_maxsize = 10</td>
        <td>(IntOpt) Max total number of open connections to every memcached server. (keystone.cache.memcache_pool backend only)</td>
      </tr>
      <tr>
        <td>memcache_pool_unused_timeout = 60</td>
        <td>(IntOpt) Number of seconds a connection to memcached is held unused in the pool before it is closed. (keystone.cache.memcache_pool backend only)</td>
      </tr>
      <tr>
        <td>memcache_servers = localhost:11211</td>
        <td>(ListOpt) Memcache servers in the format of "host:port". (dogpile.cache.memcache and keystone.cache.memcache_pool backends only)</td>
      </tr>
      <tr>
        <td>memcache_socket_timeout = 3</td>
        <td>(IntOpt) Timeout in seconds for every call to a server. (dogpile.cache.memcache and keystone.cache.memcache_pool backends only)</td>
      </tr>
      <tr>
        <td>proxies = </td>
        <td>(ListOpt) Proxy classes to import that will affect the way the dogpile.cache backend functions. See the dogpile.cache documentation on changing-backend-behavior.</td>
      </tr>
      <tr>
        <th colspan="2">[memcache]</th>
      </tr>
      <tr>
        <td>dead_retry = 300</td>
        <td>(IntOpt) Number of seconds memcached server is considered dead before it is tried again. This is used by the key value store system (e.g. token pooled memcached persistence backend).</td>
      </tr>
      <tr>
        <td>pool_connection_get_timeout = 10</td>
        <td>(IntOpt) Number of seconds that an operation will wait to get a memcache client connection. This is used by the key value store system (e.g. token pooled memcached persistence backend).</td>
      </tr>
      <tr>
        <td>pool_maxsize = 10</td>
        <td>(IntOpt) Max total number of open connections to every memcached server. This is used by the key value store system (e.g. token pooled memcached persistence backend).</td>
      </tr>
      <tr>
        <td>pool_unused_timeout = 60</td>
        <td>(IntOpt) Number of seconds a connection to memcached is held unused in the pool before it is closed. This is used by the key value store system (e.g. token pooled memcached persistence backend).</td>
      </tr>
    </tbody>
  </table>
</para>
