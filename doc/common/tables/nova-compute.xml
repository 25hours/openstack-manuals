<?xml version="1.0" encoding="UTF-8"?>
        <!-- Warning: Do not edit this file. It is automatically
             generated and your changes will be overwritten.
             The tool to do so lives in the tools directory of this
             repository -->
        <para xmlns="http://docbook.org/ns/docbook" version="5.0">
        <table rules="all">
          <caption>Description of configuration options for compute</caption>
           <col width="50%"/>
           <col width="50%"/>
           <thead>
              <tr>
                  <td>Configuration option=Default value</td>
                  <td>(Type) Description</td>
              </tr>
          </thead>
          <tbody>
              <tr>
                       <td>base_dir_name=_base</td>
                       <td>(StrOpt) Where cached images are stored under $instances_path.This is NOT the full path - just a folder name.For per-compute-host cached images, set to _base_$my_ip</td>
              </tr>
              <tr>
                       <td>checksum_interval_seconds=3600</td>
                       <td>(IntOpt) How frequently to checksum base images</td>
              </tr>
              <tr>
                       <td>compute_api_class=nova.compute.api.API</td>
                       <td>(StrOpt) The full class name of the compute API class to use (deprecated)</td>
              </tr>
              <tr>
                       <td>compute_driver=None</td>
                       <td>(StrOpt) Driver to use for controlling virtualization. Options include: libvirt.LibvirtDriver, xenapi.XenAPIDriver, fake.FakeDriver, baremetal.BareMetalDriver, vmwareapi.VMwareESXDriver, vmwareapi.VMwareVCDriver</td>
              </tr>
              <tr>
                       <td>compute_manager=nova.compute.manager.ComputeManager</td>
                       <td>(StrOpt) full class name for the Manager for compute</td>
              </tr>
              <tr>
                       <td>compute_stats_class=nova.compute.stats.Stats</td>
                       <td>(StrOpt) Class that will manage stats for the local compute host</td>
              </tr>
              <tr>
                       <td>console_host=docwork</td>
                       <td>(StrOpt) Console proxy host to use to connect to instances on this host.</td>
              </tr>
              <tr>
                       <td>console_manager=nova.console.manager.ConsoleProxyManager</td>
                       <td>(StrOpt) full class name for the Manager for console proxy</td>
              </tr>
              <tr>
                       <td>default_flavor=m1.small</td>
                       <td>(StrOpt) default flavor to use, testing only</td>
              </tr>
              <tr>
                       <td>default_notification_level=INFO</td>
                       <td>(StrOpt) Default notification level for outgoing notifications</td>
              </tr>
              <tr>
                       <td>default_publisher_id=None</td>
                       <td>(StrOpt) Default publisher_id for outgoing notifications</td>
              </tr>
              <tr>
                       <td>enable_instance_password=True</td>
                       <td>(BoolOpt) Allows use of instance password during server creation</td>
              </tr>
              <tr>
                       <td>heal_instance_info_cache_interval=60</td>
                       <td>(IntOpt) Number of seconds between instance info_cache self healing updates</td>
              </tr>
              <tr>
                       <td>host_state_interval=120</td>
                       <td>(IntOpt) Interval in seconds for querying the host status</td>
              </tr>
              <tr>
                       <td>image_cache_manager_interval=2400</td>
                       <td>(IntOpt) Number of seconds to wait between runs of the image cache manager</td>
              </tr>
              <tr>
                       <td>image_info_filename_pattern=$instances_path/$base_dir_name/%(image)s.info</td>
                       <td>(StrOpt) Allows image information files to be stored in non-standard locations</td>
              </tr>
              <tr>
                       <td>instance_build_timeout=0</td>
                       <td>(IntOpt) Amount of time in seconds an instance can be in BUILD before going into ERROR status.Set to 0 to disable.</td>
              </tr>
              <tr>
                       <td>instance_delete_interval=300</td>
                       <td>(IntOpt) Interval in seconds for retrying failed instance file deletes</td>
              </tr>
              <tr>
                       <td>instance_usage_audit=False</td>
                       <td>(BoolOpt) Generate periodic compute.instance.exists notifications</td>
              </tr>
              <tr>
                       <td>instance_usage_audit_period=month</td>
                       <td>(StrOpt) time period to generate instance usages for.  Time period must be hour, day, month or year</td>
              </tr>
              <tr>
                       <td>instances_path=$state_path/instances</td>
                       <td>(StrOpt) where instances are stored on disk</td>
              </tr>
              <tr>
                       <td>maximum_instance_delete_attempts=5</td>
                       <td>(IntOpt) The number of times to attempt to reap an instance's files.</td>
              </tr>
              <tr>
                       <td>reboot_timeout=0</td>
                       <td>(IntOpt) Automatically hard reboot an instance if it has been stuck in a rebooting state longer than N seconds. Set to 0 to disable.</td>
              </tr>
              <tr>
                       <td>reclaim_instance_interval=0</td>
                       <td>(IntOpt) Interval in seconds for reclaiming deleted instances</td>
              </tr>
              <tr>
                       <td>resize_confirm_window=0</td>
                       <td>(IntOpt) Automatically confirm resizes after N seconds. Set to 0 to disable.</td>
              </tr>
              <tr>
                       <td>resume_guests_state_on_host_boot=False</td>
                       <td>(BoolOpt) Whether to start guests that were running before the host rebooted</td>
              </tr>
              <tr>
                       <td>running_deleted_instance_action=log</td>
                       <td>(StrOpt) Action to take if a running deleted instance is detected.Valid options are 'noop', 'log' and 'reap'. Set to 'noop' to disable.</td>
              </tr>
              <tr>
                       <td>running_deleted_instance_poll_interval=1800</td>
                       <td>(IntOpt) Number of seconds to wait between runs of the cleanup task.</td>
              </tr>
              <tr>
                       <td>running_deleted_instance_timeout=0</td>
                       <td>(IntOpt) Number of seconds after being deleted when a running instance should be considered eligible for cleanup.</td>
              </tr>
              <tr>
                       <td>shelved_offload_time=0</td>
                       <td>(IntOpt) Time in seconds before a shelved instance is eligible for removing from a host.  -1 never offload, 0 offload when shelved</td>
              </tr>
              <tr>
                       <td>shelved_poll_interval=3600</td>
                       <td>(IntOpt) Interval in seconds for polling shelved instances to offload</td>
              </tr>
              <tr>
                       <td>sync_power_state_interval=600</td>
                       <td>(IntOpt) interval to sync power states between the database and the hypervisor</td>
              </tr>
       </tbody>
        </table>
        </para>