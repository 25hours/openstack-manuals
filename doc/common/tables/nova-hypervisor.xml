<?xml version="1.0" encoding="UTF-8"?>
        <!-- Warning: Do not edit this file. It is automatically
             generated and your changes will be overwritten.
             The tool to do so lives in the tools directory of this
             repository -->
        <para xmlns="http://docbook.org/ns/docbook" version="5.0">
        <table rules="all">
          <caption>Description of configuration options for hypervisor</caption>
           <col width="50%"/>
           <col width="50%"/>
           <thead>
              <tr>
                  <td>Configuration option=Default value</td>
                  <td>Description</td>
              </tr>
          </thead>
          <tbody>
              <tr>
                       <td>block_migration_flag=VIR_MIGRATE_UNDEFINE_SOURCE, VIR_MIGRATE_PEER2PEER, VIR_MIGRATE_NON_SHARED_INC</td>
                       <td>(StrOpt) Migration flags to be set for block migration</td>
              </tr>
              <tr>
                       <td>checksum_base_images=False</td>
                       <td>(BoolOpt) Write a checksum for files in _base to disk</td>
              </tr>
              <tr>
                       <td>default_ephemeral_format=None</td>
                       <td>(StrOpt) The default format an ephemeral_volume will be formatted with on creation.</td>
              </tr>
              <tr>
                       <td>disk_cachemodes=</td>
                       <td>(ListOpt) Specific cachemodes to use for different disk types e.g: ["file=directsync","block=none"]</td>
              </tr>
              <tr>
                       <td>force_raw_images=True</td>
                       <td>(BoolOpt) Force backing images to raw format</td>
              </tr>
              <tr>
                       <td>inject_password=True</td>
                       <td>(BoolOpt) Whether baremetal compute injects password or not</td>
              </tr>
              <tr>
                       <td>libvirt_cpu_mode=None</td>
                       <td>(StrOpt) Set to "host-model" to clone the host CPU feature flags; to "host-passthrough" to use the host CPU model exactly; to "custom" to use a named CPU model; to "none" to not set any CPU model. If libvirt_type="kvm|qemu", it will default to "host-model", otherwise it will default to "none"</td>
              </tr>
              <tr>
                       <td>libvirt_cpu_model=None</td>
                       <td>(StrOpt) Set to a named libvirt CPU model (see names listed in /usr/share/libvirt/cpu_map.xml). Only has effect if libvirt_cpu_mode="custom" and libvirt_type="kvm|qemu"</td>
              </tr>
              <tr>
                       <td>libvirt_disk_prefix=None</td>
                       <td>(StrOpt) Override the default disk prefix for the devices attached to a server, which is dependent on libvirt_type. (valid options are: sd, xvd, uvd, vd)</td>
              </tr>
              <tr>
                       <td>libvirt_images_rbd_ceph_conf=</td>
                       <td>(StrOpt) path to the ceph configuration file to use</td>
              </tr>
              <tr>
                       <td>libvirt_images_type=default</td>
                       <td>(StrOpt) VM Images format. Acceptable values are: raw, qcow2, lvm,rbd, default. If default is specified, then use_cow_images flag is used instead of this one.</td>
              </tr>
              <tr>
                       <td>libvirt_images_rbd_pool=rbd</td>
                       <td>(StrOpt) the RADOS pool in which rbd volumes are stored</td>
              </tr>
              <tr>
                       <td>libvirt_images_volume_group=None</td>
                       <td>(StrOpt) LVM Volume Group that is used for VM images, when you specify libvirt_images_type=lvm.</td>
              </tr>
              <tr>
                       <td>libvirt_inject_key=True</td>
                       <td>(BoolOpt) Inject the ssh public key at boot time</td>
              </tr>
              <tr>
                       <td>libvirt_inject_partition=1</td>
                       <td>(IntOpt) The partition to inject to : -2 =&gt; disable, -1 =&gt; inspect (libguestfs only), 0 =&gt; not partitioned, &gt;0 =&gt; partition number</td>
              </tr>
              <tr>
                       <td>libvirt_inject_password=False</td>
                       <td>(BoolOpt) Inject the admin password at boot time, without an agent.</td>
              </tr>
              <tr>
                       <td>libvirt_iscsi_use_multipath=False</td>
                       <td>(BoolOpt) use multipath connection of the iSCSI volume</td>
              </tr>
              <tr>
                       <td>libvirt_iser_use_multipath=False</td>
                       <td>(BoolOpt) use multipath connection of the iSER volume</td>
              </tr>
              <tr>
                       <td>libvirt_lvm_snapshot_size=1000</td>
                       <td>(IntOpt) The amount of storage (in megabytes) to allocate for LVM snapshot copy-on-write blocks.</td>
              </tr>
              <tr>
                       <td>libvirt_nonblocking=True</td>
                       <td>(BoolOpt) Use a separated OS thread pool to realize non-blocking libvirt calls</td>
              </tr>
              <tr>
                       <td>libvirt_ovs_bridge=br-int</td>
                       <td>(StrOpt) Name of Integration Bridge used by Open vSwitch</td>
              </tr>
              <tr>
                       <td>libvirt_snapshot_compression=False</td>
                       <td>(BoolOpt) Compress snapshot images when possible. This currently applies exclusively to qcow2 images</td>
              </tr>
              <tr>
                       <td>libvirt_snapshots_directory=$instances_path/snapshots</td>
                       <td>(StrOpt) Location where libvirt driver will store snapshots before uploading them to image service</td>
              </tr>
              <tr>
                       <td>libvirt_sparse_logical_volumes=False</td>
                       <td>(BoolOpt) Create sparse logical volumes (with virtualsize) if this flag is set to True.</td>
              </tr>
              <tr>
                       <td>libvirt_type=kvm</td>
                       <td>(StrOpt) Libvirt domain type (valid options are: kvm, lxc, qemu, uml, xen)</td>
              </tr>
              <tr>
                       <td>libvirt_uri=</td>
                       <td>(StrOpt) Override the default libvirt URI (which is dependent on libvirt_type)</td>
              </tr>
              <tr>
                       <td>libvirt_use_virtio_for_bridges=True</td>
                       <td>(BoolOpt) Use virtio for bridge interfaces with KVM/QEMU</td>
              </tr>
              <tr>
                       <td>libvirt_vif_driver=nova.virt.libvirt.vif.LibvirtGenericVIFDriver</td>
                       <td>(StrOpt) The libvirt VIF driver to configure the VIFs.</td>
              </tr>
              <tr>
                  <td>libvirt_volume_drivers=iscsi=nova.virt.libvirt.volume.LibvirtISCSIVolumeDriver, iser=nova.virt.libvirt.volume.LibvirtISERVolumeDriver, local=nova.virt.libvirt.volume.LibvirtVolumeDriver, fake=nova.virt.libvirt.volume.LibvirtFakeVolumeDriver, rbd=nova.virt.libvirt.volume.LibvirtNetVolumeDriver, sheepdog=nova.virt.libvirt.volume.LibvirtNetVolumeDriver, nfs=nova.virt.libvirt.volume.LibvirtNFSVolumeDriver, aoe=nova.virt.libvirt.volume.LibvirtAOEVolumeDriver, glusterfs=nova.virt.libvirt.volume.LibvirtGlusterfsVolumeDriver, fibre_channel=nova.virt.libvirt.volume.LibvirtFibreChannelVolumeDriver, scality=nova.virt.libvirt.volume.LibvirtScalityVolumeDriver</td>
                       <td>(ListOpt) Libvirt handlers for remote volumes.</td>
              </tr>
              <tr>
                       <td>libvirt_wait_soft_reboot_seconds=120</td>
                       <td>(IntOpt) Number of seconds to wait for instance to shut down after soft reboot request is made. We fall back to hard reboot if instance does not shutdown within this window.</td>
              </tr>
              <tr>
                       <td>preallocate_images=none</td>
                       <td>(StrOpt) VM image preallocation mode: "none" =&gt; no storage provisioning is done up front, "space" =&gt; storage is fully allocated at instance start</td>
              </tr>
              <tr>
                       <td>remove_unused_base_images=True</td>
                       <td>(BoolOpt) Should unused base images be removed?</td>
              </tr>
              <tr>
                       <td>remove_unused_kernels=False</td>
                       <td>(BoolOpt) Should unused kernel images be removed? This is only safe to enable if all compute nodes have been updated to support this option. This will enabled by default in future.</td>
              </tr>
              <tr>
                       <td>remove_unused_original_minimum_age_seconds=86400</td>
                       <td>(IntOpt) Unused unresized base images younger than this will not be removed</td>
              </tr>
              <tr>
                       <td>remove_unused_resized_minimum_age_seconds=3600</td>
                       <td>(IntOpt) Unused resized base images younger than this will not be removed</td>
              </tr>
              <tr>
                       <td>rescue_image_id=None</td>
                       <td>(StrOpt) Rescue ami image</td>
              </tr>
              <tr>
                       <td>rescue_kernel_id=None</td>
                       <td>(StrOpt) Rescue aki image</td>
              </tr>
              <tr>
                       <td>rescue_ramdisk_id=None</td>
                       <td>(StrOpt) Rescue ari image</td>
              </tr>
              <tr>
                       <td>rescue_timeout=0</td>
                       <td>(IntOpt) Automatically unrescue an instance after N seconds. Set to 0 to disable.</td>
              </tr>
              <tr>
                       <td>snapshot_image_format=None</td>
                       <td>(StrOpt) Snapshot image format (valid options are : raw, qcow2, vmdk, vdi). Defaults to same as source image</td>
              </tr>
              <tr>
                       <td>timeout_nbd=10</td>
                       <td>(IntOpt) time to wait for a NBD device coming up</td>
              </tr>
              <tr>
                       <td>use_cow_images=True</td>
                       <td>(BoolOpt) Whether to use cow images</td>
              </tr>
              <tr>
                       <td>use_usb_tablet=True</td>
                       <td>(BoolOpt) Sync virtual and real mouse cursors in Windows VMs</td>
              </tr>
              <tr>
                       <td>vcpu_pin_set=None</td>
                       <td>(StrOpt) Which pcpus can be used by vcpus of instance e.g: "4-12,^8,15"</td>
              </tr>
              <tr>
                       <td>virt_mkfs=['default=mkfs.ext3 -L %(fs_label)s -F %(target)s', 'linux=mkfs.ext3 -L %(fs_label)s -F %(target)s', 'windows=mkfs.ntfs --force --fast --label %(fs_label)s %(target)s']</td>
                       <td>(MultiStrOpt) mkfs commands for ephemeral device. The format is &lt;os_type&gt;=&lt;mkfs command&gt;</td>
              </tr>
       </tbody>
        </table>
        </para>