<?xml version="1.0" encoding="UTF-8"?>
        <!-- Warning: Do not edit this file. It is automatically
             generated and your changes will be overwritten.
             The tool to do so lives in the tools directory of this
             repository -->
        <para xmlns="http://docbook.org/ns/docbook" version="5.0">
        <table rules="all" xml:id="config_table_nova_logging">
          <caption>Description of configuration options for logging</caption>
           <col width="50%"/>
           <col width="50%"/>
           <thead>
              <tr>
                  <th>Configuration option = Default value</th>
                  <th>Description</th>
              </tr>
          </thead>
          <tbody>
              <tr>
                  <th colspan="2">[DEFAULT]</th>
              </tr>
              <tr>
                       <td>debug = False</td>
                       <td>(BoolOpt) Print debugging output (set logging level to DEBUG instead of default WARNING level).</td>
              </tr>
              <tr>
                       <td>default_log_levels = amqp=WARN, amqplib=WARN, boto=WARN, qpid=WARN, sqlalchemy=WARN, suds=INFO, oslo.messaging=INFO, iso8601=WARN, requests.packages.urllib3.connectionpool=WARN</td>
                       <td>(ListOpt) List of logger=LEVEL pairs</td>
              </tr>
              <tr>
                       <td>fatal_deprecations = False</td>
                       <td>(BoolOpt) Make deprecations fatal</td>
              </tr>
              <tr>
                       <td>fatal_exception_format_errors = False</td>
                       <td>(BoolOpt) Make exception message format errors fatal</td>
              </tr>
              <tr>
                       <td>instance_format = "[instance: %(uuid)s] "</td>
                       <td>(StrOpt) If an instance is passed with the log message, format it like this</td>
              </tr>
              <tr>
                       <td>instance_uuid_format = "[instance: %(uuid)s] "</td>
                       <td>(StrOpt) If an instance UUID is passed with the log message, format it like this</td>
              </tr>
              <tr>
                       <td>log-config-append = None</td>
                       <td>(StrOpt) The name of logging configuration file. It does not disable existing loggers, but just appends specified logging configuration to any other existing logging options. Please see the Python logging module documentation for details on logging configuration files.</td>
              </tr>
              <tr>
                       <td>log-date-format = %Y-%m-%d %H:%M:%S</td>
                       <td>(StrOpt) Format string for %%(asctime)s in log records. Default: %(default)s</td>
              </tr>
              <tr>
                       <td>log-dir = None</td>
                       <td>(StrOpt) (Optional) The base directory used for relative --log-file paths</td>
              </tr>
              <tr>
                       <td>log-file = None</td>
                       <td>(StrOpt) (Optional) Name of log file to output to. If no default is set, logging will go to stdout.</td>
              </tr>
              <tr>
                       <td>log-format = None</td>
                       <td>(StrOpt) DEPRECATED. A logging.Formatter log message format string which may use any of the available logging.LogRecord attributes. This option is deprecated.  Please use logging_context_format_string and logging_default_format_string instead.</td>
              </tr>
              <tr>
                       <td>logging_context_format_string = %(asctime)s.%(msecs)03d %(process)d %(levelname)s %(name)s [%(request_id)s %(user_identity)s] %(instance)s%(message)s</td>
                       <td>(StrOpt) Format string to use for log messages with context</td>
              </tr>
              <tr>
                       <td>logging_debug_format_suffix = %(funcName)s %(pathname)s:%(lineno)d</td>
                       <td>(StrOpt) Data to append to log format when level is DEBUG</td>
              </tr>
              <tr>
                       <td>logging_default_format_string = %(asctime)s.%(msecs)03d %(process)d %(levelname)s %(name)s [-] %(instance)s%(message)s</td>
                       <td>(StrOpt) Format string to use for log messages without context</td>
              </tr>
              <tr>
                       <td>logging_exception_prefix = %(asctime)s.%(msecs)03d %(process)d TRACE %(name)s %(instance)s</td>
                       <td>(StrOpt) Prefix each line of exception output with this format</td>
              </tr>
              <tr>
                       <td>publish_errors = False</td>
                       <td>(BoolOpt) Publish error events</td>
              </tr>
              <tr>
                       <td>syslog-log-facility = LOG_USER</td>
                       <td>(StrOpt) Syslog facility to receive log lines</td>
              </tr>
              <tr>
                       <td>use_stderr = True</td>
                       <td>(BoolOpt) Log output to standard error</td>
              </tr>
              <tr>
                       <td>use-syslog = False</td>
                       <td>(BoolOpt) Use syslog for logging. Existing syslog format is DEPRECATED during I, and then will be changed in J to honor RFC5424</td>
              </tr>
              <tr>
                       <td>use-syslog-rfc-format = False</td>
                       <td>(BoolOpt) (Optional) Use syslog rfc5424 format for logging. If enabled, will add APP-NAME (RFC5424) before the MSG part of the syslog message.  The old format without APP-NAME is deprecated in I, and will be removed in J.</td>
              </tr>
              <tr>
                       <td>verbose = False</td>
                       <td>(BoolOpt) Print more verbose output (set logging level to INFO instead of default WARNING level).</td>
              </tr>
       </tbody>
        </table>
        </para>
