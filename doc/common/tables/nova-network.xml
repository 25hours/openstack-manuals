<?xml version="1.0" encoding="UTF-8"?>
        <!-- Warning: Do not edit this file. It is automatically
             generated and your changes will be overwritten.
             The tool to do so lives in the tools directory of this
             repository -->
        <para xmlns="http://docbook.org/ns/docbook" version="5.0">
        <table rules="all">
          <caption>Description of configuration options for network</caption>
           <col width="50%"/>
           <col width="50%"/>
           <thead>
              <tr>
                  <td>Configuration option=Default value</td>
                  <td>Description</td>
              </tr>
          </thead>
          <tbody>
              <tr>
                       <td>allow_same_net_traffic=True</td>
                       <td>(BoolOpt) Whether to allow network traffic from same network</td>
              </tr>
              <tr>
                       <td>auto_assign_floating_ip=False</td>
                       <td>(BoolOpt) Autoassigning floating ip to VM</td>
              </tr>
              <tr>
                       <td>cnt_vpn_clients=0</td>
                       <td>(IntOpt) Number of addresses reserved for vpn clients</td>
              </tr>
              <tr>
                       <td>create_unique_mac_address_attempts=5</td>
                       <td>(IntOpt) Number of attempts to create unique mac address</td>
              </tr>
              <tr>
                       <td>default_access_ip_network_name=None</td>
                       <td>(StrOpt) Name of network to use to set access ips for instances</td>
              </tr>
              <tr>
                       <td>default_floating_pool=nova</td>
                       <td>(StrOpt) Default pool for floating ips</td>
              </tr>
              <tr>
                       <td>defer_iptables_apply=False</td>
                       <td>(BoolOpt) Whether to batch up the application of IPTables rules during a host restart and apply all at the end of the init phase</td>
              </tr>
              <tr>
                       <td>dhcp_domain=novalocal</td>
                       <td>(StrOpt) domain to use for building the hostnames</td>
              </tr>
              <tr>
                       <td>dhcp_lease_time=120</td>
                       <td>(IntOpt) Lifetime of a DHCP lease in seconds</td>
              </tr>
              <tr>
                       <td>dhcpbridge=$bindir/nova-dhcpbridge</td>
                       <td>(StrOpt) location of nova-dhcpbridge</td>
              </tr>
              <tr>
                       <td>dhcpbridge_flagfile=['/etc/nova/nova-dhcpbridge.conf']</td>
                       <td>(MultiStrOpt) location of flagfiles for dhcpbridge</td>
              </tr>
              <tr>
                       <td>dns_server=[]</td>
                       <td>(MultiStrOpt) if set, uses specific dns server for dnsmasq. Canbe specified multiple times.</td>
              </tr>
              <tr>
                       <td>dns_update_periodic_interval=-1</td>
                       <td>(IntOpt) Number of seconds to wait between runs of updates to DNS entries.</td>
              </tr>
              <tr>
                       <td>dnsmasq_config_file=</td>
                       <td>(StrOpt) Override the default dnsmasq settings with this file</td>
              </tr>
              <tr>
                       <td>firewall_driver=None</td>
                       <td>(StrOpt) Firewall driver (defaults to hypervisor specific iptables driver)</td>
              </tr>
              <tr>
                       <td>fixed_ip_disassociate_timeout=600</td>
                       <td>(IntOpt) Seconds after which a deallocated ip is disassociated</td>
              </tr>
              <tr>
                       <td>flat_injected=False</td>
                       <td>(BoolOpt) Whether to attempt to inject network setup into guest</td>
              </tr>
              <tr>
                       <td>flat_interface=None</td>
                       <td>(StrOpt) FlatDhcp will bridge into this interface if set</td>
              </tr>
              <tr>
                      <td>ovs_vsctl_timeout=120</td>
                      <td>(IntOpt) Amount of time, in seconds, that ovs_vsctl should wait for aresponse from the database. 0 is to wait forever.</td>

              </tr>
              <tr>
                       <td>flat_network_bridge=None</td>
                       <td>(StrOpt) Bridge for simple network instances</td>
              </tr>
              <tr>
                       <td>flat_network_dns=8.8.4.4</td>
                       <td>(StrOpt) Dns for simple network</td>
              </tr>
              <tr>
                       <td>floating_ip_dns_manager=nova.network.noop_dns_driver.NoopDNSDriver</td>
                       <td>(StrOpt) full class name for the DNS Manager for floating IPs</td>
              </tr>
              <tr>
                       <td>force_dhcp_release=True</td>
                       <td>(BoolOpt) If True, send a dhcp release on instance termination</td>
              </tr>
              <tr>
                       <td>force_snat_range=[]</td>
                       <td>(MultiStrOpt) Traffic to this range will always be snatted to the fallback ip, even if it would normally be bridged out of the node. Can be specified multiple times.</td>
              </tr>
              <tr>
                       <td>forward_bridge_interface=['all']</td>
                       <td>(MultiStrOpt) An interface that bridges can forward to. If this is set to all then all traffic will be forwarded. Can be specified multiple times.</td>
              </tr>
              <tr>
                       <td>gateway=None</td>
                       <td>(StrOpt) Default IPv4 gateway</td>
              </tr>
              <tr>
                       <td>injected_network_template=$pybasedir/nova/virt/interfaces.template</td>
                       <td>(StrOpt) Template file for injected network</td>
              </tr>
              <tr>
                       <td>injected_network_template=$pybasedir/nova/virt/baremetal/interfaces.template</td>
                       <td>(StrOpt) Template file for injected network</td>
              </tr>
              <tr>
                       <td>injected_network_template=$pybasedir/nova/virt/interfaces.template</td>
                       <td>(StrOpt) Template file for injected network</td>
              </tr>
              <tr>
                       <td>injected_network_template=$pybasedir/nova/virt/baremetal/interfaces.template</td>
                       <td>(StrOpt) Template file for injected network</td>
              </tr>
              <tr>
                       <td>instance_dns_domain=</td>
                       <td>(StrOpt) full class name for the DNS Zone for instance IPs</td>
              </tr>
              <tr>
                       <td>instance_dns_manager=nova.network.noop_dns_driver.NoopDNSDriver</td>
                       <td>(StrOpt) full class name for the DNS Manager for instance IPs</td>
              </tr>
              <tr>
                       <td>iptables_bottom_regex=</td>
                       <td>(StrOpt) Regular expression to match iptables rule that shouldalways be on the bottom.</td>
              </tr>
              <tr>
                       <td>iptables_drop_action=DROP</td>
                       <td>(StrOpt) The table that iptables to jump to when a packet is to be dropped.</td>
              </tr>
              <tr>
                       <td>iptables_top_regex=</td>
                       <td>(StrOpt) Regular expression to match iptables rule that shouldalways be on the top.</td>
              </tr>
              <tr>
                       <td>l3_lib=nova.network.l3.LinuxNetL3</td>
                       <td>(StrOpt) Indicates underlying L3 management library</td>
              </tr>
              <tr>
                       <td>linuxnet_interface_driver=nova.network.linux_net.LinuxBridgeInterfaceDriver</td>
                       <td>(StrOpt) Driver used to create ethernet devices.</td>
              </tr>
              <tr>
                       <td>linuxnet_ovs_integration_bridge=br-int</td>
                       <td>(StrOpt) Name of Open vSwitch bridge used with linuxnet</td>
              </tr>
              <tr>
                       <td>multi_host=False</td>
                       <td>(BoolOpt) Default value for multi_host in networks. Also, if set, some rpc network calls will be sent directly to host.</td>
              </tr>
              <tr>
                       <td>network_allocate_retries=0</td>
                       <td>(IntOpt) Number of times to retry network allocation on failures</td>
              </tr>
              <tr>
                       <td>network_api_class=nova.network.api.API</td>
                       <td>(StrOpt) The full class name of the network API class to use</td>
              </tr>
              <tr>
                       <td>network_device_mtu=None</td>
                       <td>(StrOpt) MTU setting for vlan</td>
              </tr>
              <tr>
                       <td>network_driver=nova.network.linux_net</td>
                       <td>(StrOpt) Driver to use for network creation</td>
              </tr>
              <tr>
                       <td>network_manager=nova.network.manager.VlanManager</td>
                       <td>(StrOpt) full class name for the Manager for network</td>
              </tr>
              <tr>
                       <td>network_size=256</td>
                       <td>(IntOpt) Number of addresses in each private subnet</td>
              </tr>
              <tr>
                       <td>network_topic=network</td>
                       <td>(StrOpt) the topic network nodes listen on</td>
              </tr>
              <tr>
                       <td>networks_path=$state_path/networks</td>
                       <td>(StrOpt) Location to keep network config files</td>
              </tr>
              <tr>
                       <td>num_networks=1</td>
                       <td>(IntOpt) Number of networks to support</td>
              </tr>
              <tr>
                       <td>public_interface=eth0</td>
                       <td>(StrOpt) Interface for public IP addresses</td>
              </tr>
              <tr>
                       <td>routing_source_ip=$my_ip</td>
                       <td>(StrOpt) Public IP of network host</td>
              </tr>
              <tr>
                       <td>security_group_api=nova</td>
                       <td>(StrOpt) The full class name of the security API class</td>
              </tr>
              <tr>
                       <td>send_arp_for_ha=False</td>
                       <td>(BoolOpt) send gratuitous ARPs for HA setup</td>
              </tr>
              <tr>
                       <td>send_arp_for_ha_count=3</td>
                       <td>(IntOpt) send this many gratuitous ARPs for HA setup</td>
              </tr>
              <tr>
                       <td>share_dhcp_address=False</td>
                       <td>(BoolOpt) If True in multi_host mode, all compute hosts share the same dhcp address. The same IP address used for DHCP will be added on each nova-network node which is only visible to the vms on the same host.</td>
              </tr>
              <tr>
                       <td>teardown_unused_network_gateway=False</td>
                       <td>(BoolOpt) If True, unused gateway devices (VLAN and bridge) are deleted in VLAN network mode with multi hosted networks</td>
              </tr>
              <tr>
                       <td>update_dns_entries=False</td>
                       <td>(BoolOpt) If True, when a DNS entry must be updated, it sends a fanout cast to all network hosts to update their DNS entries in multi host mode</td>
              </tr>
              <tr>
                       <td>use_network_dns_servers=False</td>
                       <td>(BoolOpt) if set, uses the dns1 and dns2 from the network ref.as dns servers.</td>
              </tr>
              <tr>
                       <td>use_neutron_default_nets=False</td>
                       <td>(StrOpt) Control for checking for default networks</td>
              </tr>
              <tr>
                       <td>use_single_default_gateway=False</td>
                       <td>(BoolOpt) Use single default gateway. Only first nic of vm will get default gateway from dhcp server</td>
              </tr>
              <tr>
                       <td>vlan_interface=None</td>
                       <td>(StrOpt) vlans will bridge into this interface if set</td>
              </tr>
              <tr>
                       <td>vlan_interface=vmnic0</td>
                       <td>(StrOpt) Physical ethernet adapter name for vlan networking</td>
              </tr>
              <tr>
                       <td>vlan_start=100</td>
                       <td>(IntOpt) First VLAN for private networks</td>
              </tr>
       </tbody>
        </table>
        </para>
