<?xml version='1.0' encoding='UTF-8'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="ironic-conf-changes-liberty">
  <!-- Warning: Do not edit this file. It is automatically generated and your changes will be overwritten. The tool to do so lives in the openstack-doc-tools repository. -->
  <title>New, updated, and deprecated options in Liberty for Bare metal service</title>
  <table>
    <caption>New options</caption>
    <col width="50%"/>
    <col width="50%"/>
    <thead>
      <tr>
        <td>Option = default value</td>
        <td>(Type) Help string</td>
      </tr>
    </thead>
    <tr>
      <td>[DEFAULT] executor_thread_pool_size = 64</td>
      <td>(IntOpt) Size of executor thread pool.</td>
    </tr>
    <tr>
      <td>[DEFAULT] password = </td>
      <td>(StrOpt) Password for Redis server (optional).</td>
    </tr>
    <tr>
      <td>[DEFAULT] port = 6379</td>
      <td>(IntOpt) Use this port to connect to redis host.</td>
    </tr>
    <tr>
      <td>[DEFAULT] rpc_conn_pool_size = 30</td>
      <td>(IntOpt) Size of RPC connection pool.</td>
    </tr>
    <tr>
      <td>[DEFAULT] rpc_poll_timeout = 1</td>
      <td>(IntOpt) The default number of seconds that poll should wait. Poll raises timeout exception when timeout expired.</td>
    </tr>
    <tr>
      <td>[DEFAULT] rpc_zmq_all_req_rep = True</td>
      <td>(BoolOpt) Use REQ/REP pattern for all methods CALL/CAST/FANOUT.</td>
    </tr>
    <tr>
      <td>[DEFAULT] rpc_zmq_concurrency = eventlet</td>
      <td>(StrOpt) Type of concurrency used. Either "native" or "eventlet"</td>
    </tr>
    <tr>
      <td>[DEFAULT] watch_log_file = False</td>
      <td>(BoolOpt) (Optional) Uses logging handler designed to watch file system. When log file is moved or removed this handler will open a new log file with specified path instantaneously. It makes sense only if log-file option is specified and Linux platform is used. This option is ignored if log_config_append is set.</td>
    </tr>
    <tr>
      <td>[DEFAULT] zmq_use_broker = True</td>
      <td>(BoolOpt) Shows whether zmq-messaging uses broker or not.</td>
    </tr>
    <tr>
      <td>[agent] manage_agent_boot = True</td>
      <td>(BoolOpt) Whether Ironic will manage booting of the agent ramdisk. If set to False, you will need to configure your mechanism to allow booting the agent ramdisk.</td>
    </tr>
    <tr>
      <td>[agent] memory_consumed_by_agent = 0</td>
      <td>(IntOpt) The memory size in MiB consumed by agent when it is booted on a bare metal node. This is used for checking if the image can be downloaded and deployed on the bare metal node after booting agent ramdisk. This may be set according to the memory consumed by the agent ramdisk image.</td>
    </tr>
    <tr>
      <td>[agent] post_deploy_get_power_state_retries = 6</td>
      <td>(IntOpt) Number of times to retry getting power state to check if bare metal node has been powered off after a soft power off.</td>
    </tr>
    <tr>
      <td>[agent] post_deploy_get_power_state_retry_interval = 5</td>
      <td>(IntOpt) Amount of time (in seconds) to wait between polling power state after trigger soft poweroff.</td>
    </tr>
    <tr>
      <td>[api] public_endpoint = None</td>
      <td>(StrOpt) Public URL to use when building the links to the API resources (for example, "https://ironic.rocks:6384"). If None the links will be built using the request's host URL. If the API is operating behind a proxy, you will want to change this to represent the proxy's URL. Defaults to None.</td>
    </tr>
    <tr>
      <td>[cimc] action_interval = 10</td>
      <td>(IntOpt) Amount of time in seconds to wait in between power operations</td>
    </tr>
    <tr>
      <td>[cimc] max_retry = 6</td>
      <td>(IntOpt) Number of times a power operation needs to be retried</td>
    </tr>
    <tr>
      <td>[cisco_ucs] action_interval = 5</td>
      <td>(IntOpt) Amount of time in seconds to wait in between power operations</td>
    </tr>
    <tr>
      <td>[cisco_ucs] max_retry = 6</td>
      <td>(IntOpt) Number of times a power operation needs to be retried</td>
    </tr>
    <tr>
      <td>[conductor] clean_callback_timeout = 1800</td>
      <td>(IntOpt) Timeout (seconds) to wait for a callback from the ramdisk doing the cleaning. If the timeout is reached the node will be put in the "clean failed" provision state. Set to 0 to disable timeout.</td>
    </tr>
    <tr>
      <td>[cors] allow_credentials = True</td>
      <td>(BoolOpt) Indicate that the actual request can include user credentials</td>
    </tr>
    <tr>
      <td>[cors] allow_headers = Content-Type, Cache-Control, Content-Language, Expires, Last-Modified, Pragma</td>
      <td>(ListOpt) Indicate which header field names may be used during the actual request.</td>
    </tr>
    <tr>
      <td>[cors] allow_methods = GET, POST, PUT, DELETE, OPTIONS</td>
      <td>(ListOpt) Indicate which methods can be used during the actual request.</td>
    </tr>
    <tr>
      <td>[cors] allowed_origin = None</td>
      <td>(StrOpt) Indicate whether this resource may be shared with the domain received in the requests "origin" header.</td>
    </tr>
    <tr>
      <td>[cors] expose_headers = Content-Type, Cache-Control, Content-Language, Expires, Last-Modified, Pragma</td>
      <td>(ListOpt) Indicate which headers are safe to expose to the API. Defaults to HTTP Simple Headers.</td>
    </tr>
    <tr>
      <td>[cors] max_age = 3600</td>
      <td>(IntOpt) Maximum cache age of CORS preflight requests.</td>
    </tr>
    <tr>
      <td>[cors.subdomain] allow_credentials = True</td>
      <td>(BoolOpt) Indicate that the actual request can include user credentials</td>
    </tr>
    <tr>
      <td>[cors.subdomain] allow_headers = Content-Type, Cache-Control, Content-Language, Expires, Last-Modified, Pragma</td>
      <td>(ListOpt) Indicate which header field names may be used during the actual request.</td>
    </tr>
    <tr>
      <td>[cors.subdomain] allow_methods = GET, POST, PUT, DELETE, OPTIONS</td>
      <td>(ListOpt) Indicate which methods can be used during the actual request.</td>
    </tr>
    <tr>
      <td>[cors.subdomain] allowed_origin = None</td>
      <td>(StrOpt) Indicate whether this resource may be shared with the domain received in the requests "origin" header.</td>
    </tr>
    <tr>
      <td>[cors.subdomain] expose_headers = Content-Type, Cache-Control, Content-Language, Expires, Last-Modified, Pragma</td>
      <td>(ListOpt) Indicate which headers are safe to expose to the API. Defaults to HTTP Simple Headers.</td>
    </tr>
    <tr>
      <td>[cors.subdomain] max_age = 3600</td>
      <td>(IntOpt) Maximum cache age of CORS preflight requests.</td>
    </tr>
    <tr>
      <td>[deploy] erase_devices_iterations = 1</td>
      <td>(IntOpt) Number of iterations to be run for erasing devices.</td>
    </tr>
    <tr>
      <td>[deploy] erase_devices_priority = None</td>
      <td>(IntOpt) Priority to run in-band erase devices via the Ironic Python Agent ramdisk. If unset, will use the priority set in the ramdisk (defaults to 10 for the GenericHardwareManager). If set to 0, will not run during cleaning.</td>
    </tr>
    <tr>
      <td>[deploy] http_root = /httpboot</td>
      <td>(StrOpt) ironic-conductor node's HTTP root path.</td>
    </tr>
    <tr>
      <td>[deploy] http_url = None</td>
      <td>(StrOpt) ironic-conductor node's HTTP server URL. Example: http://192.1.2.3:8080</td>
    </tr>
    <tr>
      <td>[drac] client_retry_count = 5</td>
      <td>(IntOpt) In case there is a communication failure, the DRAC client is going to resend the request as many times as defined in this setting.</td>
    </tr>
    <tr>
      <td>[drac] client_retry_delay = 5</td>
      <td>(IntOpt) In case there is a communication failure, the DRAC client is going to wait for as many seconds as defined in this setting before resending the request.</td>
    </tr>
    <tr>
      <td>[iboot] max_retry = 3</td>
      <td>(IntOpt) Maximum retries for iBoot operations</td>
    </tr>
    <tr>
      <td>[iboot] retry_interval = 1</td>
      <td>(IntOpt) Time between retry attempts for iBoot operations</td>
    </tr>
    <tr>
      <td>[ilo] use_web_server_for_images = False</td>
      <td>(BoolOpt) Set this to True to use http web server to host floppy images and generated boot ISO. This requires http_root and http_url to be configured in the [deploy] section of the config file. If this is set to False, then Ironic will use Swift to host the floppy images and generated boot_iso.</td>
    </tr>
    <tr>
      <td>[inspector] enabled = False</td>
      <td>(BoolOpt) whether to enable inspection using ironic-inspector</td>
    </tr>
    <tr>
      <td>[inspector] service_url = None</td>
      <td>(StrOpt) ironic-inspector HTTP endpoint. If this is not set, the ironic-inspector client default (http://127.0.0.1:5050) will be used.</td>
    </tr>
    <tr>
      <td>[inspector] status_check_period = 60</td>
      <td>(IntOpt) period (in seconds) to check status of nodes on inspection</td>
    </tr>
    <tr>
      <td>[irmc] remote_image_server = None</td>
      <td>(StrOpt) IP of remote image server</td>
    </tr>
    <tr>
      <td>[irmc] remote_image_share_name = share</td>
      <td>(StrOpt) share name of remote_image_server</td>
    </tr>
    <tr>
      <td>[irmc] remote_image_share_root = /remote_image_share_root</td>
      <td>(StrOpt) Ironic conductor node's "NFS" or "CIFS" root path</td>
    </tr>
    <tr>
      <td>[irmc] remote_image_share_type = CIFS</td>
      <td>(StrOpt) Share type of virtual media, either "NFS" or "CIFS"</td>
    </tr>
    <tr>
      <td>[irmc] remote_image_user_domain = </td>
      <td>(StrOpt) Domain name of remote_image_user_name</td>
    </tr>
    <tr>
      <td>[irmc] remote_image_user_name = None</td>
      <td>(StrOpt) User name of remote_image_server</td>
    </tr>
    <tr>
      <td>[irmc] remote_image_user_password = None</td>
      <td>(StrOpt) Password of remote_image_user_name</td>
    </tr>
    <tr>
      <td>[keystone_authtoken] region_name = None</td>
      <td>(StrOpt) The region in which the identity server can be found.</td>
    </tr>
    <tr>
      <td>[oslo_messaging_amqp] password = </td>
      <td>(StrOpt) Password for message broker authentication</td>
    </tr>
    <tr>
      <td>[oslo_messaging_amqp] sasl_config_dir = </td>
      <td>(StrOpt) Path to directory that contains the SASL configuration</td>
    </tr>
    <tr>
      <td>[oslo_messaging_amqp] sasl_config_name = </td>
      <td>(StrOpt) Name of configuration file (without .conf suffix)</td>
    </tr>
    <tr>
      <td>[oslo_messaging_amqp] sasl_mechanisms = </td>
      <td>(StrOpt) Space separated list of acceptable SASL mechanisms</td>
    </tr>
    <tr>
      <td>[oslo_messaging_amqp] username = </td>
      <td>(StrOpt) User name for message broker authentication</td>
    </tr>
    <tr>
      <td>[oslo_messaging_qpid] send_single_reply = False</td>
      <td>(BoolOpt) Send a single AMQP reply to call message. The current behaviour since oslo-incubator is to send two AMQP replies - first one with the payload, a second one to ensure the other have finish to send the payload. We are going to remove it in the N release, but we must keep backward compatible at the same time. This option provides such compatibility - it defaults to False in Liberty and can be turned on for early adopters with a new installations or for testing. Please note, that this option will be removed in the Mitaka release.</td>
    </tr>
    <tr>
      <td>[oslo_messaging_rabbit] kombu_reconnect_timeout = 60</td>
      <td>(IntOpt) How long to wait before considering a reconnect attempt to have failed. This value should not be longer than rpc_response_timeout.</td>
    </tr>
    <tr>
      <td>[oslo_messaging_rabbit] send_single_reply = False</td>
      <td>(BoolOpt) Send a single AMQP reply to call message. The current behaviour since oslo-incubator is to send two AMQP replies - first one with the payload, a second one to ensure the other have finish to send the payload. We are going to remove it in the N release, but we must keep backward compatible at the same time. This option provides such compatibility - it defaults to False in Liberty and can be turned on for early adopters with a new installations or for testing. Please note, that this option will be removed in the Mitaka release.</td>
    </tr>
    <tr>
      <td>[oslo_middleware] max_request_body_size = 114688</td>
      <td>(IntOpt) The maximum body size for each  request, in bytes.</td>
    </tr>
    <tr>
      <td>[oslo_middleware] secure_proxy_ssl_header = X-Forwarded-Proto</td>
      <td>(StrOpt) The HTTP Header that will be used to determine what the original request protocol scheme was, even if it was hidden by an SSL termination proxy.</td>
    </tr>
    <tr>
      <td>[oslo_versionedobjects] fatal_exception_format_errors = False</td>
      <td>(BoolOpt) Make exception message format errors fatal</td>
    </tr>
  </table>
  <table>
    <caption>New default values</caption>
    <col width="33%"/>
    <col width="33%"/>
    <col width="33%"/>
    <thead>
      <tr>
        <td>Option</td>
        <td>Previous default value</td>
        <td>New default value</td>
      </tr>
    </thead>
    <tr>
      <td>[DEFAULT] default_log_levels</td>
      <td>amqp=WARN, amqplib=WARN, boto=WARN, qpid=WARN, sqlalchemy=WARN, suds=INFO, oslo.messaging=INFO, iso8601=WARN, requests.packages.urllib3.connectionpool=WARN, urllib3.connectionpool=WARN, websocket=WARN, keystonemiddleware=WARN, routes.middleware=WARN, stevedore=WARN</td>
      <td>amqp=WARN, amqplib=WARN, boto=WARN, qpid=WARN, sqlalchemy=WARN, suds=INFO, oslo.messaging=INFO, iso8601=WARN, requests.packages.urllib3.connectionpool=WARN, urllib3.connectionpool=WARN, websocket=WARN, requests.packages.urllib3.util.retry=WARN, urllib3.util.retry=WARN, keystonemiddleware=WARN, routes.middleware=WARN, stevedore=WARN, taskflow=WARN</td>
    </tr>
    <tr>
      <td>[DEFAULT] logging_exception_prefix</td>
      <td>%(asctime)s.%(msecs)03d %(process)d TRACE %(name)s %(instance)s</td>
      <td>%(asctime)s.%(msecs)03d %(process)d ERROR %(name)s %(instance)s</td>
    </tr>
    <tr>
      <td>[DEFAULT] rpc_zmq_matchmaker</td>
      <td>local</td>
      <td>redis</td>
    </tr>
    <tr>
      <td>[DEFAULT] tempdir</td>
      <td>None</td>
      <td>/tmp</td>
    </tr>
    <tr>
      <td>[DEFAULT] use_syslog_rfc_format</td>
      <td>False</td>
      <td>True</td>
    </tr>
    <tr>
      <td>[DEFAULT] verbose</td>
      <td>False</td>
      <td>True</td>
    </tr>
    <tr>
      <td>[matchmaker_redis] password</td>
      <td>None</td>
      <td></td>
    </tr>
    <tr>
      <td>[oslo_messaging_rabbit] heartbeat_timeout_threshold</td>
      <td>0</td>
      <td>60</td>
    </tr>
  </table>
  <table>
    <caption>Deprecated options</caption>
    <col width="50%"/>
    <col width="50%"/>
    <thead>
      <tr>
        <td>Deprecated option</td>
        <td>New Option</td>
      </tr>
    </thead>
    <tr>
      <td>[agent] agent_pxe_append_params</td>
      <td>None</td>
    </tr>
    <tr>
      <td>[agent] agent_erase_devices_priority</td>
      <td>[deploy] erase_devices_priority</td>
    </tr>
    <tr>
      <td>[DEFAULT] rpc_thread_pool_size</td>
      <td>[DEFAULT] executor_thread_pool_size</td>
    </tr>
    <tr>
      <td>[DEFAULT] log_format</td>
      <td>None</td>
    </tr>
    <tr>
      <td>[agent] agent_pxe_config_template</td>
      <td>None</td>
    </tr>
    <tr>
      <td>[DEFAULT] use_syslog</td>
      <td>None</td>
    </tr>
    <tr>
      <td>[agent] manage_tftp</td>
      <td>[agent] manage_agent_boot</td>
    </tr>
  </table>
</section>
