<?xml version='1.0' encoding='UTF-8'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="sahara-conf-changes-liberty">
  <!-- Warning: Do not edit this file. It is automatically generated and your changes will be overwritten. The tool to do so lives in the openstack-doc-tools repository. -->
  <title>New, updated, and deprecated options in Liberty for Data Processing service</title>
  <table>
    <caption>New options</caption>
    <col width="50%"/>
    <col width="50%"/>
    <thead>
      <tr>
        <td>Option = default value</td>
        <td>(Type) Help string</td>
      </tr>
    </thead>
    <tr>
      <td>[DEFAULT] cluster_operation_trust_expiration_hours = 24</td>
      <td>(IntOpt) Defines the period of time (in hours) after which trusts created to allow sahara to create or scale a cluster will expire. Note that this value should be significantly larger than the value of the cleanup_time_for_incomplete_clusters configuration key if use of the cluster cleanup feature is desired (the trust must last at least as long as a cluster could validly take to stall in its creation, plus the timeout value set in that key, plus one hour for the period of the cleanup job).</td>
    </tr>
    <tr>
      <td>[DEFAULT] default_ntp_server = pool.ntp.org</td>
      <td>(StrOpt) Default ntp server for time sync</td>
    </tr>
    <tr>
      <td>[DEFAULT] executor_thread_pool_size = 64</td>
      <td>(IntOpt) Size of executor thread pool.</td>
    </tr>
    <tr>
      <td>[DEFAULT] heat_stack_tags = data-processing-cluster</td>
      <td>(ListOpt) List of tags to be used during operating with stack.</td>
    </tr>
    <tr>
      <td>[DEFAULT] host = 127.0.0.1</td>
      <td>(StrOpt) Host to locate redis.</td>
    </tr>
    <tr>
      <td>[DEFAULT] password = </td>
      <td>(StrOpt) Password for Redis server (optional).</td>
    </tr>
    <tr>
      <td>[DEFAULT] port = 6379</td>
      <td>(IntOpt) Use this port to connect to redis host.</td>
    </tr>
    <tr>
      <td>[DEFAULT] rpc_conn_pool_size = 30</td>
      <td>(IntOpt) Size of RPC connection pool.</td>
    </tr>
    <tr>
      <td>[DEFAULT] rpc_poll_timeout = 1</td>
      <td>(IntOpt) The default number of seconds that poll should wait. Poll raises timeout exception when timeout expired.</td>
    </tr>
    <tr>
      <td>[DEFAULT] rpc_zmq_all_req_rep = True</td>
      <td>(BoolOpt) Use REQ/REP pattern for all methods CALL/CAST/FANOUT.</td>
    </tr>
    <tr>
      <td>[DEFAULT] rpc_zmq_concurrency = eventlet</td>
      <td>(StrOpt) Type of concurrency used. Either "native" or "eventlet"</td>
    </tr>
    <tr>
      <td>[DEFAULT] watch_log_file = False</td>
      <td>(BoolOpt) (Optional) Uses logging handler designed to watch file system. When log file is moved or removed this handler will open a new log file with specified path instantaneously. It makes sense only if log-file option is specified and Linux platform is used. This option is ignored if log_config_append is set.</td>
    </tr>
    <tr>
      <td>[DEFAULT] zmq_use_broker = True</td>
      <td>(BoolOpt) Shows whether zmq-messaging uses broker or not.</td>
    </tr>
    <tr>
      <td>[cinder] endpoint_type = internalURL</td>
      <td>(StrOpt) Endpoint type for cinder client requests</td>
    </tr>
    <tr>
      <td>[cors] allow_credentials = True</td>
      <td>(BoolOpt) Indicate that the actual request can include user credentials</td>
    </tr>
    <tr>
      <td>[cors] allow_headers = Content-Type, Cache-Control, Content-Language, Expires, Last-Modified, Pragma</td>
      <td>(ListOpt) Indicate which header field names may be used during the actual request.</td>
    </tr>
    <tr>
      <td>[cors] allow_methods = GET, POST, PUT, DELETE, OPTIONS</td>
      <td>(ListOpt) Indicate which methods can be used during the actual request.</td>
    </tr>
    <tr>
      <td>[cors] allowed_origin = None</td>
      <td>(StrOpt) Indicate whether this resource may be shared with the domain received in the requests "origin" header.</td>
    </tr>
    <tr>
      <td>[cors] expose_headers = Content-Type, Cache-Control, Content-Language, Expires, Last-Modified, Pragma</td>
      <td>(ListOpt) Indicate which headers are safe to expose to the API. Defaults to HTTP Simple Headers.</td>
    </tr>
    <tr>
      <td>[cors] max_age = 3600</td>
      <td>(IntOpt) Maximum cache age of CORS preflight requests.</td>
    </tr>
    <tr>
      <td>[cors.subdomain] allow_credentials = True</td>
      <td>(BoolOpt) Indicate that the actual request can include user credentials</td>
    </tr>
    <tr>
      <td>[cors.subdomain] allow_headers = Content-Type, Cache-Control, Content-Language, Expires, Last-Modified, Pragma</td>
      <td>(ListOpt) Indicate which header field names may be used during the actual request.</td>
    </tr>
    <tr>
      <td>[cors.subdomain] allow_methods = GET, POST, PUT, DELETE, OPTIONS</td>
      <td>(ListOpt) Indicate which methods can be used during the actual request.</td>
    </tr>
    <tr>
      <td>[cors.subdomain] allowed_origin = None</td>
      <td>(StrOpt) Indicate whether this resource may be shared with the domain received in the requests "origin" header.</td>
    </tr>
    <tr>
      <td>[cors.subdomain] expose_headers = Content-Type, Cache-Control, Content-Language, Expires, Last-Modified, Pragma</td>
      <td>(ListOpt) Indicate which headers are safe to expose to the API. Defaults to HTTP Simple Headers.</td>
    </tr>
    <tr>
      <td>[cors.subdomain] max_age = 3600</td>
      <td>(IntOpt) Maximum cache age of CORS preflight requests.</td>
    </tr>
    <tr>
      <td>[heat] endpoint_type = internalURL</td>
      <td>(StrOpt) Endpoint type for heat client requests</td>
    </tr>
    <tr>
      <td>[keystone] endpoint_type = internalURL</td>
      <td>(StrOpt) Endpoint type for keystone client requests</td>
    </tr>
    <tr>
      <td>[keystone_authtoken] region_name = None</td>
      <td>(StrOpt) The region in which the identity server can be found.</td>
    </tr>
    <tr>
      <td>[manila] api_insecure = True</td>
      <td>(BoolOpt) Allow to perform insecure SSL requests to manila.</td>
    </tr>
    <tr>
      <td>[manila] api_version = 1</td>
      <td>(IntOpt) Version of the manila API to use.</td>
    </tr>
    <tr>
      <td>[manila] ca_file = None</td>
      <td>(StrOpt) Location of ca certificates file to use for manila client requests.</td>
    </tr>
    <tr>
      <td>[neutron] endpoint_type = internalURL</td>
      <td>(StrOpt) Endpoint type for neutron client requests</td>
    </tr>
    <tr>
      <td>[nova] endpoint_type = internalURL</td>
      <td>(StrOpt) Endpoint type for nova client requests</td>
    </tr>
    <tr>
      <td>[object_store_access] public_identity_ca_file = None</td>
      <td>(StrOpt) Location of ca certificate file to use for identity client requests via public endpoint</td>
    </tr>
    <tr>
      <td>[object_store_access] public_object_store_ca_file = None</td>
      <td>(StrOpt) Location of ca certificate file to use for object-store client requests via public endpoint</td>
    </tr>
    <tr>
      <td>[oslo_messaging_amqp] password = </td>
      <td>(StrOpt) Password for message broker authentication</td>
    </tr>
    <tr>
      <td>[oslo_messaging_amqp] sasl_config_dir = </td>
      <td>(StrOpt) Path to directory that contains the SASL configuration</td>
    </tr>
    <tr>
      <td>[oslo_messaging_amqp] sasl_config_name = </td>
      <td>(StrOpt) Name of configuration file (without .conf suffix)</td>
    </tr>
    <tr>
      <td>[oslo_messaging_amqp] sasl_mechanisms = </td>
      <td>(StrOpt) Space separated list of acceptable SASL mechanisms</td>
    </tr>
    <tr>
      <td>[oslo_messaging_amqp] username = </td>
      <td>(StrOpt) User name for message broker authentication</td>
    </tr>
    <tr>
      <td>[oslo_messaging_qpid] send_single_reply = False</td>
      <td>(BoolOpt) Send a single AMQP reply to call message. The current behaviour since oslo-incubator is to send two AMQP replies - first one with the payload, a second one to ensure the other have finish to send the payload. We are going to remove it in the N release, but we must keep backward compatible at the same time. This option provides such compatibility - it defaults to False in Liberty and can be turned on for early adopters with a new installations or for testing. Please note, that this option will be removed in the Mitaka release.</td>
    </tr>
    <tr>
      <td>[oslo_messaging_rabbit] kombu_reconnect_timeout = 60</td>
      <td>(IntOpt) How long to wait before considering a reconnect attempt to have failed. This value should not be longer than rpc_response_timeout.</td>
    </tr>
    <tr>
      <td>[oslo_messaging_rabbit] send_single_reply = False</td>
      <td>(BoolOpt) Send a single AMQP reply to call message. The current behaviour since oslo-incubator is to send two AMQP replies - first one with the payload, a second one to ensure the other have finish to send the payload. We are going to remove it in the N release, but we must keep backward compatible at the same time. This option provides such compatibility - it defaults to False in Liberty and can be turned on for early adopters with a new installations or for testing. Please note, that this option will be removed in the Mitaka release.</td>
    </tr>
    <tr>
      <td>[oslo_middleware] secure_proxy_ssl_header = X-Forwarded-Proto</td>
      <td>(StrOpt) The HTTP Header that will be used to determine what the original request protocol scheme was, even if it was hidden by an SSL termination proxy.</td>
    </tr>
    <tr>
      <td>[retries] retries_number = 5</td>
      <td>(IntOpt) Number of times to retry the request to client before failing</td>
    </tr>
    <tr>
      <td>[retries] retry_after = 10</td>
      <td>(IntOpt) Time between the retries to client (in seconds).</td>
    </tr>
    <tr>
      <td>[swift] endpoint_type = internalURL</td>
      <td>(StrOpt) Endpoint type for swift client requests</td>
    </tr>
  </table>
  <table>
    <caption>New default values</caption>
    <col width="33%"/>
    <col width="33%"/>
    <col width="33%"/>
    <thead>
      <tr>
        <td>Option</td>
        <td>Previous default value</td>
        <td>New default value</td>
      </tr>
    </thead>
    <tr>
      <td>[DEFAULT] default_log_levels</td>
      <td>amqplib=WARN, qpid.messaging=INFO, stevedore=INFO, eventlet.wsgi.server=WARN, sqlalchemy=WARN, boto=WARN, suds=INFO, keystone=INFO, paramiko=WARN, requests=WARN, iso8601=WARN, oslo_messaging=INFO</td>
      <td>amqplib=WARN, qpid.messaging=INFO, stevedore=INFO, eventlet.wsgi.server=WARN, sqlalchemy=WARN, boto=WARN, suds=INFO, keystone=INFO, paramiko=WARN, requests=WARN, iso8601=WARN, oslo_messaging=INFO, neutronclient=INFO</td>
    </tr>
    <tr>
      <td>[DEFAULT] infrastructure_engine</td>
      <td>direct</td>
      <td>heat</td>
    </tr>
    <tr>
      <td>[DEFAULT] logging_exception_prefix</td>
      <td>%(asctime)s.%(msecs)03d %(process)d TRACE %(name)s %(instance)s</td>
      <td>%(asctime)s.%(msecs)03d %(process)d ERROR %(name)s %(instance)s</td>
    </tr>
    <tr>
      <td>[DEFAULT] rpc_zmq_matchmaker</td>
      <td>local</td>
      <td>redis</td>
    </tr>
    <tr>
      <td>[DEFAULT] use_syslog_rfc_format</td>
      <td>False</td>
      <td>True</td>
    </tr>
    <tr>
      <td>[DEFAULT] verbose</td>
      <td>False</td>
      <td>True</td>
    </tr>
    <tr>
      <td>[matchmaker_redis] password</td>
      <td>None</td>
      <td></td>
    </tr>
    <tr>
      <td>[oslo_messaging_rabbit] heartbeat_timeout_threshold</td>
      <td>0</td>
      <td>60</td>
    </tr>
  </table>
  <table>
    <caption>Deprecated options</caption>
    <col width="50%"/>
    <col width="50%"/>
    <thead>
      <tr>
        <td>Deprecated option</td>
        <td>New Option</td>
      </tr>
    </thead>
    <tr>
      <td>[DEFAULT] rpc_thread_pool_size</td>
      <td>[DEFAULT] executor_thread_pool_size</td>
    </tr>
    <tr>
      <td>[DEFAULT] log_format</td>
      <td>None</td>
    </tr>
    <tr>
      <td>[DEFAULT] use_syslog</td>
      <td>None</td>
    </tr>
  </table>
</section>
