<?xml version='1.0' encoding='UTF-8'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="trove-conf-changes-liberty">
  <!-- Warning: Do not edit this file. It is automatically generated and your changes will be overwritten. The tool to do so lives in the openstack-doc-tools repository. -->
  <title>New, updated, and deprecated options in Liberty for Database service</title>
  <table>
    <caption>New options</caption>
    <col width="50%"/>
    <col width="50%"/>
    <thead>
      <tr>
        <td>Option = default value</td>
        <td>(Type) Help string</td>
      </tr>
    </thead>
    <tr>
      <td>[DEFAULT] executor_thread_pool_size = 64</td>
      <td>(IntOpt) Size of executor thread pool.</td>
    </tr>
    <tr>
      <td>[DEFAULT] exists_notification_interval = 3600</td>
      <td>(IntOpt) Seconds to wait between pushing events.</td>
    </tr>
    <tr>
      <td>[DEFAULT] nova_proxy_admin_tenant_id = </td>
      <td>(StrOpt) Admin tenant ID used to connect to Nova.</td>
    </tr>
    <tr>
      <td>[DEFAULT] password = </td>
      <td>(StrOpt) Password for Redis server (optional).</td>
    </tr>
    <tr>
      <td>[DEFAULT] port = 6379</td>
      <td>(IntOpt) Use this port to connect to redis host.</td>
    </tr>
    <tr>
      <td>[DEFAULT] rpc_conn_pool_size = 30</td>
      <td>(IntOpt) Size of RPC connection pool.</td>
    </tr>
    <tr>
      <td>[DEFAULT] rpc_poll_timeout = 1</td>
      <td>(IntOpt) The default number of seconds that poll should wait. Poll raises timeout exception when timeout expired.</td>
    </tr>
    <tr>
      <td>[DEFAULT] rpc_zmq_all_req_rep = True</td>
      <td>(BoolOpt) Use REQ/REP pattern for all methods CALL/CAST/FANOUT.</td>
    </tr>
    <tr>
      <td>[DEFAULT] rpc_zmq_concurrency = eventlet</td>
      <td>(StrOpt) Type of concurrency used. Either "native" or "eventlet"</td>
    </tr>
    <tr>
      <td>[DEFAULT] timeout_wait_for_service = 120</td>
      <td>(IntOpt) Maximum time (in seconds) to wait for a service to become alive.</td>
    </tr>
    <tr>
      <td>[DEFAULT] watch_log_file = False</td>
      <td>(BoolOpt) (Optional) Uses logging handler designed to watch file system. When log file is moved or removed this handler will open a new log file with specified path instantaneously. It makes sense only if log-file option is specified and Linux platform is used. This option is ignored if log_config_append is set.</td>
    </tr>
    <tr>
      <td>[DEFAULT] zmq_use_broker = True</td>
      <td>(BoolOpt) Shows whether zmq-messaging uses broker or not.</td>
    </tr>
    <tr>
      <td>[cassandra] root_controller = trove.extensions.common.service.DefaultRootController</td>
      <td>(StrOpt) Root controller implementation for cassandra.</td>
    </tr>
    <tr>
      <td>[couchbase] root_controller = trove.extensions.common.service.DefaultRootController</td>
      <td>(StrOpt) Root controller implementation for couchbase.</td>
    </tr>
    <tr>
      <td>[couchdb] root_controller = trove.extensions.common.service.DefaultRootController</td>
      <td>(StrOpt) Root controller implementation for couchdb.</td>
    </tr>
    <tr>
      <td>[db2] root_controller = trove.extensions.common.service.DefaultRootController</td>
      <td>(StrOpt) Root controller implementation for db2.</td>
    </tr>
    <tr>
      <td>[keystone_authtoken] region_name = None</td>
      <td>(StrOpt) The region in which the identity server can be found.</td>
    </tr>
    <tr>
      <td>[mariadb] backup_incremental_strategy = {'InnoBackupEx': 'InnoBackupExIncremental'}</td>
      <td>(DictOpt) Incremental Backup Runner based on the default strategy. For strategies that do not implement an incremental backup, the runner will use the default full backup.</td>
    </tr>
    <tr>
      <td>[mariadb] backup_namespace = trove.guestagent.strategies.backup.mysql_impl</td>
      <td>(StrOpt) Namespace to load backup strategies from.</td>
    </tr>
    <tr>
      <td>[mariadb] backup_strategy = InnoBackupEx</td>
      <td>(StrOpt) Default strategy to perform backups.</td>
    </tr>
    <tr>
      <td>[mariadb] device_path = /dev/vdb</td>
      <td>(StrOpt) Device path for volume if volume support is enabled.</td>
    </tr>
    <tr>
      <td>[mariadb] mount_point = /var/lib/mysql</td>
      <td>(StrOpt) Filesystem path for mounting volumes if volume support is enabled.</td>
    </tr>
    <tr>
      <td>[mariadb] replication_namespace = trove.guestagent.strategies.replication.mysql_binlog</td>
      <td>(StrOpt) Namespace to load replication strategies from.</td>
    </tr>
    <tr>
      <td>[mariadb] replication_strategy = MysqlBinlogReplication</td>
      <td>(StrOpt) Default strategy for replication.</td>
    </tr>
    <tr>
      <td>[mariadb] restore_namespace = trove.guestagent.strategies.restore.mysql_impl</td>
      <td>(StrOpt) Namespace to load restore strategies from.</td>
    </tr>
    <tr>
      <td>[mariadb] root_controller = trove.extensions.common.service.DefaultRootController</td>
      <td>(StrOpt) Root controller implementation for mysql.</td>
    </tr>
    <tr>
      <td>[mariadb] root_on_create = False</td>
      <td>(BoolOpt) Enable the automatic creation of the root user for the service during instance-create. The generated password for the root user is immediately returned in the response of instance-create as the 'password' field.</td>
    </tr>
    <tr>
      <td>[mariadb] tcp_ports = 3306</td>
      <td>(ListOpt) List of TCP ports and/or port ranges to open in the security group (only applicable if trove_security_groups_support is True).</td>
    </tr>
    <tr>
      <td>[mariadb] udp_ports = </td>
      <td>(ListOpt) List of UDP ports and/or port ranges to open in the security group (only applicable if trove_security_groups_support is True).</td>
    </tr>
    <tr>
      <td>[mariadb] usage_timeout = 400</td>
      <td>(IntOpt) Maximum time (in seconds) to wait for a Guest to become active.</td>
    </tr>
    <tr>
      <td>[mariadb] volume_support = True</td>
      <td>(BoolOpt) Whether to provision a Cinder volume for datadir.</td>
    </tr>
    <tr>
      <td>[mongodb] add_members_timeout = 300</td>
      <td>(IntOpt) Maximum time to wait (in seconds) for a replica set initialization process to complete.</td>
    </tr>
    <tr>
      <td>[mongodb] configsvr_port = 27019</td>
      <td>(IntOpt) Port for instances running as config servers.</td>
    </tr>
    <tr>
      <td>[mongodb] ignore_dbs = admin, local, config</td>
      <td>(ListOpt) Databases to exclude when listing databases.</td>
    </tr>
    <tr>
      <td>[mongodb] ignore_users = admin.os_admin, admin.root</td>
      <td>(ListOpt) Users to exclude when listing users.</td>
    </tr>
    <tr>
      <td>[mongodb] mongodb_port = 27017</td>
      <td>(IntOpt) Port for mongod and mongos instances.</td>
    </tr>
    <tr>
      <td>[mongodb] root_controller = trove.extensions.common.service.DefaultRootController</td>
      <td>(StrOpt) Root controller implementation for mongodb.</td>
    </tr>
    <tr>
      <td>[mysql] root_controller = trove.extensions.common.service.DefaultRootController</td>
      <td>(StrOpt) Root controller implementation for mysql.</td>
    </tr>
    <tr>
      <td>[oslo_messaging_amqp] password = </td>
      <td>(StrOpt) Password for message broker authentication</td>
    </tr>
    <tr>
      <td>[oslo_messaging_amqp] sasl_config_dir = </td>
      <td>(StrOpt) Path to directory that contains the SASL configuration</td>
    </tr>
    <tr>
      <td>[oslo_messaging_amqp] sasl_config_name = </td>
      <td>(StrOpt) Name of configuration file (without .conf suffix)</td>
    </tr>
    <tr>
      <td>[oslo_messaging_amqp] sasl_mechanisms = </td>
      <td>(StrOpt) Space separated list of acceptable SASL mechanisms</td>
    </tr>
    <tr>
      <td>[oslo_messaging_amqp] username = </td>
      <td>(StrOpt) User name for message broker authentication</td>
    </tr>
    <tr>
      <td>[oslo_messaging_qpid] send_single_reply = False</td>
      <td>(BoolOpt) Send a single AMQP reply to call message. The current behaviour since oslo-incubator is to send two AMQP replies - first one with the payload, a second one to ensure the other has finished to send the payload. We are going to remove it in the N release, but we must keep backward compatible at the same time. This option provides such compatibility - it defaults to False in Liberty and can be turned on for early adopters with new installations or for testing. This option will be removed in the Mitaka release.</td>
    </tr>
    <tr>
      <td>[oslo_messaging_rabbit] kombu_reconnect_timeout = 60</td>
      <td>(IntOpt) How long to wait before considering a reconnect attempt to have failed. This value should not be longer than rpc_response_timeout.</td>
    </tr>
    <tr>
      <td>[oslo_messaging_rabbit] send_single_reply = False</td>
      <td>(BoolOpt) Send a single AMQP reply to call message. The current behaviour since oslo-incubator is to send two AMQP replies - first one with the payload, a second one to ensure the other has finished to send the payload. We are going to remove it in the N release, but we must keep backward compatible at the same time. This option provides such compatibility - it defaults to False in Liberty and can be turned on for early adopters with new installations or for testing. This option will be removed in the Mitaka release.</td>
    </tr>
    <tr>
      <td>[percona] root_controller = trove.extensions.common.service.DefaultRootController</td>
      <td>(StrOpt) Root controller implementation for percona.</td>
    </tr>
    <tr>
      <td>[postgresql] root_controller = trove.extensions.common.service.DefaultRootController</td>
      <td>(StrOpt) Root controller implementation for postgresql.</td>
    </tr>
    <tr>
      <td>[pxc] api_strategy = trove.common.strategies.cluster.experimental.pxc.api.PXCAPIStrategy</td>
      <td>(StrOpt) Class that implements datastore-specific API logic.</td>
    </tr>
    <tr>
      <td>[pxc] backup_incremental_strategy = {'InnoBackupEx': 'InnoBackupExIncremental'}</td>
      <td>(DictOpt) Incremental Backup Runner based on the default strategy. For strategies that do not implement an incremental backup, the runner will use the default full backup.</td>
    </tr>
    <tr>
      <td>[pxc] backup_namespace = trove.guestagent.strategies.backup.mysql_impl</td>
      <td>(StrOpt) Namespace to load backup strategies from.</td>
    </tr>
    <tr>
      <td>[pxc] backup_strategy = InnoBackupEx</td>
      <td>(StrOpt) Default strategy to perform backups.</td>
    </tr>
    <tr>
      <td>[pxc] cluster_support = True</td>
      <td>(BoolOpt) Enable clusters to be created and managed.</td>
    </tr>
    <tr>
      <td>[pxc] device_path = /dev/vdb</td>
      <td>(StrOpt) Device path for volume if volume support is enabled.</td>
    </tr>
    <tr>
      <td>[pxc] guestagent_strategy = trove.common.strategies.cluster.experimental.pxc.guestagent.PXCGuestAgentStrategy</td>
      <td>(StrOpt) Class that implements datastore-specific Guest Agent API logic.</td>
    </tr>
    <tr>
      <td>[pxc] ignore_users = os_admin, root, clusterrepuser</td>
      <td>(ListOpt) Users to exclude when listing users.</td>
    </tr>
    <tr>
      <td>[pxc] min_cluster_member_count = 3</td>
      <td>(IntOpt) Minimum number of members in PXC cluster.</td>
    </tr>
    <tr>
      <td>[pxc] mount_point = /var/lib/mysql</td>
      <td>(StrOpt) Filesystem path for mounting volumes if volume support is enabled.</td>
    </tr>
    <tr>
      <td>[pxc] replication_namespace = trove.guestagent.strategies.replication.mysql_gtid</td>
      <td>(StrOpt) Namespace to load replication strategies from.</td>
    </tr>
    <tr>
      <td>[pxc] replication_strategy = MysqlGTIDReplication</td>
      <td>(StrOpt) Default strategy for replication.</td>
    </tr>
    <tr>
      <td>[pxc] replication_user = slave_user</td>
      <td>(StrOpt) Userid for replication slave.</td>
    </tr>
    <tr>
      <td>[pxc] restore_namespace = trove.guestagent.strategies.restore.mysql_impl</td>
      <td>(StrOpt) Namespace to load restore strategies from.</td>
    </tr>
    <tr>
      <td>[pxc] root_controller = trove.extensions.common.service.DefaultRootController</td>
      <td>(StrOpt) Root controller implementation for pxc.</td>
    </tr>
    <tr>
      <td>[pxc] root_on_create = False</td>
      <td>(BoolOpt) Enable the automatic creation of the root user for the service during instance-create. The generated password for the root user is immediately returned in the response of instance-create as the 'password' field.</td>
    </tr>
    <tr>
      <td>[pxc] taskmanager_strategy = trove.common.strategies.cluster.experimental.pxc.taskmanager.PXCTaskManagerStrategy</td>
      <td>(StrOpt) Class that implements datastore-specific task manager logic.</td>
    </tr>
    <tr>
      <td>[pxc] tcp_ports = 3306, 4444, 4567, 4568</td>
      <td>(ListOpt) List of TCP ports and/or port ranges to open in the security group (only applicable if trove_security_groups_support is True).</td>
    </tr>
    <tr>
      <td>[pxc] udp_ports = </td>
      <td>(ListOpt) List of UDP ports and/or port ranges to open in the security group (only applicable if trove_security_groups_support is True).</td>
    </tr>
    <tr>
      <td>[pxc] usage_timeout = 450</td>
      <td>(IntOpt) Maximum time (in seconds) to wait for a Guest to become active.</td>
    </tr>
    <tr>
      <td>[pxc] volume_support = True</td>
      <td>(BoolOpt) Whether to provision a Cinder volume for datadir.</td>
    </tr>
    <tr>
      <td>[redis] api_strategy = trove.common.strategies.cluster.experimental.redis.api.RedisAPIStrategy</td>
      <td>(StrOpt) Class that implements datastore-specific API logic.</td>
    </tr>
    <tr>
      <td>[redis] cluster_support = True</td>
      <td>(BoolOpt) Enable clusters to be created and managed.</td>
    </tr>
    <tr>
      <td>[redis] guestagent_strategy = trove.common.strategies.cluster.experimental.redis.guestagent.RedisGuestAgentStrategy</td>
      <td>(StrOpt) Class that implements datastore-specific Guest Agent API logic.</td>
    </tr>
    <tr>
      <td>[redis] replication_namespace = trove.guestagent.strategies.replication.experimental.redis_sync</td>
      <td>(StrOpt) Namespace to load replication strategies from.</td>
    </tr>
    <tr>
      <td>[redis] root_controller = trove.extensions.common.service.DefaultRootController</td>
      <td>(StrOpt) Root controller implementation for redis.</td>
    </tr>
    <tr>
      <td>[redis] taskmanager_strategy = trove.common.strategies.cluster.experimental.redis.taskmanager.RedisTaskManagerStrategy</td>
      <td>(StrOpt) Class that implements datastore-specific task manager logic.</td>
    </tr>
    <tr>
      <td>[vertica] root_controller = trove.extensions.vertica.service.VerticaRootController</td>
      <td>(StrOpt) Root controller implementation for Vertica.</td>
    </tr>
  </table>
  <table>
    <caption>New default values</caption>
    <col width="33%"/>
    <col width="33%"/>
    <col width="33%"/>
    <thead>
      <tr>
        <td>Option</td>
        <td>Previous default value</td>
        <td>New default value</td>
      </tr>
    </thead>
    <tr>
      <td>[DEFAULT] cluster_usage_timeout</td>
      <td>675</td>
      <td>36000</td>
    </tr>
    <tr>
      <td>[DEFAULT] default_log_levels</td>
      <td>amqp=WARN, amqplib=WARN, boto=WARN, qpid=WARN, sqlalchemy=WARN, suds=INFO, oslo.messaging=INFO, iso8601=WARN, requests.packages.urllib3.connectionpool=WARN, urllib3.connectionpool=WARN, websocket=WARN, keystonemiddleware=WARN, routes.middleware=WARN, stevedore=WARN</td>
      <td>amqp=WARN, amqplib=WARN, boto=WARN, qpid=WARN, sqlalchemy=WARN, suds=INFO, oslo.messaging=INFO, iso8601=WARN, requests.packages.urllib3.connectionpool=WARN, urllib3.connectionpool=WARN, websocket=WARN, requests.packages.urllib3.util.retry=WARN, urllib3.util.retry=WARN, keystonemiddleware=WARN, routes.middleware=WARN, stevedore=WARN, taskflow=WARN</td>
    </tr>
    <tr>
      <td>[DEFAULT] ignore_dbs</td>
      <td>lost+found, #mysql50#lost+found, mysql, information_schema</td>
      <td>mysql, information_schema, performance_schema</td>
    </tr>
    <tr>
      <td>[DEFAULT] logging_exception_prefix</td>
      <td>%(asctime)s.%(msecs)03d %(process)d TRACE %(name)s %(instance)s</td>
      <td>%(asctime)s.%(msecs)03d %(process)d ERROR %(name)s %(instance)s</td>
    </tr>
    <tr>
      <td>[DEFAULT] notification_service_id</td>
      <td>{'vertica': 'a8d805ae-a3b2-c4fd-gb23-b62cee5201ae', 'db2': 'e040cd37-263d-4869-aaa6-c62aa97523b5', 'postgresql': 'ac277e0d-4f21-40aa-b347-1ea31e571720', 'mysql': '2f3ff068-2bfb-4f70-9a9d-a6bb65bc084b', 'couchbase': 'fa62fe68-74d9-4779-a24e-36f19602c415', 'mongodb': 'c8c907af-7375-456f-b929-b637ff9209ee', 'couchdb': 'f0a9ab7b-66f7-4352-93d7-071521d44c7c', 'redis': 'b216ffc5-1947-456c-a4cf-70f94c05f7d0', 'cassandra': '459a230d-4e97-4344-9067-2a54a310b0ed'}</td>
      <td>{'mongodb': 'c8c907af-7375-456f-b929-b637ff9209ee', 'percona': 'fd1723f5-68d2-409c-994f-a4a197892a17', 'mysql': '2f3ff068-2bfb-4f70-9a9d-a6bb65bc084b', 'pxc': '75a628c3-f81b-4ffb-b10a-4087c26bc854', 'db2': 'e040cd37-263d-4869-aaa6-c62aa97523b5', 'cassandra': '459a230d-4e97-4344-9067-2a54a310b0ed', 'mariadb': '7a4f82cc-10d2-4bc6-aadc-d9aacc2a3cb5', 'postgresql': 'ac277e0d-4f21-40aa-b347-1ea31e571720', 'couchbase': 'fa62fe68-74d9-4779-a24e-36f19602c415', 'couchdb': 'f0a9ab7b-66f7-4352-93d7-071521d44c7c', 'redis': 'b216ffc5-1947-456c-a4cf-70f94c05f7d0', 'vertica': 'a8d805ae-a3b2-c4fd-gb23-b62cee5201ae'}</td>
    </tr>
    <tr>
      <td>[DEFAULT] report_interval</td>
      <td>10</td>
      <td>30</td>
    </tr>
    <tr>
      <td>[DEFAULT] rpc_zmq_matchmaker</td>
      <td>local</td>
      <td>redis</td>
    </tr>
    <tr>
      <td>[DEFAULT] usage_timeout</td>
      <td>600</td>
      <td>900</td>
    </tr>
    <tr>
      <td>[DEFAULT] use_syslog_rfc_format</td>
      <td>False</td>
      <td>True</td>
    </tr>
    <tr>
      <td>[DEFAULT] verbose</td>
      <td>False</td>
      <td>True</td>
    </tr>
    <tr>
      <td>[matchmaker_redis] password</td>
      <td>None</td>
      <td></td>
    </tr>
    <tr>
      <td>[mongodb] backup_namespace</td>
      <td>None</td>
      <td>trove.guestagent.strategies.backup.experimental.mongo_impl</td>
    </tr>
    <tr>
      <td>[mongodb] backup_strategy</td>
      <td>None</td>
      <td>MongoDump</td>
    </tr>
    <tr>
      <td>[mongodb] restore_namespace</td>
      <td>None</td>
      <td>trove.guestagent.strategies.restore.experimental.mongo_impl</td>
    </tr>
    <tr>
      <td>[oslo_messaging_rabbit] heartbeat_timeout_threshold</td>
      <td>0</td>
      <td>60</td>
    </tr>
    <tr>
      <td>[redis] backup_namespace</td>
      <td>None</td>
      <td>trove.guestagent.strategies.backup.experimental.redis_impl</td>
    </tr>
    <tr>
      <td>[redis] backup_strategy</td>
      <td>None</td>
      <td>RedisBackup</td>
    </tr>
    <tr>
      <td>[redis] replication_strategy</td>
      <td>None</td>
      <td>RedisSyncReplication</td>
    </tr>
    <tr>
      <td>[redis] restore_namespace</td>
      <td>None</td>
      <td>trove.guestagent.strategies.restore.experimental.redis_impl</td>
    </tr>
    <tr>
      <td>[redis] tcp_ports</td>
      <td>6379</td>
      <td>6379, 16379</td>
    </tr>
    <tr>
      <td>[redis] volume_support</td>
      <td>False</td>
      <td>True</td>
    </tr>
  </table>
  <table>
    <caption>Deprecated options</caption>
    <col width="50%"/>
    <col width="50%"/>
    <thead>
      <tr>
        <td>Deprecated option</td>
        <td>New Option</td>
      </tr>
    </thead>
    <tr>
      <td>[DEFAULT] use_syslog</td>
      <td>None</td>
    </tr>
    <tr>
      <td>[DEFAULT] rpc_thread_pool_size</td>
      <td>[DEFAULT] executor_thread_pool_size</td>
    </tr>
    <tr>
      <td>[DEFAULT] log_format</td>
      <td>None</td>
    </tr>
  </table>
</section>
