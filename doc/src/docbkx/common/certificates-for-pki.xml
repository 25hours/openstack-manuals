<?xml version="1.0" encoding="UTF-8"?>
<section xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
    xml:id="certificates-for-pki">
    <title>Certificates for PKI</title>
    <para> PKI stands for Public Key Infrastructure. Tokens are
        documents, cryptographically signed using the X509 standard.
        In order to work correctly token generation requires a
        public/private key pair. The public key must be signed in an
        X509 certificate, and the certificate used to sign it must be
        available as Certificate Authority (CA) certificate. These
        files can be generated either using the
            <command>keystone-manage</command> utility, or externally
        generated. The files need to be in the locations specified by
        the top level Keystone configuration file as specified in the
        above section. Additionally, the private key should only be
        readable by the system user that will run Keystone. </para>
    <warning>
        <para> The certificates can be world readable, but the private
            key cannot be. The private key should only be readable by
            the account that is going to sign tokens. When generating
            files with the <command>keystone-mange pki_setup</command>
            command, your best option is to run as the pki user. If
            you run nova-manage as root, you can append
            --keystone-user and --keystone-group parameters to set the
            username and group keystone is going to run under.</para>
    </warning>
    <para>The values that specify where to read the certificates are
        under the <literal>[signing]</literal> section of the
        configuration file. The configuration values are: </para>
    <itemizedlist>
        <listitem>
            <para>
                <literal>token_format</literal> - Determines the
                algorithm used to generate tokens. Can be either
                    <literal>UUID</literal> or <literal>PKI</literal>.
                Defaults to <literal>PKI</literal>.</para>
        </listitem>
        <listitem>
            <para>
                <literal>certfile</literal> - Location of certificate
                used to verify tokens. Default is
                    <literal>/etc/keystone/ssl/certs/signing_cert.pem</literal>.</para>
        </listitem>
        <listitem>
            <para>
                <literal>keyfile</literal> - Location of private key
                used to sign tokens. Default is
                    <literal>/etc/keystone/ssl/private/signing_key.pem</literal>.</para>
        </listitem>
        <listitem>
            <para>
                <literal>ca_certs</literal> - Location of certificate
                for the authority that issued the above certificate.
                Default is
                    <literal>/etc/keystone/ssl/certs/ca.pem</literal>.</para>
        </listitem>
        <listitem>
            <para>
                <literal>key_size</literal> - Default is
                    <literal>1024</literal>.</para>
        </listitem>
        <listitem>
            <para>
                <literal>valid_days</literal> - Default is
                    <literal>3650</literal>.</para>
        </listitem>
        <listitem>
            <para>
                <literal>ca_password</literal> - Password required to
                read the <literal>ca_file</literal>. Default is
                    <literal>None</literal>.</para>
        </listitem>
    </itemizedlist>
    <section xml:id="signing-certificate-issued-by-external-ca">
        <title>Signing Certificate Issued by External CA</title>
        <para> You may use a signing certificate issued by an external
            CA instead of generated by
                <command>keystone-manage</command>. However,
            certificate issued by external CA must satisfy the
            following conditions: </para>
        <itemizedlist>
            <listitem>
                <para> all certificate and key files must be in
                    Privacy Enhanced Mail (PEM) format </para>
            </listitem>
            <listitem>
                <para> private key files must not be protected by a
                    password </para>
            </listitem>
        </itemizedlist>
        <para> When using signing certificate issued by an external
            CA, you do not need to specify
            <literal>key_size</literal>,
            <literal>valid_days</literal>, and
                <literal>ca_password</literal> as they will be
            ignored. </para>
        <para> The basic workflow for using a signing certificate
            issued by an external CA involves: </para>
        <orderedlist numeration="arabic">
            <listitem>
                <para> Request Signing Certificate from External CA
                </para>
            </listitem>
            <listitem>
                <para> Convert certificate and private key to PEM if
                    needed </para>
            </listitem>
            <listitem>
                <para> Install External Signing Certificate </para>
            </listitem>
        </orderedlist>
    </section>
    <section xml:id="request-signing-certificate-from-external-ca">
        <title>Request Signing Certificate from External CA</title>
        <para> One way to request a signing certificate from an
            external CA is to first generate a PKCS #10 Certificate
            Request Syntax (CRS) using OpenSSL CLI. </para>
        <para> First create a certificate request configuration file
            (e.g. <literal>cert_req.conf</literal>): </para>
        <screen>
[ req ]
default_bits            = 1024
default_keyfile         = keystonekey.pem
default_md              = sha1

prompt                  = no
distinguished_name      = distinguished_name

[ distinguished_name ]
countryName             = US
stateOrProvinceName     = CA
localityName            = Sunnyvale
organizationName        = OpenStack
organizationalUnitName  = Keystone
commonName              = Keystone Signing
emailAddress            = keystone@openstack.org
</screen>
        <para> Then generate a CRS with OpenSSL CLI. <emphasis
                role="strong">Do not encrypt the generated private
                key. Must use the -nodes option.</emphasis>
        </para>
        <para> For example: </para>
        <screen>
openssl req -newkey rsa:1024 -keyout signing_key.pem -keyform PEM -out signing_cert_req.pem -outform PEM -config cert_req.conf -nodes
</screen>
        <para> If everything is successfully, you should end up with
                <literal>signing_cert_req.pem</literal> and
                <literal>signing_key.pem</literal>. Send
                <literal>signing_cert_req.pem</literal> to your CA to
            request a token signing certificate and make sure to ask
            the certificate to be in PEM format. Also, make sure your
            trusted CA certificate chain is also in PEM format.
        </para>
    </section>
    <section xml:id="install-external-signing-certificate">
        <title>Install External Signing Certificate</title>
        <para> Assuming you have the following already: </para>
        <itemizedlist>
            <listitem>
                <para>
                    <literal>signing_cert.pem</literal> - (Keystone
                    token) signing certificate in PEM format </para>
            </listitem>
            <listitem>
                <para>
                    <literal>signing_key.pem</literal> - corresponding
                    (non-encrypted) private key in PEM format </para>
            </listitem>
            <listitem>
                <para>
                    <literal>cacert.pem</literal> - trust CA
                    certificate chain in PEM format </para>
            </listitem>
        </itemizedlist>
        <para> Copy the above to your certificate directory. For
            example: </para>
        <screen>
mkdir -p /etc/keystone/ssl/certs
cp signing_cert.pem /etc/keystone/ssl/certs/
cp signing_key.pem /etc/keystone/ssl/certs/
cp cacert.pem /etc/keystone/ssl/certs/
chmod -R 700 /etc/keystone/ssl/certs
</screen>
        <note>
            <para> Make sure the certificate directory is only
                accessible by root. </para>
        </note>
        <para> If your certificate directory path is different from
            the default <literal>/etc/keystone/ssl/certs</literal>,
            make sure it is reflected in the
                <literal>[signing]</literal> section of the
            configuration file. </para>
    </section>
</section>
