<?xml version="1.0" encoding="utf-8"?>
<chapter xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
  xml:id="ch_getting-started-with-openstack">
  <title>Getting Started with OpenStack</title>
  <?dbhtml stop-chunking?>
  <para>OpenStack is a project produced by developers and cloud
    computing technologists from around the world. The project, which
    represents an open source cloud computing platform for all types
    of clouds, aims to be simple to implement, massively scalable, and
    feature rich.</para>
  <para>The technology consists of a series of interrelated services
    delivering various components for an Infrastructure as a Service
    (IaaS) solution. Each service offers an application programming
    interface (API) that facilitates this integration.</para>
  <section xml:id="openstack-services">
    <title>OpenStack services</title>
    <para>Any OpenStack service can use the API for another service.
      For the most part, these APIs are the same APIs that are
      available to cloud end users. As of the Havana release,
      OpenStack offers the following services: Compute, object store,
      identity, networking, block storage,image, metering, and REST
      API.</para>
    <section xml:id="compute-service">
      <title>Compute</title>
      <para>The most complicated and distributed component of
        OpenStack, Compute uses many processes to fulfill end user
        requests to launch virtual machines. The main modules are
        implemented in Python.</para>
      <para>The following functional areas use the following
        components:</para>

      <itemizedlist>
        <title>API</title>
        <listitem>
          <para><systemitem class="service">nova-api</systemitem>
            service. Accepts and responds to end user compute API
            calls. It supports the OpenStack Compute API, the Amazon
            EC2 API, and a special Admin API for privileged users to
            perform administrative actions. It also initiates most
            orchestration activities, such as running an instance, and
            enforces some policies.</para>
        </listitem>
        <listitem>
          <para><systemitem class="service"
              >nova-api-metadata</systemitem> service. Accepts
            metadata requests from instances. For details, see <link
              xlink:href="http://docs.openstack.org/trunk/openstack-compute/admin/content/metadata-service.html"
              >Metadata service</link>. The <systemitem
              class="service">nova-api-metadata</systemitem> service
            is generally only used when you run in multi-host mode
            with <systemitem class="service">nova-network</systemitem>
            installations.</para>
        </listitem>
      </itemizedlist>

      <itemizedlist>
        <title>Compute core</title>
        <listitem>
          <para><systemitem class="service">nova-compute</systemitem>
            process. Primarily a worker daemon that creates and
            terminates virtual machine instances through hypervisor's
            APIs (XenAPI for XenServer/XCP, libvirt for KVM or QEMU,
            VMwareAPI for VMware, and so on). The process by which it
            does so is fairly complex but the basics are simple:
            accept actions from the queue and then perform a series of
            system commands (like launching a KVM instance) to carry
            them out while updating state in the database.</para>
        </listitem>
        <listitem>
          <para><systemitem class="service"
              >nova-scheduler</systemitem> process. Conceptually the
            simplest piece of code in OpenStack Nova. This code takes
            a virtual machine instance request from the queue and
            determines where it should run. Specifically, it
            determines on which compute server host it should
            run.</para>
        </listitem>
        <listitem>
          <para><systemitem class="service"
              >nova-conductor</systemitem> module. Introduced in the
            Grizzly release, mediates interactions between <systemitem
              class="service">nova-compute</systemitem> and the
            database. It aims to eliminate direct accesses to the
            cloud database made by <systemitem class="service"
              >nova-compute</systemitem>. The <systemitem
              class="service">nova-conductor</systemitem> module
            scales horizontally but do not deploy it on any nodes
            where <systemitem class="service"
              >nova-compute</systemitem> runs. For more information,
            see <link
              xlink:href="http://russellbryantnet.wordpress.com/2012/11/19/a-new-nova-service-nova-conductor/"
              >A new Nova service: nova-conductor</link>.</para>
        </listitem>
      </itemizedlist>

      <itemizedlist>
        <title>Networking for VMs</title>
        <listitem>
          <para><systemitem class="service">nova-network</systemitem>
            worker daemon. Similar to <systemitem class="service"
              >nova-compute</systemitem>, it accepts networking tasks
            from the queue and performs tasks to manipulate the
            network, such as setting up bridging interfaces or
            changing iptables rules. This functionality is being
            migrated to OpenStack Networking, which is a separate
            OpenStack service.</para>
        </listitem>
        <listitem>
          <para><systemitem class="service"
              >nova-dhcpbridge</systemitem> script. Tracks IP address
            leases and records them in the database by using the
            dnsmasq dhcp-script facility. This functionality is also
            being migrated to OpenStack Networking. A different script
            is provided when you use OpenStack Networking, code-named
            Neutron.</para>
        </listitem>
      </itemizedlist>

      <itemizedlist>
        <title>Console interface</title>
        <listitem>
          <para><systemitem class="service"
              >nova-consoleauth</systemitem> daemon. Authorizes tokens
            for users that console proxies provide. See <systemitem
              class="service">nova-novncproxy</systemitem> and
              <systemitem class="service"
              >nova-xvpnvcproxy</systemitem>. This service must be
            running for console proxies to work. Many proxies of
            either type can be run against a single <systemitem
              class="service">nova-consoleauth</systemitem> service in
            a cluster configuration. For information, see <link
              xlink:href="http://docs.openstack.org/trunk/openstack-compute/admin/content/about-nova-consoleauth.html"
              >About nova-consoleauth</link>.</para>
        </listitem>
        <listitem>
          <para><systemitem class="service"
              >nova-novncproxy</systemitem> daemon. Provides a proxy
            for accessing running instances through a VNC connection.
            It supports browser-based novnc clients.</para>
        </listitem>
        <listitem>
          <para><systemitem class="service">nova-console</systemitem>
            daemon. Deprecated for use with Grizzly. Instead, the
              <systemitem class="service"
              >nova-xvpnvncproxy</systemitem> is used.</para>
        </listitem>
        <listitem>
          <para><systemitem class="service"
              >nova-xvpnvncproxy</systemitem> daemon. A proxy for
            accessing running instances through a VNC connection. It
            supports a Java client specifically designed for
            OpenStack.</para>
        </listitem>
        <listitem>
          <para><systemitem class="service">nova-cert</systemitem>
            daemon. Manages x509 certificates.</para>
        </listitem>
      </itemizedlist>

      <itemizedlist>
        <title>Image Management (EC2 scenario)</title>
        <listitem>
          <para><systemitem class="service"
              >nova-objectstore</systemitem> daemon. Provides an S3
            interface for registering images with the Image Service.
            Mainly used for installations that must support euca2ools.
            The euca2ools tools talk to <systemitem class="service"
              >nova-objectstore</systemitem> in “S3 language” and
              <systemitem class="service"
              >nova-objectstore</systemitem> translates S3 requests
            into Image Service requests.</para>
        </listitem>
        <listitem>
          <para>euca2ools client. Though not an OpenStack module,
            OpenStack can support it. It’s a set of command line
            interpreter commands for managing cloud resources.
            Provided that <systemitem class="service"
              >nova-api</systemitem> is configured to support EC2
            interface, you can use euca2ools to issue cloud management
            commands. For more information, see the <link
              xlink:href="http://www.eucalyptus.com/eucalyptus-cloud/documentation/2.0"
              >Eucalyptus 2.0 Documentation</link>.</para>
        </listitem>
      </itemizedlist>

      <itemizedlist>
        <title>Command Line Interpreter/Interfaces</title>
        <listitem>
          <para>nova client. Submits commands as a tenant
            administrator or as a cloud user.</para>
        </listitem>
        <listitem>
          <para>nova-manage client. Submits commands as a cloud
            administrator.</para>
        </listitem>
      </itemizedlist>

      <itemizedlist>
        <title>Other components</title>
        <listitem>
          <para>The queue. Provides a central hub for passing messages
            between daemons. Usually implemented with <link
              xlink:href="http://www.rabbitmq.com/">RabbitMQ</link>,
            but could be any AMPQ message queue, such as <link
              xlink:href="http://qpid.apache.org/">Apache Qpid</link>)
            or <link xlink:href="http://www.zeromq.org/">Zero
              MQ</link>.</para>
        </listitem>
        <listitem>
          <para>SQL database. Stores most of the build-time and
            run-time state for a cloud infrastructure. Includes the
            instance types that are available for use, instances in
            use, available networks, and projects. Theoretically,
            OpenStack Nova can support any database that SQL-Alchemy
            supports. However, the following databases are widely
            used: <itemizedlist>
              <listitem>
                <para>sqlite3 databases. Appropriate for test and
                  development work.</para>
              </listitem>
              <listitem>
                <para>MySQL.</para>
              </listitem>
              <listitem>
                <para>PostgreSQL.</para>
              </listitem>
            </itemizedlist></para>
        </listitem>
      </itemizedlist>
      <para>Nova interacts with many other OpenStack services:
        Identity Service for authentication, Image Service for images,
        and the OpenStack dashboard for a web interface. The Image
        Service interactions are central. The API process can upload
        and query the Image Service, while <systemitem class="service"
          >nova-compute</systemitem> downloads images to use to launch
        instances.</para>
    </section>
    <section xml:id="object-storage-service">
      <title>Object Storage</title>
      <para>Provides a distributed architecture to prevent a single
        point of failure and to scale horizontally.</para>
      <para>Includes the following components:</para>
      <itemizedlist>
        <listitem>
          <para><systemitem class="service"
              >swift-proxy-server</systemitem>. This proxy server
            accepts incoming requests through the OpenStack Object API
            or raw HTTP. It accepts files to upload, modifications to
            metadata or container creation. It also serves file or
            container listings to web browsers. To improve
            performance, the proxy server can use an optional cache
            usually deployed with memcache.</para>
        </listitem>
        <listitem>
          <para>Account servers. Manage accounts defined with the
            object storage service.</para>
        </listitem>
        <listitem>
          <para>Container servers. Manage a mapping of containers, or
            folders, within the object store service.</para>
        </listitem>
        <listitem>
          <para>Object servers. Manage actual objects, such as files,
            on the storage nodes.</para>
        </listitem>
        <listitem>
          <para>A number of periodic processes. Perform housekeeping
            tasks on the large data store. The replication services
            ensure consistency and availability through the cluster.
            Other periodic processes include auditors, updaters, and
            reapers.</para>
        </listitem>
      </itemizedlist>
      <para>Configurable WSGI middleware, which is usually the
        Identity Service, handles authentication.</para>
      <xi:include href="section_storage-concepts.xml"/>
    </section>
    <section xml:id="identity-service">
      <title>Identity Service</title>
      <para>Provides a single point of integration for OpenStack
        policy, catalog, token, and authentication.</para>
      <itemizedlist>
        <listitem>
          <para><systemitem class="service">keystone</systemitem>
            client. Handles API requests as well as providing
            configurable catalog, policy, token and identity
            services.</para>
        </listitem>
        <listitem>
          <para>Identity Service functions. Each has a pluggable
            backend that allows different ways to use the particular
            service. Most support standard backends like LDAP or SQL,
            as well as Key Value Stores (KVS).</para>
        </listitem>
      </itemizedlist>
      <para>Most people customize the Identity Service for their
        current authentication services.</para>
    </section>
    <section xml:id="networking-service">
      <title>Networking</title>
      <para>Provides network-connectivity-as-a-service between
        interface devices that are managed by other OpenStack
        services, usually Compute. Enables users to create their own
        networks and attach interfaces to them. Like many OpenStack
        services, OpenStack Networking is highly configurable due to
        its plug-in architecture. These plug-ins accommodate different
        networking equipment and software. As such, the architecture
        and deployment varies dramatically. Includes the following
        components:</para>
      <itemizedlist>
        <listitem>
          <para><systemitem class="service"
              >neutron-server</systemitem>. Accepts API requests and
            then routes them to the appropriate OpenStack Networking
            plugin for action.</para>
        </listitem>
        <listitem>
          <para>OpenStack Networking plugins and agents. Plugs and
            unplugs ports, creates networks or subnets and IP
            addressing. These plugins and agents differ depending on
            the vendor and technologies used in the particular cloud.
            OpenStack Networking ships with plugins and agents for
            Cisco virtual and physical switches, Nicira NVP product,
            NEC OpenFlow products, Open vSwitch, Linux bridging, and
            the Ryu Network Operating System.</para>
          <para>The common agents are L3 (layer 3), DHCP (dynamic host
            IP addressing) and the specific plug-in agent.</para>
        </listitem>
        <listitem>
          <para>Messaging queue. Most OpenStack Networking
            installations make use of a messaging queue to route
            information between the neutron-server and various agents
            as well as a database to store networking state for
            particular plugins.</para>
        </listitem>
      </itemizedlist>
      <para>OpenStack Networking interacts mainly with OpenStack
        Compute, where it provides networks and connectivity for its
        instances.</para>
    </section>
    <section xml:id="block-storage-service">
      <title>Block Storage</title>
      <para>Enables management of volumes, volume types, which are
        similar to compute flavors, and volume snapshots. Includes the
        following components:</para>
      <itemizedlist>
        <listitem>
          <para><systemitem class="service">cinder-api</systemitem>.
            Accepts API requests and routes them to <systemitem
              class="service">cinder-volume</systemitem> for
            action.</para>
        </listitem>
        <listitem>
          <para><systemitem class="service"
            >cinder-volume</systemitem>. Acts upon the requests by
            reading or writing to the Cinder database to maintain
            state, interacting with other processes (like <systemitem
              class="service">cinder-scheduler</systemitem>) through a
            message queue and directly upon block storage providing
            hardware or software. It can interact with a variety of
            storage providers through a driver architecture.
            Currently, there are drivers for IBM, SolidFire, NetApp,
            Nexenta, Zadara, GlusterFS, linux iSCSI and other storage
            providers.</para>
        </listitem>
        <listitem>
          <para><systemitem class="service"
              >cinder-scheduler</systemitem> daemon. Like the
              <systemitem class="service">nova-scheduler</systemitem>,
            picks the optimal block storage provider node on which to
            create the volume.</para>
        </listitem>
        <listitem>
          <para>Messaging queue. OpenStack Block Storage deployments
            also use a messaging queue to route information between
            the cinder processes as well as a database to store volume
            state.</para>
        </listitem>
      </itemizedlist>
      <para>Like Networking, the Block Storage Service mainly
        interacts with Compute. For example, the Block Storage Service
        interacts with Compute to provide volumes for Compute
        instances.</para>
    </section>
    <section xml:id="image-service">
      <title>Image Service</title>
      <para>Includes the following components:</para>
      <itemizedlist>
        <listitem>
          <para><systemitem class="service">glance-api</systemitem>.
            Accepts Image API calls for image discovery, image
            retrieval and image storage.</para>
        </listitem>
        <listitem>
          <para><systemitem class="service"
              >glance-registry</systemitem>. Stores, processes, and
            retrieves metadata about images (size, type, and so
            on).</para>
        </listitem>
        <listitem>
          <para>Database. Stores image metadata. Like Nova, you can
            choose your database depending on your preference (but
            most people use MySQL or SQlite).</para>
        </listitem>
        <listitem>
          <para>Storage repository for image files. In the previous
            diagram, Swift is the image repository but you can
            configure a different repository. The Image Service
            supports normal filesystems, RADOS block devices, Amazon
            S3, and HTTP. Be aware that some of these choices are
            limited to read-only usage.</para>
        </listitem>
      </itemizedlist>
      <para>A number of periodic processes run on the Image Service to
        support caching. Replication services ensures consistency and
        availability through the cluster. Other periodic processes
        include auditors, updaters, and reapers.</para>
      <para>As shown in <xref linkend="concept_arch"/>, the Image
        Service is central to the overall IaaS picture. It accepts API
        requests for images or image metadata from end users or Nova
        components and can store its disk files in the Object Storage
        Service.</para>
    </section>
    <section xml:id="metering">
      <title>Metering</title>
      <para>To be written</para>
    </section>
    <section xml:id="rest-api">
      <title>REST API</title>
      <para>To be written</para>
    </section>
    <section xml:id="dashboard">
      <title>Dashboard</title>
      <para>A modular <link
          xlink:href="https://www.djangoproject.com/">Django web
          application</link> that provides an end user and
        administrator interface to OpenStack services.</para>
      <informalfigure>
        <mediaobject>
          <imageobject>
            <imagedata contentwidth="4in"
              fileref="figures/horizon-screenshot.jpg"/>
          </imageobject>
        </mediaobject>
      </informalfigure>
      <para>The architecture is fairly simple:</para>
      <itemizedlist>
        <listitem>
          <para>Horizon. Usually deployed through <link
              xlink:href="http://code.google.com/p/modwsgi/"
              >mod_wsgi</link> in Apache. The code itself is separated
            into a reusable python module with most of the logic
            (interactions with various OpenStack APIs) and
            presentation (to make it easily customizable for different
            sites).</para>
        </listitem>
        <listitem>
          <para>A database. Configurable as to which one. Relies
            mostly on the other services for data. Consequently,
            stores very little data of its own.</para>
        </listitem>
      </itemizedlist>
      <para>From a network architecture point of view, this service
        must be accessible to customers and to the public API for each
        OpenStack service. To use the administrator functionality for
        other services, it must also connect to Admin API endpoints,
        which should not be accessible by customers.</para>
    </section>
  </section>
  <section xml:id="openstack-architecture">
    <title>OpenStack architecture</title>
    <para>The OpenStack conceptual and logical architecture for the
      Havana release is as follows.</para>
    <section xml:id="conceptual-architecture">
      <title>Conceptual architecture</title>
      <para>The following figure shows a stylized and simplified view
        of the OpenStack architecture from the point of view of the
        cloud operator. It assumes that the implementer uses all
        services together in a common configuration. This figure does
        not show how consumers of the cloud might actually use it. For
        example, many users access object storage heavily and
        directly.</para>
      <para>Conceptually, picture the relationships between the
        OpenStack services as follows:</para>
      <informalfigure xml:id="concept_arch">
        <mediaobject>
          <imageobject>
            <imagedata
              fileref="figures/openstack-arch-grizzly-v1-conceptual.jpg"
              contentwidth="6in"/>
          </imageobject>
        </mediaobject>
      </informalfigure>
      <table rules="all">
        <caption>OpenStack services</caption>
        <col width="20%"/>
        <col width="10%"/>
        <col width="70%"/>
        <thead>
          <tr>
            <th>Service</th>
            <th>Project name</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><link
                xlink:href="http://www.openstack.org/software/openstack-compute/"
                >Compute</link></td>
            <td><link xlink:href="http://nova.openstack.org"
                >Nova</link></td>
            <td>Use to provision and manage large networks of virtual
              machines on demand. <link
                xlink:href="http://www.rackspace.com/"
                >Rackspace</link> and <link
                xlink:href="https://www.hpcloud.com/">HP</link>
              provide commercial compute services built on Nova and it
              is used internally at companies like Mercado Libre and
              NASA, where it originated.</td>
          </tr>
          <tr>
            <td><link
                xlink:href="http://www.openstack.org/software/openstack-storage/"
                >Object Storage</link></td>
            <td><link xlink:href="http://swift.openstack.org"
                >Swift</link></td>
            <td>Enables you to store or retrieve files, but not mount
              directories like a file server. Several companies,
              including KT, Rackspace (from which Swift originated)
              and Internap, provide commercial storage services based
              on Swift. Many large companies use Swift to store their
              data.</td>
          </tr>
          <tr>
            <td><link
                xlink:href="http://www.openstack.org/software/openstack-storage/"
                >Block Storage Service</link></td>
            <td><link xlink:href="http://cinder.openstack.org"
                >Cinder</link></td>
            <td>Provides persistent block storage to guest virtual
              machines.</td>
          </tr>
          <tr>
            <td><link
                xlink:href="http://www.openstack.org/software/openstack-networking/"
                >Networking</link></td>
            <td><link
                xlink:href="http://docs.openstack.org/developer/neutron/"
                >Neutron</link></td>
            <td>Enables network connectivity as a service between
              interface devices managed by other OpenStack services,
              usually Nova. Enables users to create their own networks
              and attach interfaces to them. OpenStack Networking has
              a pluggable architecture to support many popular
              networking vendors and technologies.</td>
          </tr>
          <tr>
            <td><link
                xlink:href="http://www.openstack.org/software/openstack-dashboard/"
                >Dashboard</link></td>
            <td><link xlink:href="http://horizon.openstack.org/"
                >Horizon</link></td>
            <td>Use this modular web-based user interface to interact
              with all OpenStack services. For example, use the
              dashboard to launch an instance, assign IP addresses,
              and set access controls.</td>
          </tr>
          <tr>
            <td><link
                xlink:href="http://www.openstack.org/software/openstack-shared-services/"
                >Identity Service</link></td>
            <td><link xlink:href="http://keystone.openstack.org/"
                >Keystone</link></td>
            <td>Provides authentication and authorization for all the
              OpenStack services. Also provides a service catalog of
              services within a particular OpenStack cloud.</td>
          </tr>
          <tr>
            <td><link
                xlink:href="http://www.openstack.org/software/openstack-shared-services/"
                >Image Service</link></td>
            <td><link xlink:href="http://glance.openstack.org"
                >Glance</link>.</td>
            <td>Provides a catalog and repository for virtual machine
              images. OpenStack Compute uses these images. While this
              service is optional, any cloud of size requires it.</td>
          </tr>
        </tbody>
      </table>
      <para>In addition to these core services, a number of incubation
        projects are being considered for future integration into
        OpenStack.</para>
    </section>
    <section xml:id="logical-architecture">
      <title>Logical Architecture</title>
      <para>As you can imagine, the logical architecture is far more
        complicated than the conceptual architecture shown in <xref
          linkend="concept_arch"/>.</para>
      <para>This section describes the relevant aspects of the logical
        architecture that administrators need to design, install, and
        configure a cloud. These details are not exhaustive.</para>
      <para>Modules are organized by the kind of functions they
        implement or deliver and are classified by one of the
        following types:</para>
      <itemizedlist>
        <listitem>
          <para>daemon. Runs as a daemon. On Linux platforms, is
            usually installed as a service.</para>
        </listitem>
        <listitem>
          <para>script. Run by an external module when an event
            occurs. Currently, it is used as a co-routine of dnsmasq
            for managing IP addresses released to instances through
            the DHCP protocol.</para>
        </listitem>
        <listitem>
          <para>client. Accesses the Python bindings for a
            service.</para>
        </listitem>
        <listitem>
          <para>command-line interface (CLI). Submits API calls to
            OpenStack services through easy-to-use commands.</para>
        </listitem>
      </itemizedlist>
      <para>As with any service-oriented architecture, diagrams
        quickly can become complicated when they try to illustrate all
        possible combinations of service communications. Consequently,
        the following diagram shows the most common architecture for
        an OpenStack-based cloud but does not depict the only possible
        architecture:</para>
      <informalfigure>
        <mediaobject>
          <imageobject>
            <imagedata
              fileref="figures/openstack-arch-grizzly-v1-logical.jpg"
              contentwidth="6.5in"/>
          </imageobject>
        </mediaobject>
      </informalfigure>
      <para>As in the conceptual architecture, end users can interact
        through the dashboard, the CLIs, or directly through APIs; all
        services authenticate through a common Identity Service; and,
        individual services interact with each other through public
        APIs, except where privileged administrator commands are
        necessary.</para>
    </section>
  </section>
  <section xml:id="feedback">
    <title>Feedback</title>
    <para>To provide feedback on documentation, join and use the
        <email>openstack-docs@lists.openstack.org</email> mailing list
      at <link
        xlink:href="http://lists.openstack.org/cgi-bin/mailman/listinfo/openstack-docs"
        >OpenStack Documentation Mailing List</link>, or <link
        xlink:href="https://bugs.launchpad.net/openstack-manuals/+filebug"
        >report a bug</link>.</para>
  </section>
</chapter>
