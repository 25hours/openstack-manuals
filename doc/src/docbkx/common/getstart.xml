<?xml version="1.0" encoding="utf-8"?>
<chapter xmlns="http://docbook.org/ns/docbook"
xmlns:xi="http://www.w3.org/2001/XInclude"
xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
xml:id="ch_getting-started-with-openstack">
  <title>Getting Started with OpenStack</title>
  <para>OpenStack is a collection of open source technologies that
  provides massively scalable cloud computing software. 
  OpenStack can be used by corporations, service providers, VARS, SMBs,       
  researchers, and global data centers looking to deploy
  large-scale cloud deployments for private or public clouds.</para>
  <section xml:id="why-cloud">
    <title>Why Cloud?</title>
    <para>In data centers today, many computers suffer the same
    under-utilization in computing power and networking bandwidth. For
    example, projects may need a large amount of computing capacity
    to complete a computation, but no longer need the computing power
    after completing the computation. You want cloud computing when
    you want a service that's available on-demand with the
    flexibility to bring it up or down through automation or with
    little intervention. The phrase "cloud computing" is often
    represented with a diagram that contains a cloud-like shape
    indicating a layer where responsibility for service goes from
    user to provider. The cloud in these types of diagrams contains
    the services that afford computing power harnessed to get work
    done. Much like the electrical power we receive each day, cloud
    computing provides subscribers or users with access to a shared
    collection of computing resources: networks for transfer, servers
    for storage, and applications or services for completing
    tasks.</para>
    <para>These are the compelling features of a cloud:</para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>On-demand self-service: Users can provision servers and
        networks with little human intervention.</para>
      </listitem>
      <listitem>
        <para>Network access: Any computing capabilities are
        available over the network. Many different devices are
        allowed access through standardized mechanisms.</para>
      </listitem>
      <listitem>
        <para>Resource pooling: Multiple users can access clouds that
        serve other consumers according to demand.</para>
      </listitem>
      <listitem>
        <para>Elasticity: Provisioning is rapid and scales out or in
        based on need.</para>
      </listitem>
      <listitem>
        <para>Metered or measured service: Just like utilities that
        are paid for by the hour, clouds should optimize resource use
        and control it for the level of service or type of servers
        such as storage or processing.</para>
      </listitem>
    </itemizedlist>
    <para>Cloud computing offers different service models depending
    on the capabilities a consumer may require.</para>
    <itemizedlist>
      <listitem>
        <para>SaaS: Software as a Service. Provides the consumer the
        ability to use the software in a cloud environment, such as
        web-based email for example.</para>
      </listitem>
      <listitem>
        <para>PaaS: Platform as a Service. Provides the consumer the
        ability to deploy applications through a programming language
        or tools supported by the cloud platform provider. An example
        of platform as a service is an Eclipse/Java programming
        platform provided with no downloads required.</para>
      </listitem>
      <listitem>
        <para>IaaS: Infrastructure as a Service. Provides
        infrastructure such as computer instances, network
        connections, and storage so that people can run any software
        or operating system.</para>
      </listitem>
    </itemizedlist>
    <para>When you hear terms such as public cloud or private cloud,
    these refer to the deployment model for the cloud. A private
    cloud operates for a single organization, but can be managed
    on-premise or off-premise. A public cloud has an infrastructure
    that is available to the general public or a large industry group
    and is likely owned by a cloud services company. The NIST also
    defines community cloud as shared by several organizations
    supporting a specific community with shared concerns.</para>
    <para>Clouds can also be described as hybrid. A hybrid cloud can
    be a deployment model, as a composition of both public and
    private clouds, or a hybrid model for cloud computing may involve
    both virtual and physical servers.</para>
    <para>What have people done with cloud computing? Cloud computing
    can help with large-scale computing needs or can lead
    consolidation efforts by virtualizing servers to make more use of
    existing hardware and potentially release old hardware from
    service. People also use cloud computing for collaboration
    because of its high availability through networked computers.
    Productivity suites for word processing, number crunching, and
    email communications, and more are also available through cloud
    computing. Cloud computing also avails additional storage to the
    cloud user, avoiding the need for additional hard drives on each
    user's desktop and enabling access to huge data storage capacity
    online in the cloud.</para>
    <para>For a more detailed discussion of cloud computing's
    essential characteristics and its models of service and
    deployment, see 
    <link xlink:href="http://www.nist.gov/itl/cloud/">
    http://www.nist.gov/itl/cloud/</link>, published by the US
    National Institute of Standards and Technology.</para>
  </section>
    
  <section xml:id="what-is-openstack">
    <title>What is OpenStack?</title>
    <para>OpenStack is on a mission: to provide
    scalable, elastic cloud computing for both public and private
    clouds, large and small. At the heart of our mission is a pair of
    basic requirements: clouds must be simple to implement and
    massively scalable.</para>
    <para>If you are new to OpenStack, you will undoubtedly have
    questions about installation, deployment, and usage. It can seem
    overwhelming at first. But don't fear, there are places to get
    information to guide you and to help resolve any issues you may
    run into during the on-ramp process. Because the project is so
    new and constantly changing, be aware of the revision time for
    all information. If you are reading a document that is a few
    months old and you feel that it isn't entirely accurate, then
    please let us know through the mailing list at 
    <link xlink:href="https://launchpad.net/~openstack">
    https://launchpad.net/~openstack</link> or by filing a bug at 
     <link xlink:href="https://bugs.launchpad.net/openstack-manuals/+filebug"> 
       https://bugs.launchpad.net/openstack-manuals/+filebug</link> 
       so it can be updated or removed.</para>
  </section>
  <section xml:id="components-of-openstack">
    <title>Components of OpenStack</title>
    <para>There are currently seven core components of OpenStack:
    Compute, Object Storage, Identity, Dashboard, Block Storage, Network 
    and Image Service. Let's look at each in turn.</para>
    <itemizedlist>
      <listitem>
        <para>Object Store (codenamed <link
            xlink:href="http://swift.openstack.org">"Swift"</link>)
          provides object storage. It allows you to store or retrieve
          files (but not mount directories like a fileserver). Several
          companies provide commercial storage services based on
          Swift. These include KT, Rackspace (from which Swift
          originated) and Internap. Swift is also used internally at many
          large companies to store their data.</para>
      </listitem>
      <listitem>
        <para>Image (codenamed <link xlink:href="http://glance.openstack.org"
            >"Glance"</link>) provides a catalog and repository for
          virtual disk images. These disk images are mostly commonly
          used in OpenStack Compute. While this service is technically
          optional, any cloud of size will require it.</para>
      </listitem>
      <listitem>
        <para>Compute (codenamed <link xlink:href="http://nova.openstack.org/"
            >"Nova"</link>) provides virtual servers upon demand. 
            <link xlink:href="http://www.rackspace.com/">Rackspace</link> and
            <link xlink:href="https://www.hpcloud.com/" >HP</link> provide
            commercial compute services built on Nova and it is used 
            internally at companies like Mercado Libre and NASA (where it
          originated).</para>
      </listitem>
      <listitem>
        <para>Dashboard (codenamed <link
            xlink:href="http://horizon.openstack.org/"
            >"Horizon"</link>) provides a modular web-based user
          interface for all the OpenStack services. With this web GUI, you
          can perform most operations on your cloud like launching an 
          instance, assigning IP addresses and setting access controls.</para>
      </listitem>
      <listitem>
        <para>Identity (codenamed <link
            xlink:href="http://keystone.openstack.org/"
            >"Keystone"</link>) provides authentication and
          authorization for all the OpenStack services. It also
          provides a service catalog of services within a particular
          OpenStack cloud.</para>
      </listitem>
      <listitem>
        <para>Network (codenamed <link
            xlink:href="http://quantum.openstack.org/"
            >"Quantum"</link>) provides "network connectivity as a
          service" between interface devices managed by other
          OpenStack services (most likely Nova). The service works by
          allowing users to create their own networks and then attach
          interfaces to them. OpenStack Network has a pluggable
          architecture to support many popular networking vendors and
          technologies. </para>
      </listitem>
      <listitem>
        <para>Block Storage (codenamed <link
            xlink:href="http://cinder.openstack.org">"Cinder"</link>)
          provides persistent block storage to guest VMs.</para>
      </listitem>
    </itemizedlist>

      <para>In addition to these core projects, there are also a number of
         "incubation" projects that are being considered for future 
          integration into the OpenStack release.</para>
    </section>

    <section xml:id="conceptual-architecture">
      <title>Conceptual Architecture</title>

      <para>The OpenStack project as a whole is designed to
        deliver a massively scalable cloud operating system. To
        achieve this, each of the constituent services are designed to
        work together to provide a complete Infrastructure as a
        Service (IaaS). This integration is facilitated through public
        application programming interfaces (APIs) that each service
        offers (and in turn can consume). While these APIs allow each
        of the services to use another service, it also allows an
        implementer to switch out any service as long as they maintain
        the API. These are (mostly) the same APIs that are available
        to end users of the cloud.</para>

      <para>Conceptually, you can picture the relationships between
        the services as so:</para>


      <informalfigure>
        <mediaobject>
          <imageobject>
            <imagedata 
              fileref="figures/openstack-conceptual-arch-folsom.png" contentwidth="6in"/>
          </imageobject>
        </mediaobject>
      </informalfigure>

      <itemizedlist>
        <listitem>
          <para>Dashboard ("Horizon") provides a web front end to the
            other OpenStack services</para>
        </listitem>
        <listitem>
          <para>Compute ("Nova") stores and retrieves virtual disks
            ("images") and associated metadata in Image ("Glance")</para>
        </listitem>
        <listitem>
          <para>Network ("Quantum") provides virtual networking for 
            Compute.</para>
        </listitem>
        <listitem>
          <para>Block Storage ("Cinder") provides storage volumes for 
            Compute.</para>
        </listitem>
        <listitem>
          <para>Image ("Glance") can store the actual virtual disk files
            in the Object Store("Swift")</para>
        </listitem>
        <listitem>
          <para>All the services authenticate with Identity
            ("Keystone")</para>
        </listitem>
      </itemizedlist>

      <para>This is a stylized and simplified view of the
        architecture, assuming that the implementer is using all of
        the services together in the most common configuration. It
        also only shows the "operator" side of the cloud -- it does
        not picture how consumers of the cloud may actually use it.
        For example, many users will access object storage
        heavily (and directly).</para>
    </section>
    <section xml:id="logical-architecture">
      <title>Logical Architecture</title>
    <para>The following paragraphs give some details on the main
      modules in the OpenStack components. </para>
    <para>These details are not meant to be exhaustive; the objective
      is to describe the relevant aspects that administrators need to
      know to better understand how to design the deployment, and
      install and configure the whole platform.</para>
    <para>Modules are organized according to the functional area they
      belong (i.e. the kind of functions they implement or deliver)
      and classified according to their type.  </para>
    <para>These are the types:</para>
    <itemizedlist>
      <listitem>
        <para>daemon: runs as a daemon and, on Linux platforms, is
          usually installed as a service;</para>
      </listitem>
      <listitem>
        <para>script: a script run by an external module when some
          event happens (at the moment, it is used as a co-routine of
          dnsmasq for managing IP Addresses released to instances via
          DHCP protocol);</para>
      </listitem>
      <listitem>
        <para>client: a client for accessing the Python bindings for a
          service</para>
      </listitem>
      <listitem>
        <para>CLI: a Command Line Interpreter for submitting commands
          to OpenStack Compute for example</para>
      </listitem>
    </itemizedlist>

      <para>As you can imagine, the logical architecture is far
        more complicated than the conceptual architecture shown above.
        As with any service-oriented architecture, diagrams quickly
        become "messy" trying to illustrate all the possible
        combinations of service communications. The diagram below,
        illustrates the most common architecture of an 
        OpenStack-based cloud. However, as OpenStack supports a 
        wide variety of technologies, it does not represent the 
        only architecture possible.</para>

      <informalfigure>
        <mediaobject>
          <imageobject>
            <imagedata 
              fileref="figures/openstack-logical-arch-folsom.png" contentwidth="6in"/>
          </imageobject>
        </mediaobject>
      </informalfigure>

      <para>This picture is consistent with the conceptual architecture 
        above in that:</para>

      <itemizedlist>
        <listitem>
          <para>End users can interact through a common web interface
            (Horizon) or directly to each service through their
            API</para>
        </listitem>
        <listitem>
          <para>All services authenticate through a common source
            (facilitated through Keystone)</para>
        </listitem>
        <listitem>
          <para>Individual services interact with each other through
            their public APIs (except where privileged administrator
            commands are necessary)</para>
        </listitem>
      </itemizedlist>


      <para>In the sections below, we'll delve into the architecture
        for each of the services.</para>
    <section xml:id="overview-dashboard-arch">
      <title>Dashboard</title>

      <para>Horizon is a modular <link
          xlink:href="https://www.djangoproject.com/">Django web
          application</link> that provides an end user and
        administrator interface to OpenStack services.</para>


      <informalfigure>
        <mediaobject>
          <imageobject>
            <imagedata scale="33"
              fileref="figures/horizon-screenshot.jpg"/>
          </imageobject>
        </mediaobject>
      </informalfigure>

      <para>As with most web applications, the architecture is fairly
        simple:</para>

      <itemizedlist>
        <listitem>
          <para>Horizon is usually deployed via <link
              xlink:href="http://code.google.com/p/modwsgi/"
              >mod_wsgi</link> in Apache. The code itself is separated
            into a reusable python module with most of the logic
            (interactions with various OpenStack APIs) and
            presentation (to make it easily customizable for different
            sites).</para>
        </listitem>
        <listitem>
          <para>A database (configurable as to which one). As it relies
            mostly on the other services for data, it stores very
            little data of its own.</para>
        </listitem>
      </itemizedlist>

      <para>From a network architecture point of view, this service
        will need to be customer accessible as well as be able to talk to
        each service's public APIs. If you wish to use the
        administrator functionality (i.e. for other services), it will
        also need connectivity to their Admin API endpoints (which
        should be non-customer accessible).</para>
    </section>
    <section xml:id="overview-compute-arch">
      <title>Compute</title>

      <para>Nova is the most complicated and distributed component of
        OpenStack. A large number of processes cooperate to turn end
        user API requests into running virtual machines. Main modules
        are implemented in Python. The following lists are organized by functional areas:</para>
<para>API</para>
      <itemizedlist>
        <listitem>
          <para><code>nova-api</code> accepts and responds to end user
            compute API calls. It supports OpenStack Compute API,
            Amazon's EC2 API and a special Admin API (for privileged
            users to perform administrative actions). It also
            initiates most of the orchestration activities (such as
            running an instance) as well as enforces some policy.
          </para>
        </listitem>
        <listitem>
          <para><code>nova-api-metadata</code> accepts metadata
            requests from instances (<link
              xlink:href="http://docs.openstack.org/trunk/openstack-compute/admin/content/metadata-service.html"
              >more details</link>). The nova-api-metadata service is
            generally only used when running in multi-host mode with
            nova-network installations. </para>
        </listitem>
      </itemizedlist>
      <para>Computing core</para>
      <itemizedlist>
        <listitem>
          <para>The <code>nova-compute</code> process is primarily a
            worker daemon that creates and terminates virtual machine
            instances via hypervisor's APIs (XenAPI for XenServer/XCP,
            libvirt for KVM or QEMU, VMwareAPI for VMware, etc.). The
            process by which it does so is fairly complex but the
            basics are simple: accept actions from the queue and then
            perform a series of system commands (like launching a KVM
            instance) to carry them out while updating state in the
            database.</para>
        </listitem>
        <listitem>
          <para>The <code>nova-schedule</code> process is conceptually
            the simplest piece of code in OpenStack Nova: take a
            virtual machine instance request from the queue and
            determines where it should run (specifically, which
            compute server host it should run on).</para>
        </listitem>
        <listitem>
          <para>The <code>nova-conductor</code> module, introduced in
            the Grizzly release, works as a “mediator” between
            nova-compute and the database. It is aimed at eliminating
            all the direct accesses to the cloud database made by
            nova-compute. The nova-conductor module scales
            horizontally but it shouldn’t be deployed on the same
            node(s) where nova-compute runs. You can <link
              xlink:href="http://russellbryantnet.wordpress.com/2012/11/19/a-new-nova-service-nova-conductor/"
              >read more about the new service here</link>. </para>
        </listitem>
      </itemizedlist>
      <para>Networking for VMs</para>
      <itemizedlist>
        <listitem>
          <para>The <code>nova-network</code> worker daemon is very
            similar to <code>nova-compute</code>. It accepts
            networking tasks from the queue and then performs tasks to
            manipulate the network (such as setting up bridging
            interfaces or changing iptables rules). This functionality
            is being migrated to OpenStack Networking, a separate
            OpenStack service. </para>
        </listitem>
        <listitem><para><code>nova-dhcpbridge</code> (script) This script tracks IP
            address leases and records them in the database using
            dnsmasq's dhcp-script facility. This functionality is also
            migrated to OpenStack Networking; a different script is
            provided when using OpenStack Networking (code-named
            Quantum). </para></listitem>
      </itemizedlist>
      <para>Console Interface</para>
      <itemizedlist> 
        <listitem><para>The <code>nova-consoleauth</code> daemon authorizes user’s tokens that console proxies provide (see nova-novncproxy and nova-xvpnvcproxy).
          This service must be running in order for console proxies to work. Many proxies of either type can be run against a single nova-consoleauth service in a cluster
          configuration. <link xlink:href="http://docs.openstack.org/trunk/openstack-compute/admin/content/about-nova-consoleauth.html">Read more details</link>.
        </para></listitem>
        <listitem><para>The <code>nova-novncproxy</code> (daemon) provides a proxy for accessing running instances through a VNC connection.
          It supports browser-based novnc clients.</para></listitem>
        <listitem>
          <para>The deprecated <code>nova-console</code> daemon is no
            longer used with Grizzly, and the nova-xvpnvncproxy is
            used instead.</para>
        </listitem>
        <listitem><para>The <code>nova-xvpnvncproxy</code> daemon is a proxy for
            accessing running instances through a VNC connection. It
            supports a Java client specifically designed for
            OpenStack. </para></listitem>
        <listitem><para>The <code>nova-cert</code> daemon manages x509 certificates.</para></listitem>
      </itemizedlist>
      <para>Image Management (EC2 scenario)</para>
      <itemizedlist>
        <listitem><para>The <code>nova-objectstore</code> daemon provides an S3 interface for registering images onto the image management service (see glance)
          It is mainly used for installations that need to support euca2ools. The euca2ools tools talk to nova-objectore in “S3 language” and nova-objectstore translates S3 requests into glance requests
        </para>
        </listitem>
        <listitem><para>The <code>euca2ools</code> client is not an OpenStack module but
            it can be supported by OpenStack. It’s a set of command
            line interpreter commands for managing cloud resources.
            Provided that nova-api is configured to support EC2
            interface, euca2ools can be used to issue cloud management
            commands. For more information on euca2ools, see <link
              xlink:href="http://www.eucalyptus.com/eucalyptus-cloud/documentation/2.0"
              >http://www.eucalyptus.com/eucalyptus-cloud/documentation/2.0</link>. </para></listitem>
      </itemizedlist>
      <para>Command Line Interpreter/Interfaces</para>
      <itemizedlist>
        <listitem><para>The <code>nova</code> client enables you to submit either tenant administrator’s commands or cloud user’s commands.
        </para></listitem>
        <listitem><para>The <code>nova-manage</code> client submits cloud administrator commands. </para></listitem>
      </itemizedlist>
      <itemizedlist>  
        <listitem>
          <para>The queue provides a central hub for passing messages
            between daemons. This is usually implemented with <link
              xlink:href="http://www.rabbitmq.com/">RabbitMQ</link>
            today, but could be any AMPQ message queue (such as <link
              xlink:href="http://qpid.apache.org/">Apache
            Qpid</link>), or <link xlink:href="http://www.zeromq.org/"
              >Zero MQ</link>.</para>
        </listitem>
        <listitem>
          <para>The SQL database stores most of the build-time and
            run-time state for a cloud infrastructure. This includes
            the instance types that are available for use, instances
            in use, networks available and projects. Theoretically,
            OpenStack Nova can support any database supported by
            SQL-Alchemy but the only databases currently being widely
            used are sqlite3 (only appropriate for test and
            development work), MySQL and PostgreSQL.</para>
        </listitem>
       
      </itemizedlist>

      <para>Nova interacts with many other OpenStack services:
        Keystone for authentication, Glance for images and Horizon for
        web interface. The Glance interactions are central. The API
        process can upload and query Glance while
          <code>nova-compute</code> will download images for use in
        launching images.</para>
    </section>
    <section xml:id="overview-object-store-arch">
      <title>Object Store</title>

      <para>The swift architecture is very distributed to prevent any
        single point of failure as well as to scale horizontally. It
        includes the following components:</para>

      <itemizedlist>
        <listitem>
          <para>Proxy server (<code>swift-proxy-server</code>) accepts 
          incoming requests via the
            OpenStack Object API or just raw HTTP. It accepts files to
            upload, modifications to metadata or container creation.
            In addition, it will also serve files or container listing
            to web browsers. The proxy server may utilize an optional
            cache (usually deployed with memcache) to improve
            performance.</para>
        </listitem>
        <listitem>
          <para>Account servers manage accounts defined with the
            object storage service.</para>
        </listitem>
        <listitem>
          <para>Container servers manage a mapping of containers (i.e
            folders) within the object store service.</para>
        </listitem>
        <listitem>
          <para>Object servers manage actual objects (i.e. files) on
            the storage nodes.</para>
        </listitem>
        <listitem>
          <para>There are also a number of periodic process which run
            to perform housekeeping tasks on the large data store. The
            most important of these is the replication services, which
            ensures consistency and availability through the cluster.
            Other periodic processes include auditors, updaters and
            reapers.</para>
        </listitem>
      </itemizedlist>

      <para>Authentication is handled through configurable WSGI
        middleware (which will usually be Keystone).</para>
    </section>
    <section xml:id="overview-image-store-arch">
      <title>Image Store</title>

      <para>Glance has four main parts to it:</para>

      <itemizedlist>
        <listitem>
          <para><code>glance-api</code> accepts Image API calls for
            image discovery, image retrieval and image storage.</para>
        </listitem>
        <listitem>
          <para><code>glance-registry</code> stores, processes and
            retrieves metadata about images (size, type, etc.).</para>
        </listitem>
        <listitem>
          <para>A database to store the image metadata. Like Nova, you
            can choose your database depending on your preference (but
            most people use MySQL or SQlite).</para>
        </listitem>
        <listitem>
          <para>A storage repository for the actual image files. In
            the diagram above, Swift is shown as the image repository, 
            but this is configurable. In addition to Swift, Glance 
            supports normal filesystems, RADOS block devices, Amazon 
            S3 and HTTP. Be aware that some of these choices are 
            limited to read-only usage.</para>
        </listitem>
      </itemizedlist>

      <para>There are also a number of periodic process which run on
        Glance to support caching. The most important of these is the
        replication services, which ensures consistency and
        availability through the cluster. Other periodic processes
        include auditors, updaters and reapers.</para>

      <para>As you can see from the diagram in the Conceptual
        Architecture section, Glance serves a central role to the
        overall IaaS picture. It accepts API requests for images (or
        image metadata) from end users or Nova components and can
        store its disk files in the object storage service,
        Swift.</para>
    </section>
    <section xml:id="overview-identity-arch">
      <title>Identity</title>

      <para>Keystone provides a single point of integration for
        OpenStack policy, catalog, token and authentication.</para>

      <itemizedlist>
        <listitem>
          <para><code>keystone</code> handles API requests as well as providing
            configurable catalog, policy, token and identity
            services.</para>
        </listitem>
        <listitem>
          <para>Each Keystone function has a pluggable backend which
            allows different ways to use the particular service. Most
            support standard backends like LDAP or SQL, as well as Key
            Value Stores (KVS).</para>
        </listitem>
      </itemizedlist>

      <para>Most people will use this as a point of customization for
        their current authentication services.</para>
    </section>
    <section xml:id="overview-network-arch">
      <title>Network</title>

      <para>OpenStack Networking provides "network connectivity as a
        service" between interface devices managed by other OpenStack
        services (most likely Compute). The service works by allowing
        users to create their own networks and then attach interfaces
        to them. Like many of the OpenStack services, OpenStack
        Networking is highly configurable due to its plug-in
        architecture. These plug-ins accommodate different networking
        equipment and software. As such, the architecture and
        deployment can vary dramatically. In the above architecture, a
        simple Linux networking plug-in is shown.</para>
        
      <itemizedlist>
        <listitem>
          <para><code>quantum-server</code> accepts API requests and
            then routes them to the appropriate OpenStack Networking
            plugin for action.</para>
        </listitem>
        <listitem>
          <para>OpenStack Networking plugins and agents perform the
            actual actions such as plugging and unplugging ports,
            creating networks or subnets and IP addressing. These
            plugins and agents differ depending on the vendor and
            technologies used in the particular cloud. OpenStack
            Networking ships with plugins and agents for: Cisco
            virtual and physical switches, Nicira NVP product, NEC
            OpenFlow products, Open vSwitch, Linux bridging and the
            Ryu Network Operating System.</para>
          <para>The common agents are L3 (layer 3), DHCP (dynamic host IP addressing) and the specific plug-in agent.</para>
        </listitem>
           <listitem>
             <para>Most OpenStack Networking installations also make
            use of a messaging queue to route information between the
            quantum-server and various agents as well as a database to
            store networking state for particular plugins.</para>
           </listitem>
      </itemizedlist>
      <para>OpenStack Networking interacts mainly with OpenStack
        Compute, where it provides networks and connectivity for its
        instances. </para>

    </section>
    <section xml:id="overview-block-storage-arch">
      <title>Block Storage</title>

      <para>The OpenStack Block Storage API allows for manipulation of volumes, volume types (similar to compute flavors) and volume snapshots.</para>

      <itemizedlist>
        <listitem>
          <para><code>cinder-api</code> accepts API requests and routes them to cinder-volume for action.</para>
        </listitem>
        <listitem>
          <para><code>cinder-volume</code> acts upon the requests by reading or writing to the Cinder database to maintain state, interacting with other processes (like <code>cinder-scheduler</code>) through a message queue and directly upon block storage providing hardware or software. It can interact with a variety of storage providers through a driver architecture. Currently, there are drivers for IBM, SolidFire, NetApp, Nexenta, Zadara, GlusterFS, linux iSCSI and other storage providers. </para>
        </listitem>
        <listitem>
          <para>Much like <code>nova-scheduler</code>, the <code>cinder-scheduler</code> daemon picks the optimal block storage provider node to create the volume on.</para>
        </listitem>
        <listitem>
          <para>OpenStack Block Storage deployments will also make use
            of a messaging queue to route information between the
            cinder processes as well as a database to store volume
            state.</para>
        </listitem>
      </itemizedlist>
      <para>Like OpenStack Network, OpenStack Block Storage will
        mainly interact with OpenStack Compute, providing volumes for
        its instances.</para>
    </section>
  </section>  
  <xi:include href="storage-concepts.xml"/>
</chapter>
