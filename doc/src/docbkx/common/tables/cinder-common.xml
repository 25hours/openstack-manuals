<?xml version="1.0" encoding="UTF-8"?>
        <!-- Warning: Do not edit this file. It is automatically
             generated and your changes will be overwritten.
             The tool to do so lives in the tools directory of this
             repository -->
        <para xmlns="http://docbook.org/ns/docbook" version="5.0">
        <table rules="all">
          <caption>Description of configuration options for common</caption>
           <col width="50%"/>
           <col width="50%"/>
           <thead>
              <tr>
                  <td>Configuration option=Default value</td>
                  <td>(Type) Description</td>
              </tr>
          </thead>
          <tbody>
              <tr>
                       <td>debug=False</td>
                       <td>(BoolOpt) Print debugging output (set logging level to DEBUG instead of default WARNING level).</td>
              </tr>
              <tr>
                       <td>default_log_levels=amqplib=WARN,sqlalchemy=WARN,boto=WARN,suds=INFO,keystone=INFO,eventlet.wsgi.server=WARN</td>
                       <td>(ListOpt) list of logger=LEVEL pairs</td>
              </tr>
              <tr>
                       <td>default_notification_level=INFO</td>
                       <td>(StrOpt) Default notification level for outgoing notifications</td>
              </tr>
              <tr>
                       <td>default_publisher_id=$host</td>
                       <td>(StrOpt) Default publisher_id for outgoing notifications</td>
              </tr>
              <tr>
                       <td>default_volume_type=None</td>
                       <td>(StrOpt) default volume type to use</td>
              </tr>
              <tr>
                       <td>disable_process_locking=False</td>
                       <td>(BoolOpt) Whether to disable inter-process locks</td>
              </tr>
              <tr>
                       <td>enable_new_services=True</td>
                       <td>(BoolOpt) Services to be added to the available pool on create</td>
              </tr>
              <tr>
                       <td>fatal_deprecations=False</td>
                       <td>(BoolOpt) make deprecations fatal</td>
              </tr>
              <tr>
                       <td>fatal_exception_format_errors=False</td>
                       <td>(BoolOpt) make exception message format errors fatal</td>
              </tr>
              <tr>
                       <td>host=127.0.0.1</td>
                       <td>(StrOpt) Host to locate redis</td>
              </tr>
              <tr>
                       <td>host=autodoc</td>
                       <td>(StrOpt) Name of this node.  This can be an opaque identifier.  It is not necessarily a hostname, FQDN, or IP address.</td>
              </tr>
              <tr>
                       <td>host=127.0.0.1</td>
                       <td>(StrOpt) Host to locate redis</td>
              </tr>
              <tr>
                       <td>host=autodoc</td>
                       <td>(StrOpt) Name of this node.  This can be an opaque identifier.  It is not necessarily a hostname, FQDN, or IP address.</td>
              </tr>
              <tr>
                       <td>idle_timeout=3600</td>
                       <td>(IntOpt) timeout before idle sql connections are reaped</td>
              </tr>
              <tr>
                       <td>iet_conf=/etc/iet/ietd.conf</td>
                       <td>(StrOpt) IET configuration file</td>
              </tr>
              <tr>
                       <td>lio_initiator_iqns=</td>
                       <td>(StrOpt) Comma-separatd list of initiator IQNs allowed to connect to the iSCSI target. (From Nova compute nodes.)</td>
              </tr>
              <tr>
                       <td>lock_path=None</td>
                       <td>(StrOpt) Directory to use for lock files. Default to a temp directory</td>
              </tr>
              <tr>
                       <td>log_config=None</td>
                       <td>(StrOpt) If this option is specified, the logging configuration file specified is used and overrides any other logging options specified. Please see the Python logging module documentation for details on logging configuration files.</td>
              </tr>
              <tr>
                       <td>log_date_format=%Y-%m-%d %H:%M:%S</td>
                       <td>(StrOpt) Format string for %%(asctime)s in log records. Default: %(default)s</td>
              </tr>
              <tr>
                       <td>log_dir=None</td>
                       <td>(StrOpt) (Optional) The base directory used for relative --log-file paths</td>
              </tr>
              <tr>
                       <td>log_file=None</td>
                       <td>(StrOpt) (Optional) Name of log file to output to. If no default is set, logging will go to stdout.</td>
              </tr>
              <tr>
                       <td>log_format=None</td>
                       <td>(StrOpt) A logging.Formatter log message format string which may use any of the available logging.LogRecord attributes. This option is deprecated.  Please use logging_context_format_string and logging_default_format_string instead.</td>
              </tr>
              <tr>
                       <td>logging_context_format_string=%(asctime)s.%(msecs)03d %(process)d %(levelname)s %(name)s [%(request_id)s %(user)s %(tenant)s] %(instance)s%(message)s</td>
                       <td>(StrOpt) format string to use for log messages with context</td>
              </tr>
              <tr>
                       <td>logging_debug_format_suffix=%(funcName)s %(pathname)s:%(lineno)d</td>
                       <td>(StrOpt) data to append to log format when level is DEBUG</td>
              </tr>
              <tr>
                       <td>logging_default_format_string=%(asctime)s.%(msecs)03d %(process)d %(levelname)s %(name)s [-] %(instance)s%(message)s</td>
                       <td>(StrOpt) format string to use for log messages without context</td>
              </tr>
              <tr>
                       <td>logging_exception_prefix=%(asctime)s.%(msecs)03d %(process)d TRACE %(name)s %(instance)s</td>
                       <td>(StrOpt) prefix each line of exception output with this format</td>
              </tr>
              <tr>
                       <td>monkey_patch=False</td>
                       <td>(BoolOpt) Whether to log monkey patching</td>
              </tr>
              <tr>
                       <td>monkey_patch_modules=</td>
                       <td>(ListOpt) List of modules/decorators to monkey patch</td>
              </tr>
              <tr>
                       <td>my_ip=198.61.167.113</td>
                       <td>(StrOpt) ip address of this host</td>
              </tr>
              <tr>
                       <td>no_snapshot_gb_quota=False</td>
                       <td>(BoolOpt) Whether snapshots count against GigaByte quota</td>
              </tr>
              <tr>
                       <td>num_iscsi_scan_tries=3</td>
                       <td>(IntOpt) number of times to rescan iSCSI target to find volume</td>
              </tr>
              <tr>
                       <td>num_shell_tries=3</td>
                       <td>(IntOpt) number of times to attempt to run flakey shell commands</td>
              </tr>
              <tr>
                       <td>password=None</td>
                       <td>(StrOpt) Password for Redis server. (optional)</td>
              </tr>
              <tr>
                       <td>policy_default_rule=default</td>
                       <td>(StrOpt) Rule checked when requested rule is not found</td>
              </tr>
              <tr>
                       <td>policy_file=policy.json</td>
                       <td>(StrOpt) JSON file representing policy</td>
              </tr>
              <tr>
                       <td>pool_size=None</td>
                       <td>(StrOpt) Size of thin provisioning pool (None uses entire cinder VG)</td>
              </tr>
              <tr>
                       <td>port=6379</td>
                       <td>(IntOpt) Use this port to connect to redis host.</td>
              </tr>
              <tr>
                       <td>pybasedir=/home/stacker/repos/cinder</td>
                       <td>(StrOpt) Directory where the cinder python module is installed</td>
              </tr>
              <tr>
                       <td>quota_driver=cinder.quota.DbQuotaDriver</td>
                       <td>(StrOpt) default driver to use for quota checks</td>
              </tr>
              <tr>
                       <td>quota_gigabytes=1000</td>
                       <td>(IntOpt) number of volume gigabytes (snapshots are also included) allowed per project</td>
              </tr>
              <tr>
                       <td>quota_snapshots=10</td>
                       <td>(IntOpt) number of volume snapshots allowed per project</td>
              </tr>
              <tr>
                       <td>quota_volumes=10</td>
                       <td>(IntOpt) number of volumes allowed per project</td>
              </tr>
              <tr>
                       <td>reservation_expire=86400</td>
                       <td>(IntOpt) number of seconds until a reservation expires</td>
              </tr>
              <tr>
                       <td>reserved_percentage=0</td>
                       <td>(IntOpt) The percentage of backend capacity is reserved</td>
              </tr>
              <tr>
                       <td>retry_interval=10</td>
                       <td>(IntOpt) interval between retries of opening a sql connection</td>
              </tr>
              <tr>
                       <td>root_helper=sudo</td>
                       <td>(StrOpt) Deprecated: command to use for running commands as root</td>
              </tr>
              <tr>
                       <td>rootwrap_config=None</td>
                       <td>(StrOpt) Path to the rootwrap configuration file to use for running commands as root</td>
              </tr>
              <tr>
                       <td>run_external_periodic_tasks=True</td>
                       <td>(BoolOpt) Some periodic tasks can be run in a separate process. Should we run them here?</td>
              </tr>
              <tr>
                       <td>service_down_time=60</td>
                       <td>(IntOpt) maximum time since last check-in for up service</td>
              </tr>
              <tr>
                       <td>sqlite_db=cinder.sqlite</td>
                       <td>(StrOpt) the filename to use with sqlite</td>
              </tr>
              <tr>
                       <td>sqlite_synchronous=True</td>
                       <td>(BoolOpt) If true, use synchronous mode for sqlite</td>
              </tr>
              <tr>
                       <td>ssh_conn_timeout=30</td>
                       <td>(IntOpt) SSH connection timeout in seconds</td>
              </tr>
              <tr>
                       <td>ssh_max_pool_conn=5</td>
                       <td>(IntOpt) Maximum ssh connections in the pool</td>
              </tr>
              <tr>
                       <td>ssh_min_pool_conn=1</td>
                       <td>(IntOpt) Minimum ssh connections in the pool</td>
              </tr>
              <tr>
                       <td>ssl_ca_file=None</td>
                       <td>(StrOpt) CA certificate file to use to verify connecting clients</td>
              </tr>
              <tr>
                       <td>ssl_cert_file=None</td>
                       <td>(StrOpt) Certificate file to use when starting the server securely</td>
              </tr>
              <tr>
                       <td>ssl_key_file=None</td>
                       <td>(StrOpt) Private key file to use when starting the server securely</td>
              </tr>
              <tr>
                       <td>state_path=$pybasedir</td>
                       <td>(StrOpt) Top-level directory for maintaining cinder's state</td>
              </tr>
              <tr>
                       <td>storage_availability_zone=nova</td>
                       <td>(StrOpt) availability zone of this node</td>
              </tr>
              <tr>
                       <td>syslog_log_facility=LOG_USER</td>
                       <td>(StrOpt) syslog facility to receive log lines</td>
              </tr>
              <tr>
                       <td>tcp_keepidle=600</td>
                       <td>(IntOpt) Sets the value of TCP_KEEPIDLE in seconds for each server socket. Not supported on OS X.</td>
              </tr>
              <tr>
                       <td>topics=notifications</td>
                       <td>(ListOpt) AMQP topic(s) used for openstack notifications</td>
              </tr>
              <tr>
                       <td>until_refresh=0</td>
                       <td>(IntOpt) count of reservations until usage is refreshed</td>
              </tr>
              <tr>
                       <td>use_default_quota_class=True</td>
                       <td>(BoolOpt) whether to use default quota class for default quota</td>
              </tr>
              <tr>
                       <td>use_forwarded_for=False</td>
                       <td>(BoolOpt) Treat X-Forwarded-For as the canonical remote address. Only enable this if you have a sanitizing proxy.</td>
              </tr>
              <tr>
                       <td>use_stderr=True</td>
                       <td>(BoolOpt) Log output to standard error</td>
              </tr>
              <tr>
                       <td>use_syslog=False</td>
                       <td>(BoolOpt) Use syslog for logging.</td>
              </tr>
              <tr>
                       <td>use_tpool=False</td>
                       <td>(BoolOpt) Enable the experimental use of thread pooling for all DB API calls</td>
              </tr>
              <tr>
                       <td>verbose=False</td>
                       <td>(BoolOpt) Print more verbose output (set logging level to INFO instead of default WARNING level).</td>
              </tr>
       </tbody>
        </table>
        </para>