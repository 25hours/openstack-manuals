<?xml version="1.0" encoding="UTF-8"?>
     <!-- Warning: Do not edit this file. It is automatically
          generated and your changes will be overwritten.
          The tool to do so lives in the tools directory of this
          repository -->
     <para xmlns="http://docbook.org/ns/docbook" version="5.0">
     <table rules="all">
     <caption>Description of configuration options for <literal>[object-auditor]</literal> in <literal>object-server.conf-sample</literal></caption>
     <col width="50%"/>
     <col width="50%"/>
     <thead>
        <tr>
             <td>Configuration option=Default value</td>
             <td>Description</td>
        </tr>
     </thead>
     <tbody>
                    <tr>
                        <td>log_name=object-auditor</td><td>Label used when logging</td>
                    </tr>
                    <tr>
                        <td>log_facility=LOG_LOCAL0</td><td>Syslog log facility</td>
                    </tr>
                    <tr>
                        <td>log_level=INFO</td><td>Logging level</td>
                    </tr>
                    <tr>
                        <td>log_address=/dev/log</td><td>No help text available for this option</td>
                    </tr>
                    <tr>
                        <td>files_per_second=20</td><td>Maximum files audited per second. Should be tuned according to individual system specs. 0 is unlimited.</td>
                    </tr>
                    <tr>
                        <td>bytes_per_second=10000000</td><td>Maximum bytes audited per second. Should be tuned according to individual system specs. 0 is unlimited. mounted to prevent accidentally writing to the root device process simultaneously (it will actually accept(2) N + 1). Setting this to one (1) will only handle one request at a time, without accepting another request concurrently. By increasing the number of workers to a much higher value, one can reduce the impact of slow file system operations in one request from negatively impacting other requests. underlying filesystem does not support it. to setup custom log handlers. bytes you'd like fallocate to reserve, whether there is space for the given file size or not. This is useful for systems that behave badly when they completely run out of space; you can make the services pretend they're out of space early. container server.  For most cases, this should be `egg:swift#container`.</td>
                    </tr>
                    <tr>
                        <td>log_time=3600</td><td>Frequency of status logs in seconds.</td>
                    </tr>
                    <tr>
                        <td>zero_byte_files_per_second=50</td><td>Maximum zero byte files audited per second.</td>
                    </tr>
                    <tr>
                        <td>recon_cache_path=/var/cache/swift</td><td>No help text available for this option</td>
                    </tr>
                    <tr>
                        <td>object_size_stats=</td><td>No help text available for this option</td>
                    </tr>
             </tbody>
                        </table>
                        </para>
