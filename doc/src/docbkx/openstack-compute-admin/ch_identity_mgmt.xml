<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
        <!-- Some useful entities borrowed from HTML -->
        <!ENTITY ndash  "&#x2013;">
        <!ENTITY mdash  "&#x2014;">
        <!ENTITY hellip "&#x2026;">
<!-- Useful for describing APIs -->
        <!ENTITY GET    '<command xmlns="http://docbook.org/ns/docbook">GET</command>'>
        <!ENTITY PUT    '<command xmlns="http://docbook.org/ns/docbook">PUT</command>'>
        <!ENTITY POST   '<command xmlns="http://docbook.org/ns/docbook">POST</command>'>
        <!ENTITY DELETE '<command xmlns="http://docbook.org/ns/docbook">DELETE</command>'>
]>
<chapter xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
  xml:id="ch-identity-mgmt-config">
  <title>Identity Management</title>
  <para>The OpenStack Identity Service, code-named Keystone, is the
    default identity service for OpenStack. After you install the
    Identity Service, you configure it through the
      <filename>etc/keystone.conf</filename> configuration file, the
    PasteDeploy <filename>etc/keystone-paste.ini</filename>
    configuration file, and possibly a separate logging configuration
    file. You use the keystone command-line client to initialize data
    into the Identity Service.</para>
  <xi:include href="../common/section_keystone-concepts.xml"/>
  <section xml:id="memcached-and-system-time">
    <title>Memcached and System Time</title>
    <para>If you use <link xlink:href="http://memcached.org/"
        >memcached</link> with the Identity Service &ndash; for example, using the
      memcache token driver or the <literal>auth_token</literal>
      middleware &ndash; ensure that the system time of memcached
      hosts is set to UTC. Memcached uses the host's system time in
      determining whether a key has expired, whereas the Identity Service sets key
      expiry in UTC. The timezone used by the Identity Service and memcached must
      match if key expiry is to behave as expected.</para>
  </section>
  <xi:include href="../common/section_keystone-ssl-config.xml"/>
  <section xml:id="user-crud">
    <title>User CRUD</title>
    <para>The Identity Service provides a user CRUD filter that can be
      added to the public_api pipeline. This user crud filter allows
      users to use a HTTP PATCH to change their own password. To
      enable this extension you should define a
        <literal>user_crud_extension</literal> filter, insert it after
      the <literal>*_body</literal> middleware and before the
        <literal>public_service</literal> app in the public_api WSGI
      pipeline in <filename>keystone-paste.ini</filename>. For example:</para>
    <screen><computeroutput>[filter:user_crud_extension]
paste.filter_factory = keystone.contrib.user_crud:CrudExtension.factory

[pipeline:public_api]
pipeline = stats_monitoring url_normalize token_auth admin_token_auth xml_body json_body debug ec2_extension user_crud_extension public_service</computeroutput></screen>
    <para>Each user can change their own password with a HTTP PATCH,
      as follows:</para>
    <screen><prompt>$</prompt> <userinput>&gt; curl -X PATCH http://localhost:5000/v2.0/OS-KSCRUD/users/&lt;userid&gt; -H &quot;Content-type: application/json&quot;  \
      -H &quot;X_Auth_Token: &lt;authtokenid&gt;&quot; -d '{&quot;user&quot;: {&quot;password&quot;: &quot;ABCD&quot;, &quot;original_password&quot;: &quot;DCBA&quot;}}'</userinput></screen>
    <para>If the backend is kvs or sql, all users' passwords are
      changed and their tokens are deleted.</para>
  </section>
  <xi:include href="../common/section_identity-configure.xml"/>
  <section xml:id="keystone-logging">
    <title>Configure Logging</title>
    <para>You must configure logging outside of your Identity Service
      configuration.</para>
    <para>Configure logging in the <literal>[DEFAULT]</literal>
      section of the <filename>keystone.conf</filename> file under
        <literal>log_config</literal>.</para>
    <para>To route all logging through syslog, set the
        <literal>use_syslog=true</literal> option in the
        <literal>[DEFAULT]</literal> section.</para>
    <para>A sample logging file is available with the project in the
      directory <filename>etc/logging.conf.sample</filename>. Like
      other OpenStack projects, Identity uses the `python logging
      module, which includes extensive configuration options for
      choosing the output levels and formats.</para>
    <para>See the <filename>etc/keystone.conf</filename> sample
      configuration files, which are distributed with the Identity Service.</para>
    <para>For services that have a separate <filename>paste-deploy
        ini</filename> file, you can alternatively configure
      auth_token middleware in the
        <literal>[keystone_authtoken]</literal> section in the main
      configuration file, such as <filename>nova.conf</filename>. For
      example in Compute, you can remove the middleware parameters from
        <filename>api-paste.ini</filename>, as follows:</para>
    <screen><computeroutput>[filter:authtoken]
paste.filter_factory = keystoneclient.middleware.auth_token:filter_factory</computeroutput></screen>
    <para>Set values in the <filename>nova.conf</filename> file, as
      follows:</para>
    <screen><computeroutput>[DEFAULT]
      ...
      auth_strategy=keystone

      [keystone_authtoken]
      auth_host = 127.0.0.1
      auth_port = 35357
      auth_protocol = http
      auth_uri = http://127.0.0.1:5000/
      admin_user = admin
      admin_password = SuperSekretPassword
      admin_tenant_name = service</computeroutput>    </screen>
    <note>
      <para>Middleware parameters in paste config take priority. You
        must remove these values in the
          <literal>[keystone_authtoken]</literal> section.</para>
    </note>
  </section>
  <section xml:id="monitoring">
    <title>Monitoring</title>
    <para>The Identity Service provides some basic request/response monitoring
      statistics.</para>
    <para>To enable data collection, define a
        <literal>stats_monitoring</literal> filter and include it at
      the beginning of any desired WSGI pipelines in
        <filename>keystone-paste.ini</filename>, as follows:</para>
    <screen><computeroutput>[filter:stats_monitoring]
paste.filter_factory = keystone.contrib.stats:StatsMiddleware.factory

[pipeline:public_api]
pipeline = stats_monitoring [...] public_service</computeroutput></screen>
    <para>To enable reporting of collected data, define a
        <literal>stats_reporting</literal> filter and include it near
      the end of your <literal>admin_api</literal> WSGI pipeline after
        <literal>*_body</literal> middleware and before
        <literal>*_extension</literal> filters, as follows:</para>
    <screen><computeroutput>[filter:stats_reporting]
paste.filter_factory = keystone.contrib.stats:StatsExtension.factory

[pipeline:admin_api]
pipeline = [...] json_body stats_reporting ec2_extension [...] admin_service</computeroutput></screen>
    <para>Query the admin API for statistics, as follows:</para>
    <screen><prompt>$</prompt> <userinput>curl -H 'X-Auth-Token: ADMIN' http://localhost:35357/v2.0/OS-STATS/stats</userinput></screen>
    <para>Reset collected data, as follows:</para>
    <screen><prompt>$</prompt> <userinput>curl -H 'X-Auth-Token: ADMIN' -X DELETE http://localhost:35357/v2.0/OS-STATS/stats</userinput></screen>
  </section>
  <xi:include href="../common/section_keystone_certificates-for-pki.xml"/>
  <xi:include href="../common/section_keystone-sample-conf-files.xml"/>
  <section xml:id="running-keystone">
    <title>Run the Identity Service</title>
    <para>To start the Identity Service, run the following
      command:</para>
    <screen><prompt>$</prompt> <userinput>keystone-all</userinput></screen>
    <para>This command starts two wsgi.Server instances, configured by
      the <filename>keystone.conf</filename> and
        <filename>keystone-paste.ini</filename> configuration file.
      One of these wsgi 'servers' is <literal>admin</literal> (the
      administration API) and the other is <literal>main</literal>
      (the primary/public API interface). Both of these run in a
      single process.</para>
  </section>
  <section xml:id="initializing-keystone">
    <title>Initialize the Identity Service</title>
    <para>The <command>keystone-manage</command> commands enable you to perform functions that are not available through the normal REST
      API. The following calls are supported:</para>
    <itemizedlist>
      <listitem>
        <para>
          <literal>db_sync</literal>: Sync the database.</para>
      </listitem>
      <listitem>
        <para>
          <literal>import_nova_auth</literal>: Load auth data from a
          dump created with <command>keystone-manage</command>.</para>
      </listitem>
    </itemizedlist>
    <para>Generally, the following is the first step after a source
      installation:</para>
    <screen><prompt>$</prompt> <userinput>keystone-manage db_sync</userinput></screen>
    <para>Invoking <command>keystone-manage</command> by itself gives you additional
      usage information.</para>
  </section>
  <section xml:id="configuring-services-to-work-with-keystone">
    <title>Configure Services to Work with Identity Service</title>
    <para>Once Keystone is installed and running, services need to be
      configured to work with it. To do this, we primarily install and
      configure middleware for the OpenStack service to handle
      authentication tasks or otherwise interact with the Identity Service.</para>
    <para>In general:</para>
    <itemizedlist>
      <listitem>
        <para>Clients making calls to the service pass an
          authentication token.</para>
      </listitem>
      <listitem>
        <para>The Identity Service middleware looks for and validates that
          token, taking the appropriate action.</para>
      </listitem>
      <listitem>
        <para>It also retrieves additional information from the
          token such as user name, id, tenant name, id, roles, and so on.
        </para>
      </listitem>
    </itemizedlist>
    <para>The middleware passes data to the service as
      headers.</para>
<xi:include href="../common/section_cli_keystone_credentials.xml"/>
<xi:include href="../common/section_cli_keystone_apiv3.xml"/>
<xi:include href="../common/section_cli_keystone_example_usage.xml"/>
      <xi:include href="../common/section_cli_keystone_users_tenants_roles.xml"/>
    </section>
    <section xml:id="setting-up-middleware">
      <title>Set Up Middleware</title>
      <section xml:id="keystone-auth-token-middleware">
        <title>Identity Service Auth-Token Middleware</title>
        <para>The the Identity Service auth_token middleware is a WSGI component
          that can be inserted in the WSGI pipeline to handle
          authenticating tokens with the Identity Service.</para>
      </section>
      <section xml:id="configuring-nova-to-use-keystone">
        <title>Configure Compute to Use the Identity Service</title>
        <para>When configuring Compute, it is important to create a nova
          user in the service tenant and include the nova user's login
          information in /etc/nova/nova.conf</para>
      </section>
      <section xml:id="configuring-swift-to-use-keystone">
        <title>Configure Object Storage to Use the Identity Service</title>
        <para>Similar to Compute, you can configure Object Storage to use the Identity Service
          for authentication rather than its built in
          'tempauth'.</para>
        <orderedlist numeration="arabic">
          <listitem>
            <para>Add a service endpoint for Object Storage to the Identity Service
            </para>
          </listitem>
          <listitem>
            <para>Configure the paste file for swift-proxy,
                <filename>/etc/swift/proxy-server.conf</filename>.
            </para>
          </listitem>
          <listitem>
            <para>Reconfigure Object Storage's proxy server to use the Identity Service
              instead of TempAuth. Here's an example
              `/etc/swift/proxy-server.conf`:</para>
            <screen><computeroutput>
[DEFAULT]
bind_port = 8888
user = &lt;user&gt;

[pipeline:main]
pipeline = catch_errors healthcheck cache authtoken keystone proxy-server

[app:proxy-server]
use = egg:swift#proxy
account_autocreate = true

[filter:keystone]
paste.filter_factory = keystoneclient.middleware.swift_auth:filter_factory
operator_roles = admin, swiftoperator

[filter:authtoken]
paste.filter_factory = keystoneclient.middleware.auth_token:filter_factory
# Delaying the auth decision is required to support token-less
# usage for anonymous referrers ('.r:*').
delay_auth_decision = true
service_port = 5000
service_host = 127.0.0.1
auth_port = 35357
auth_host = 127.0.0.1
auth_token = ADMIN
admin_token = ADMIN
cache = swift.cache

[filter:cache]
use = egg:swift#memcache
set log_name = cache

[filter:catch_errors]
use = egg:swift#catch_errors

[filter:healthcheck]
use = egg:swift#healthcheck</computeroutput>
</screen>
          </listitem>
          <listitem>
            <para>Restart Object Storage services.</para>
          </listitem>
          <listitem>
            <para>Verify that the Identity Service is
              providing authentication to Object Storage.</para>
            <screen>
              <prompt>$</prompt> <userinput>swift -V 2 -A http://localhost:5000/v2.0 -U admin:admin -K ADMIN stat</userinput>
            </screen>
          </listitem>
        </orderedlist>
      </section>
      <section
        xml:id="configuring-swift-with-s3-emulation-to-use-keystone">
        <title>Configure Object Storage with S3 Emulation to Use
          the Identity Service</title>
        <para>The Identity Service support validating S3 tokens using the same
          tokens as the generated EC2 tokens. When you have generated
          a pair of EC2 access token and secret you can access your
          Object Storage cluster directly with the S3 API.</para>
        <orderedlist numeration="arabic">
          <listitem>
            <para>Configure the paste file for swift-proxy
              (`/etc/swift/proxy-server.conf`) to use S3token and
              Swift3 middleware. You must have the s3token middleware
              in the pipeline when using the Identity Service and swift3.</para>
            <para>Here's an example:</para>
            <screen><computeroutput>
[DEFAULT]

bind_port = 8080
user = &lt;user&gt;

[pipeline:main]
pipeline = catch_errors healthcheck cache swift3 s3token authtoken keystone proxy-server

[app:proxy-server]
use = egg:swift#proxy
account_autocreate = true

[filter:catch_errors]
use = egg:swift#catch_errors

[filter:healthcheck]
use = egg:swift#healthcheck

[filter:cache]
use = egg:swift#memcache

[filter:swift3]
use = egg:swift3#swift3

[filter:keystone]
paste.filter_factory = keystoneclient.middleware.swift_auth:filter_factory
operator_roles = admin, swiftoperator

[filter:s3token]
paste.filter_factory = keystoneclient.middleware.s3_token:filter_factory
auth_port = 35357
auth_host = 127.0.0.1
auth_protocol = http

[filter:authtoken]
paste.filter_factory = keystoneclient.middleware.auth_token:filter_factory
service_port = 5000
service_host = 127.0.0.1
auth_port = 35357
auth_host = 127.0.0.1
auth_protocol = http
auth_token = ADMIN
admin_token = ADMIN</computeroutput>
</screen>
          </listitem>
          <listitem>
            <para>You can then access directly Object Storage through the S3
              API. The following example shows how to use the `boto` library:</para>
            <screen><computeroutput>import boto
import boto.s3.connection

connection = boto.connect_s3(
    aws_access_key_id='&lt;ec2 access key for user&gt;',
    aws_secret_access_key='&lt;ec2 secret access key for user&gt;',
    port=8080,
    host='localhost',
    is_secure=False,
    calling_format=boto.s3.connection.OrdinaryCallingFormat())</computeroutput>
</screen>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="configuring-keystone-for-ldap-backend">
        <title>Configure the Identity Service for an LDAP Backend</title>
        <para>As an alternative to the SQL Database backing store,
          the Identity Service can use a directory server to provide the Identity
          service. An example schema for OpenStack looks like
          this:</para>
        <screen><computeroutput>dn: dc=openstack,dc=org
dc: openstack
objectClass: dcObject
objectClass: organizationalUnit
ou: openstack

dn: ou=UserGroups,dc=openstack,dc=org
objectClass: organizationalUnit
ou: UserGroups

dn: ou=Users,dc=openstack,dc=org
objectClass: organizationalUnit
ou: Users

dn: ou=Roles,dc=openstack,dc=org
objectClass: organizationalUnit
ou: Roles

dn: ou=Projects,dc=openstack,dc=org
objectClass: organizationalUnit
ou: Projects

dn: cn=9fe2ff9ee4384b1894a90878d3e92bab,ou=Roles,dc=openstack,dc=org
objectClass: organizationalRole
ou: _member_
cn: 9fe2ff9ee4384b1894a90878d3e92bab</computeroutput>
</screen>
        <para>The corresponding entries in the Identity Service configuration
          file are:</para>
        <screen><computeroutput>[DEFAULT]
public_endpoint = http://localhost:%(public_port)s/
admin_endpoint = http://localhost:%(admin_port)s/

member_role_id = 9fe2ff9ee4384b1894a90878d3e92bab
member_role_name = _member_

[ldap]
url = ldap://localhost
user = dc=Manager,dc=openstack,dc=org
password = badpassword
suffix = dc=openstack,dc=org
use_dumb_member = True

user_tree_dn = ou=Users,dc=openstack,dc=org
user_domain_id_attribute = businessCategory
user_attribute_ignore = enabled,email,tenants,tenantId

tenant_tree_dn = ou=Projects,dc=openstack,dc=org
tenant_desc_attribute = description
tenant_domain_id_attribute = businessCategory
tenant_attribute_ignore = enabled

role_tree_dn = ou=Roles,dc=openstack,dc=org</computeroutput>
</screen>
        <para>The default object classes and attributes are
          intentionally simplistic. They reflect the common standard
          objects according to the LDAP RFCs. However, in a live
          deployment, the correct attributes can be overridden to
          support a preexisting, more complex schema. For example, in
          the user object, the objectClass posixAccount from RFC2307
          is very common. If this is the underlying objectclass, then
          the <emphasis>uid</emphasis> field should probably be
            <emphasis>uidNumber</emphasis> and
            <emphasis>username</emphasis> field either
            <emphasis>uid</emphasis> or <emphasis>cn</emphasis>. To
          change these two fields, the corresponding entries in the
          the Identity Service configuration file are:</para>
        <screen><computeroutput>[ldap]
user_id_attribute = uidNumber
user_name_attribute = cn</computeroutput>
</screen>
        <para>Depending on your specific deployment,
          you can modify a set of allowed actions for each object type. For
          example, when users are managed by another tool and you have
          only read access, the configuration is:</para>
        <screen><computeroutput>[ldap]

user_allow_create = False
user_allow_update = False
user_allow_delete = False

tenant_allow_create = True
tenant_allow_update = True
tenant_allow_delete = True

role_allow_create = True
role_allow_update = True
role_allow_delete = True</computeroutput>
</screen>
        <para>There are some configuration options for filtering
          users, tenants and roles, if the backend provides too 
          much output, the configuration looks as follows:</para>
        <screen><computeroutput>[ldap]
user_filter = (memberof=CN=openstack-users,OU=workgroups,DC=openstack,DC=com)
tenant_filter =
role_filter =</computeroutput>
</screen>
        <para>If the directory server does not have an
          attribute enabled of type boolean for the user, you can use
          several configuration parameters to extract
          the value from an integer attribute, like in Active
          Directory:</para>
        <screen><computeroutput>[ldap]
user_enabled_attribute = userAccountControl
user_enabled_mask      = 2
user_enabled_default   = 512</computeroutput>
</screen>
        <para>In this case the attribute is an integer and the
          enabled attribute is listed in bit 1, so the if the mask
          configured <emphasis>user_enabled_mask</emphasis> is
          different from 0, it gets the value from the field
            <emphasis>user_enabled_attribute</emphasis> and it makes
          an ADD operation with the value indicated on
            <emphasis>user_enabled_mask</emphasis> and if the value
          matches the mask then the account is disabled.</para>
        <para>It also saves the value without mask to the user
          identity in the attribute
            <emphasis>enabled_nomask</emphasis>. This is needed in
          order to set it back in case that we must change it to
          enable/disable a user because it contains more information
          than the status like password expiration. Last setting
            <emphasis>user_enabled_mask</emphasis> is needed in order
          to create a default value on the integer attribute (512 =
          NORMAL ACCOUNT on AD)</para>
        <para>In case of Active Directory the classes and attributes
          could not match the specified classes in the LDAP module so
          you can configure them, as follows:</para>
        <screen><computeroutput>[ldap]
user_objectclass         = person
user_id_attribute        = cn
user_name_attribute      = cn
user_mail_attribute      = mail
user_enabled_attribute   = userAccountControl
user_enabled_mask        = 2
user_enabled_default     = 512
user_attribute_ignore    = tenant_id,tenants
tenant_objectclass       = groupOfNames
tenant_id_attribute      = cn
tenant_member_attribute  = member
tenant_name_attribute    = ou
tenant_desc_attribute    = description
tenant_enabled_attribute = extensionName
tenant_attribute_ignore  =
role_objectclass         = organizationalRole
role_id_attribute        = cn
role_name_attribute      = ou
role_member_attribute    = roleOccupant
role_attribute_ignore    =</computeroutput></screen>
      </section>
      <section xml:id="reference-for-ldap-config-options">
        <title>Reference for LDAP Configuration Options in
          keystone.conf</title>
        <xi:include href="../common/tables/ldap-keystone-conf.xml"/>
      </section>
      <section
        xml:id="auth-token-middleware-with-username-and-password">
        <title>Auth-Token Middleware with Username and
          Password</title>
        <para>It is also possible to configure the Identity Service's auth_token
          middleware using the 'admin_user' and 'admin_password'
          options. When using the 'admin_user' and 'admin_password'
          options the 'admin_token' parameter is optional. If
          'admin_token' is specified, it is used only if the
          specified token is still valid.</para>
        <para>Here is an example paste config filter that makes use
          of the 'admin_user' and 'admin_password' parameters:</para>
        <screen><computeroutput>
[filter:authtoken]
paste.filter_factory = keystoneclient.middleware.auth_token:filter_factory
service_port = 5000
service_host = 127.0.0.1
auth_port = 35357
auth_host = 127.0.0.1
auth_token = 012345SECRET99TOKEN012345
admin_user = admin
admin_password = keystone123</computeroutput>
</screen>
        <note><para>To use this option, an admin
          tenant/role relationship is required. The admin user is
          granted access to the 'Admin' role on the 'admin' tenant.
        </para></note>
      </section>
    </section>
  <section xml:id="keystone-ssl">
    <title>Configure the Identity Service SSL Support</title>
    <para>the Identity Service might be configured to support 2-way SSL
      out-of-the-box. The x509 certificates used by the Identity Service must be
      obtained externally and configured for use with the Identity Service as
      described in this section. However, a set of sample certificates
      is provided in the <literal>examples/ssl</literal> directory
      with the Identity Service distribution for testing. Here is the
      description of each of them and their purpose:</para><itemizedlist>
        <listitem>
          <para><filename>ca.pem</filename>. Certificate Authority
            chain to validate against.</para>
        </listitem>
        <listitem>
          <para><filename>keystone.pem</filename>. Public certificate
            for the Identity Service server.</para>
        </listitem>
        <listitem>
          <para><filename>middleware.pem</filename>. Public and
            private certificate for the Identity Service middleware/client.</para>
        </listitem>
        <listitem>
          <para><filename>cakey.pem</filename>. Private key for the
            CA.</para>
        </listitem>
        <listitem>
          <para><filename>keystonekey.pem</filename>. Private key for
            the Identity Service server.</para>
        </listitem>
      </itemizedlist>
<note><para>You can name these certificates whatever you want, or combine the public/private keys in
      the same file if you wish. These certificates are just provided
      as an example.</para></note>
    <para>To enable SSL with client authentication, modify the
      <literal>etc/keystone.conf</literal> file accordingly under
      the <literal>[ssl]</literal> section. SSL configuration example
      using the included sample certificates:</para>
    <screen><computeroutput>[ssl]
enable = True
certfile = &lt;path to keystone.pem&gt;
keyfile = &lt;path to keystonekey.pem&gt;
ca_certs = &lt;path to ca.pem&gt;
cert_required = True</computeroutput></screen>
    <para>Example:</para>
    <screen><computeroutput>[ssl]
      enable = True
      certfile = /home/agentl/openstack/tests/certs/signing_cert.pem
      keyfile = /home/agentl/openstack/tests/certs/private_key.pem
ca_certs = /home/agentl/openstack/tests/certs/cacert.pem
cert_required = True</computeroutput></screen>
    <para>
      <itemizedlist>
        <listitem>
          <para><literal>enable</literal>. True enables SSL. Defaults to False.</para>
        </listitem>
        <listitem>
          <para><literal>certfile</literal>. Path to the Identity Service public certificate
            file.</para>
        </listitem>
        <listitem>
          <para><literal>keyfile</literal>. Path to the Identity Service private certificate file. If
            the private key is included in the certfile, the keyfile
            may be omitted.</para>
        </listitem>
        <listitem>
          <para><literal>ca_certs</literal>. Path to CA trust chain.</para>
        </listitem>
        <listitem>
          <para><literal>cert_required</literal>. Requires client certificate. Defaults
            to False.</para>
        </listitem>
      </itemizedlist>
    </para>
  </section>
  <xi:include href="../common/section_keystone_db_sync.xml"/>
  <xi:include href="../common/section_keystone-external-auth.xml"/>
  <xi:include href="../common/section_identity-troubleshooting.xml"/>
</chapter>
