<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
    xml:id="ch_image_mgmt">
    <title>Image Management</title>
    <para>The OpenStack Image Service, code-named <emphasis role="italic">glance</emphasis>,
        provides functionality for discovering, registering, and retrieving virtual machine images.
        The service includes a <link
            xlink:href="http://api.openstack.org/api-ref.html#os-images-2.0">RESTful API</link> that
        allows users to query VM image metadata and retrieve the actual image with HTTP requests.
        You can also use the <link
            xlink:href="http://docs.openstack.org/cli/quick-start/content/glance_client.html">glance
            command-line tool</link>, or the <link
            xlink:href="http://docs.openstack.org/developer/python-glanceclient/">Python API</link>
        to accomplish the same tasks.</para>
    <para>VM images made available through OpenStack Image Service can be stored in a variety of
        locations. The OpenStack Image Service supports the following backend stores:</para>
    <itemizedlist>
        <listitem>
            <para>OpenStack Object Storage - OpenStack Object Storage (code-named <emphasis
                    role="italic">swift</emphasis>) is the highly-available object storage project
                in OpenStack.</para>
        </listitem>

        <listitem>
            <para>Filesystem - The default backend that OpenStack
                Image Service uses to store virtual machine images is
                the filesystem backend. This simple backend writes
                image files to the local filesystem.</para>
        </listitem>

        <listitem>
            <para>S3 - This backend allows OpenStack Image Service to
                store virtual machine images in Amazonâ€™s S3
                service.</para>
        </listitem>

        <listitem>
            <para>HTTP - OpenStack Image Service can read virtual
                machine images that are available via HTTP somewhere
                on the Internet. This store is readonly.</para>
        </listitem>
        <listitem>
            <para>Rados Block Device (RBD) - This backend stores images inside of a Ceph storage
                cluster using Ceph's RBD interface.</para>
        </listitem>
        <listitem>
            <para>GridFS - This backend stores images inside of MongoDB.</para>
        </listitem>
    </itemizedlist>

    <para>This chapter assumes you have a working installation of the Image Service, with a working
        endpoint and users created in the Identity Service, plus you have sourced the environment
        variables required by the nova client and glance client.</para>
    <xi:include href="../common/section_tenant-specific-image-storage.xml"/>
    <xi:include href="adding-images.xml"/>
    <section xml:id="starting-images">
        <title>Getting virtual machine images</title>
        <?dbhtml stop-chunking?>
        <para>Refer to the <link
                xlink:href="http://docs.openstack.org/trunk/openstack-image/content/ch_obtaining_images.html"
                >OpenStack Virtual Machine Image Guide</link> for detailed
            information.</para>
    <section xml:id="tool-support-creating-new-images">
        <?dbhtml stop-chunking?>
        <title>Tool support for creating images</title>
        <para>There are several open-source third-party tools
            available that simplify the task of creating new virtual
            machine images. Refer to the <link
                xlink:href="http://docs.openstack.org/trunk/openstack-image/content/ch_creating_images_automatically.html"
                >OpenStack Virtual Machine Image Guide</link> for detailed
            information.</para>
        </section>
    <section xml:id="image-customizing-what-you-need-to-know">
        <?dbhtml stop-chunking?>
        <title>Customizing an image for OpenStack</title>
        <para>The <link
            xlink:href="http://docs.openstack.org/trunk/openstack-image/content/ch_openstack_images.html"
            >OpenStack Virtual Machine Image Guide</link> describes what customizations you should to
            your image to maximize compatibility with
            OpenStack.</para>
        </section>
    <section xml:id="manually-creating-qcow2-images">
        <title>Creating custom raw or QCOW2 images</title>
        <para>This <link
            xlink:href="http://docs.openstack.org/trunk/openstack-image/content/ch_creating_images_manually.html"
            >OpenStack Virtual Machine Image Guide</link> describes how to create a raw or QCOW2
            image from a Linux installation ISO file. Raw images are
            the simplest image file format and are supported by all of
            the hypervisors. QCOW2 images have several advantages over
            raw images. They take up less space than raw images
            (growing in size as needed), and they support snapshots.<note>
                <para>QCOW2 images are only supported with KVM and
                    QEMU hypervisors.</para>
            </note></para>
    </section>
    </section>
    <section xml:id="booting-a-test-image">
        <title>Booting a test image</title>
        <para>The following assumes you are using QEMU or KVM in your
            deployment.</para>
        <para>Download a CirrOS test image:</para>
        <screen>
<prompt>$</prompt> <userinput>wget https://launchpad.net/cirros/trunk/0.3.0/+download/cirros-0.3.0-x86_64-disk.img</userinput>
            </screen>
        <para>Add the image to glance:</para>
        <screen>
<prompt>$</prompt> <userinput>name=cirros-0.3.0-x86_64</userinput>
<prompt>$</prompt> <userinput>image=cirros-0.3.0-x86_64-disk.img</userinput>
<prompt>$</prompt> <userinput>glance image-create --name=$name --is-public=true --container-format=bare --disk-format=qcow2 &lt; $image</userinput>
            </screen>
        <para>Check that adding the image was successful (Status
            should be ACTIVE when the operation is complete):</para>
        <screen>
<prompt>$</prompt> <userinput>nova image-list</userinput>
<computeroutput>
+--------------------------------------+---------------------+--------+--------+
|                  ID                  |         Name        | Status | Server |
+--------------------------------------+---------------------+--------+--------+
| 254c15e1-78a9-4b30-9b9e-2a39b985001c | cirros-0.3.0-x86_64 | ACTIVE |        |
+--------------------------------------+---------------------+--------+--------+
</computeroutput>
            </screen>
        <para>Create a keypair so you can ssh to the instance: </para>
        <screen>
<prompt>$</prompt> <userinput>nova keypair-add test > test.pem</userinput>
<prompt>$</prompt> <userinput>chmod 600 test.pem</userinput>
            </screen>
        <para>In general, you need to use an ssh keypair to log in to
            a running instance, although some images have built-in
            accounts created with associated passwords. However, since
            images are often shared by many users, it is not advised
            to put passwords into the images. Nova therefore supports
            injecting ssh keys into instances before they are booted.
            This allows a user to log in to the instances that he or
            she creates securely. Generally the first thing that a
            user does when using the system is create a keypair.</para>
        <para>Keypairs provide secure authentication to your
            instances. As part of the first boot of a virtual image,
            the private key of your keypair is added to
            authorized_keys file of the login account. Nova generates
            a public and private key pair, and sends the private key
            to the user. The public key is stored so that it can be
            injected into instances.</para>
        <para>Run (boot) a test instance:</para>
        <screen>
<prompt>$</prompt> <userinput>nova boot --image cirros-0.3.0-x86_64 --flavor m1.small --key_name test my-first-server</userinput>
            </screen>
        <para>Here's a description of the parameters used
            above:</para>
        <itemizedlist>
            <listitem>
                <para>
                    <literal>--image</literal>: the name or ID of the
                    image we want to launch, as shown in the output of
                        <command>nova image-list</command></para>
            </listitem>
            <listitem>
                <para>
                    <literal>--flavor</literal>: the name or ID of the
                    size of the instance to create (number of vcpus,
                    available RAM, available storage). View the list
                    of available flavors by running <command>nova
                        flavor-list</command></para>
            </listitem>
            <listitem>
                <para>
                    <literal>-key_name</literal>: the name of the key
                    to inject into the instance at launch.</para>
            </listitem>
        </itemizedlist>
        <para>Check the status of the instance you launched:</para>
        <screen>
<prompt>$</prompt> <userinput>nova list</userinput>
            </screen>
        <para>The instance will go from BUILD to ACTIVE in a short
            time, and you should be able to connect via ssh as
            'cirros' user, using the private key you created. If your
            ssh keypair fails for some reason, you can also log in
            with the default cirros password:
                <literal>cubswin:)</literal></para>
        <screen>
<prompt>$</prompt> <userinput>ipaddress=... # Get IP address from "nova list"</userinput>
<prompt>$</prompt> <userinput>ssh -i test.pem -l cirros $ipaddress</userinput>
        </screen>
        <para>The 'cirros' user is part of the sudoers group, so you
            can escalate to 'root' via the following command when
            logged in to the instance:</para>
        <screen>
<prompt>$</prompt> <userinput>sudo -i</userinput>
        </screen>

    </section>

    <section xml:id="deleting-instances">

        <title>Tearing down (deleting) Instances</title>

        <para>When you are done with an instance, you can tear it down
            using the <command>nova delete</command> command, passing
            either the instance name or instance ID as the argument.
            You can get a listing of the names and IDs of all running
            instances using the <command>nova list</command>. For
            example:</para>
        <screen>
<prompt>$</prompt> <userinput>nova list</userinput>
<computeroutput>
+--------------------------------------+-----------------+--------+----------+
|                  ID                  |       Name      | Status | Networks |
+--------------------------------------+-----------------+--------+----------+
| 8a5d719a-b293-4a5e-8709-a89b6ac9cee2 | my-first-server | ACTIVE |          |
+--------------------------------------+-----------------+--------+----------+
</computeroutput>
<prompt>$</prompt> <userinput>nova delete my-first-server</userinput>
        </screen>

    </section>
    <section xml:id="pausing-and-suspending-instances">

        <title>Pausing and Suspending Instances</title>
        <para>Since the release of the API in its 1.1 version, it is
            possible to pause and suspend instances.</para>
        <warning>
            <para>Pausing and Suspending instances only apply to
                KVM-based hypervisors and XenServer/XCP Hypervisors.
            </para>
        </warning>
        <para>Pause/ Unpause : Stores the content of the VM in memory
            (RAM).</para>
        <para>Suspend/ Resume : Stores the content of the VM on
            disk.</para>
        <para>It can be interesting for an administrator to suspend
            instances, if a maintenance is planned; or if the instance
            are not frequently used. Suspending an instance frees up
            memory and vCPUS, while pausing keeps the instance
            running, in a "frozen" state. Suspension could be compared
            to an "hibernation" mode.</para>
        <section xml:id="pausing-instance">
            <title>Pausing instance</title>
            <para>To pause an instance :</para>
            <screen>nova pause $server-id </screen>
            <para>To resume a paused instance :</para>
            <screen>nova unpause $server-id </screen>
        </section>
        <section xml:id="suspending-instance">
            <title>Suspending instance</title>
            <para>To suspend an instance :</para>
            <screen>nova suspend $server-id </screen>
            <para>To resume a suspended instance :</para>
            <screen>nova resume $server-id </screen>
        </section>
    </section>
    <section xml:id="specify-host-to-boot-instances-on">
        <title>Select a specific host to boot instances on</title>
        <para>If you have the appropriate permissions, you can select the specific host where the
            instance will be launched. This is done using the <literal>--availability_zone
                    <replaceable>zone</replaceable>:<replaceable>host</replaceable></literal>
            arguments to the <command>nova boot</command> command. For example:</para>
        <para>
            <screen><prompt>$</prompt> <userinput>nova boot --image &lt;uuid&gt; --flavor m1.tiny --key_name test --availability-zone nova:server2</userinput></screen>
        </para>
        <para>Starting with the Grizzly release, you can specify which roles are permitted to boot
            an instance to a specific host with the <literal>create:forced_host</literal> setting
            within <filename>policy.json</filename> on the desired roles. By default, only the admin
            role has this setting enabled.</para>
        <para>You can view the list of valid compute hosts by using the <command>nova
                hypervisor-list </command>command, for
            example:<screen><prompt>$</prompt> <userinput>nova hypervisor-list</userinput>
<computeroutput>+----+---------------------+
| ID | Hypervisor hostname |
+----+---------------------+
| 1  | server2             |
| 2  | server3             |
| 3  | server4             |
+----+---------------------+</computeroutput></screen></para>
        <note>
            <para>The <literal>--availability_zone
                        <replaceable>zone</replaceable>:<replaceable>host</replaceable></literal>
                flag replaced the <literal>--force_hosts</literal> scheduler hint for specifying a
                specific host, starting with the Folsom release.</para>
        </note>
    </section>
    <section xml:id="creating-images-from-running-instances">
        <title>Creating images from running instances with KVM and
            Xen</title>
        <para>See the <link
                xlink:href="http://docs.openstack.org/cli/quick-start/content/nova_client.html#images"
                >Manage Images Section of the OpenStack Clients Guide</link> for information on how
            to create images from running instances.</para>

    </section>
    <section xml:id="replicating-images">
        <title>Replicating images across multiple data centers </title>
        <para>The image service comes with a tool called
                <command>glance-replicator</command> that can be used
            to populate a new glance server using the images stored in
            an existing glance server. The images in the replicated
            glance server preserve the uuids, metadata, and image data
            from the original. Running the tool will output a set of
            commands that it
            supports:<screen>$ <userinput>glance-replicator</userinput>
<computeroutput>Usage: glance-replicator &lt;command> [options] [args]

Commands:

    help &lt;command>  Output help for one of the commands below

    compare         What is missing from the slave glance?
    dump            Dump the contents of a glance instance to local disk.
    livecopy        Load the contents of one glance instance into another.
    load            Load the contents of a local directory into glance.
    size            Determine the size of a glance instance if dumped to disk.

Options:
  --version             show program's version number and exit
  -h, --help            show this help message and exit
  -c CHUNKSIZE, --chunksize=CHUNKSIZE
                        Amount of data to transfer per HTTP write
  -d, --debug           Print debugging information
  -D DONTREPLICATE, --dontreplicate=DONTREPLICATE
                        List of fields to not replicate
  -m, --metaonly        Only replicate metadata, not images
  -l LOGFILE, --logfile=LOGFILE
                        Path of file to log to
  -s, --syslog          Log to syslog instead of a file
  -t TOKEN, --token=TOKEN
                        Pass in your authentication token if you have one. If
                        you use this option the same token is used for both
                        the master and the slave.
  -M MASTERTOKEN, --mastertoken=MASTERTOKEN
                        Pass in your authentication token if you have one.
                        This is the token used for the master.
  -S SLAVETOKEN, --slavetoken=SLAVETOKEN
                        Pass in your authentication token if you have one.
                        This is the token used for the slave.
  -v, --verbose         Print more verbose output</computeroutput></screen></para>
        <para>The replicator supports the following commands:</para>
        <simplesect>
            <title>livecopy: Load the contents of one glance instance
                into another</title>
            <para>
                <screen><userinput>glance-replicator livecopy <replaceable>fromserver:port</replaceable> <replaceable>toserver:port</replaceable></userinput></screen>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><replaceable>fromserver:port</replaceable>:
                            the location of the master glance
                            instance</para>
                    </listitem>
                    <listitem>
                        <para><replaceable>toserver:port</replaceable>:
                            the location of the slave glance instance.
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>Take a copy of the fromserver, and dump it onto the
                toserver. Only images visible to the user running the
                replicator will be copied if glance is configured to
                use the Identity service (keystone) for
                authentication. Only images active on
                    <replaceable>fromserver </replaceable>are copied
                across. The copy is done "on-the-wire" so there are no
                large temporary files on the machine running the
                replicator to clean up.</para>
        </simplesect>
        <simplesect>
            <title>dump: Dump the contents of a glance instance to
                local disk</title>
            <para>
                <screen><userinput>glance-replicator dump <replaceable>server:port</replaceable> <replaceable>path</replaceable></userinput></screen>
            </para>
            <para><itemizedlist>
                    <listitem>
                        <para><replaceable>server:port</replaceable>:
                            the location of the glance instance.
                        </para>
                    </listitem>
                    <listitem>
                        <para><replaceable>path</replaceable>: a
                            directory on disk to contain the data.
                        </para>
                    </listitem>
                </itemizedlist>Do the same thing as
                    <command>livecopy</command>, but dump the contents
                of the glance server to a directory on disk. This
                includes metadata and image data. Depending on the
                size of the local glance repository, the resulting
                dump may consume a large amount of local storage.
                Therefore, we recommend you use the
                    <command>size</command> comamnd first to determine
                the size of the resulting dump.</para>
        </simplesect>
        <simplesect>
            <title>load: Load a directory created by the dump command
                into a glance server</title>
            <para>
                <screen><userinput>glance-replicator load server:port path</userinput></screen>
                <itemizedlist>
                    <listitem>
                        <para><replaceable>server:port</replaceable>:
                            the location of the glance
                            instance.</para>
                    </listitem>
                    <listitem>
                        <para><replaceable>path</replaceable>: a
                            directory on disk containing the
                            data.</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>Load the contents of a local directory into glance.</para>
            <para>The <command>dump</command> and
                    <command>load</command> are useful when
                replicating across two glance servers where a direct
                connection across the two glance hosts is impossible
                or too slow.</para>
        </simplesect>
        <simplesect>
            <title>compare: Compare the contents of two glance
                servers</title>
            <para><screen><userinput>glance-replicator compare <replaceable>fromserver:port</replaceable> <replaceable>toserver:port</replaceable></userinput></screen><itemizedlist>
                    <listitem>
                        <para><replaceable>fromserver:port</replaceable>:
                            the location of the master glance
                            instance.</para>
                    </listitem>
                    <listitem>
                        <para><replaceable>
                                toserver:port</replaceable>: the
                            location of the slave glance instance.
                        </para>
                    </listitem>
                </itemizedlist>The <command>compare</command> command
                will show you the differences between the two servers,
                which is effectively a dry run of the
                    <command>livecopy</command> command.</para>
        </simplesect>
        <simplesect>
            <title>size: Determine the size of a glance instance if
                dumped to disk</title>
            <para><screen><userinput>glance-replicator size</userinput></screen><itemizedlist>
                    <listitem>
                        <para><replaceable>server:port</replaceable>:
                            the location of the glance
                            instance.</para>
                    </listitem>
                </itemizedlist>The <command>size</command> command
                will tell you how much disk is going to be used by
                image data in either a <command>dump</command> or a
                    <command>livecopy</command>. Note that this will
                provide raw number of bytes that would be written to
                the destination, it has no information about the
                redundancy costs associated with glance-registry
                back-ends that use replication for redundancy, such as
                Swift or Ceph.</para>
        </simplesect>
        <simplesect>
            <title>Example using livecopy</title>
            <para>Assuming you have a primary glance service running
                on a node called
                    <literal>primary.example.com</literal> with
                glance-api service running on port
                    <literal>9292</literal> (the default port) and you
                want to replicate its contents to a secondary glance
                service running on a node called
                    <literal>secondary.example.com</literal>, also on
                port 9292, you will first need to get authentication
                tokens from keystone for the primary and secondary
                glance server and then you can use the
                    <literal>glance-replicator livecopy</literal>
                command.</para>
            <para>The following example assumes that you have a
                credentials file for your primary cloud called
                    <filename>primary.openrc</filename> and one for
                your secondary cloud called
                    <filename>secondary.openrc</filename>.<screen><prompt>$</prompt> <userinput>source primary.openrc</userinput>
<prompt>$</prompt> <userinput>keystone token-get</userinput>
<computeroutput>+-----------+----------------------------------+
|  Property |              Value               |
+-----------+----------------------------------+
| expires   | 2012-11-16T03:13:08Z             |
| id        | 8a5d3afb5095430891f33f69a2791463 |
| tenant_id | dba21b41af584daeac5782ca15a77a25 |
| user_id   | add2ece6b1f94866994d3a3e3beb3d47 |
+-----------+----------------------------------+</computeroutput>
<prompt>$</prompt> <userinput>PRIMARY_AUTH_TOKEN=<replaceable>8e97fa8bcf4443cfbd3beb9079c7142f </replaceable></userinput>
<prompt>$</prompt> <userinput>source secondary.openrc</userinput>
<prompt>$</prompt> <userinput>keystone token-get</userinput>
<computeroutput>+-----------+----------------------------------+
|  Property |              Value               |
+-----------+----------------------------------+
| expires   | 2012-11-16T03:13:08Z             |
| id        | 29f777ac2c9b41a6b4ee9c3e6b85f98a |
| tenant_id | fbde89d638d947a19545b0f387ffea4d |
| user_id   | 4a7a48e7d62e4b428c78d02c1968ca7b |
+-----------+----------------------------------+</computeroutput>
<prompt>$</prompt> <userinput>SECONDARY_AUTH_TOKEN=<replaceable>29f777ac2c9b41a6b4ee9c3e6b85f98a</replaceable></userinput>
<prompt>$</prompt> <userinput>glance-replicator livecopy primary.example.com:9292 secondary.example.com:9292 -M ${PRIMARY_AUTH_TOKEN} -S ${SECONDARY_AUTH_TOKEN} </userinput></screen></para>
        </simplesect>
    </section>
</chapter>
