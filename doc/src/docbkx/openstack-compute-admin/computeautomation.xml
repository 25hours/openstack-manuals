<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!-- Some useful entities borrowed from HTML -->
<!ENTITY ndash  "&#x2013;">
<!ENTITY mdash  "&#x2014;">
<!ENTITY hellip "&#x2026;">
<!ENTITY nbsp "&#160;">
<!ENTITY CHECK  '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
<imageobject>
<imagedata fileref="img/Check_mark_23x20_02.svg"
format="SVG" scale="60"/>
</imageobject>
</inlinemediaobject>'>

<!ENTITY ARROW  '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
<imageobject>
<imagedata fileref="img/Arrow_east.svg"
format="SVG" scale="60"/>
</imageobject>
</inlinemediaobject>'>
]>
<chapter xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
    xml:id="ch_openstack-compute-automated-installations">
    <title>OpenStack Compute Automated Installations</title>
    <para>In a large-scale cloud deployment, automated installations are a requirement for
        successful, efficient, repeatable installations. Automation for installation also helps with
        continuous integration and testing. This chapter offers some tested methods for deploying
        OpenStack Compute with either Puppet (an infrastructure management platform) or Chef (an
        infrastructure management framework) paired with Vagrant (a tool for building and
        distributing virtualized development environments).</para>
    
    <section xml:id="openstack-compute-deployment-tool-with-puppet">
        <title>Deployment Tool for OpenStack using Puppet
            (dodai-deploy)</title>
        <para>The dodai-deploy is a software management tool. It
            supports OpenStack Diablo (Nova, Glance, Swift) and hadoop
            0.20.2</para>
        <simplesect>
            <title>Features</title>
            <itemizedlist>
                <listitem>
                    <para>Manage installation, uninstallation and testing of a software.</para>
                </listitem>
                <listitem>
                    <para>Support OpenStack Diablo and hadoop 0.20.2</para>
                </listitem>
                <listitem>
                    <para>Support target machines in different network segments.</para></listitem>
                <listitem>
                    <para>Provide web UI to facilitate user operations.</para></listitem>
                <listitem>
                    <para>Provide REST API to make it possible to integrate it with other tools.</para>
                </listitem>
                <listitem>
                    <para>Support parallel installation of software components.</para>
                </listitem>
            </itemizedlist>
        </simplesect>
        <simplesect>
            <title>Glossary</title>
            <itemizedlist>
                <listitem>
                    <para>Deployment server - The server in which Dodai is installed.</para>
                </listitem>
                <listitem>
                    <para>Node - The machine that is the target of installation.</para>
                </listitem>
                <listitem>
                    <para>Nova, Glance, Swift etc.</para></listitem>
                <listitem>
                    <para>Proposal - The set of the kinds of configurations which describe how to install a software. The configurations include "Node config", "Config item", "Software config", "Component config".</para></listitem>
                <listitem>
                    <para>Node config - A configuration that describes which component to be installed on a node.</para>
                </listitem>
                <listitem>
                    <para>Config item - A variable which can be used in the content of software config and component config.</para>
                </listitem>
                <listitem>
                    <para>Software config - A configuration that describes the content of a configuration file for all components.</para>
                </listitem>
                <listitem>
                    <para>Component config - A configuration that describes the content of a configuration file for only one component.</para>
                </listitem>
            </itemizedlist>
        </simplesect>
        <simplesect><title>Installation</title>
            <para>The <literal>$home</literal> in the following
                sections is the path of the home directory of the
                dodai-deploy.</para>
            <para>The following OSes are supported.</para>
            <itemizedlist>
                <listitem>
                    <para>ubuntu 10.10</para>
                </listitem>
                <listitem>
                    <para>ubuntu 11.04</para>
                </listitem>
                <listitem>
                    <para>ubuntu 11.10</para></listitem>
            </itemizedlist>
            <para>
                <orderedlist>
                    <listitem>
                        <para>Download dodai-deploy. </para>
                        <para>Execute the following commands on the
                            deployment server and all the nodes.
                            <screen>
<prompt>$</prompt> <userinput>sudo apt-get install git -y</userinput>
<prompt>$</prompt> <userinput>git clone https://github.com/nii-cloud/dodai-deploy.git</userinput>
<prompt>$</prompt> <userinput>cd dodai-deploy; git checkout 1.0</userinput>   #only used to get dodai-deploy 1.0     
                        </screen></para>
                    </listitem>
                    <listitem>
                        <para>Set up the deployment server.</para>
                        <para>Execute the following commands on
                            deployment server to install necessary
                            softwares and modify their
                            settings.</para>
            <screen>
<prompt>$</prompt> <userinput>sudo $home/setup-env/setup.sh server</userinput>
            </screen>
                   </listitem>
                    
            <listitem><para>Set up nodes.</para>
                        <para>Execute the following commands on all
                            the nodes to install necessary softwares
                            and modify their settings.</para>
                <screen>
<prompt>$</prompt> <userinput>sudo $home/setup-env/setup.sh node $server</userinput>
                </screen>
                <para>The $server in the above command is the fully qualified domain name (fqdn) of the deployment server. You can confirm the fqdn with the following command.</para>
                <screen>
<prompt>$</prompt> <userinput>sudo hostname -f</userinput>
                </screen></listitem>
            <listitem><para>Set up storage device for Swift.</para>
                <para>You must set up a storage device before swift is
                            installed. You should execute the commands
                            for a physical device or for a loopback
                            device on all nodes in which swift storage
                            server is to be installed.</para>
                        <para>
                            <itemizedlist>
                                <listitem>
                                   <para>For a physical device, use
                                   the following command.</para>
                                    <screen>
<prompt>$</prompt> <userinput>sudo $home/setup-env/setup-storage-for-swift.sh physical $storage_path $storage_dev</userinput>
                                    </screen>
                                    <para>For example,</para>
                                    <screen>
<prompt>$</prompt> <userinput>sudo $home/setup-env/setup-storage-for-swift.sh physical /srv/node sdb1</userinput>
                                    </screen>
                                </listitem>
                                <listitem>
                                   <para>For a loopback device, use
                                   the following command.</para>
                                    <screen>
<prompt>$</prompt> <userinput>sudo $home/setup-env/setup-storage-for-swift.sh loopback $storage_path $storage_dev $size</userinput>
                                    </screen>
                                    <para>For example,</para>
                                    <screen>
<prompt>$</prompt> <userinput>sudo $home/setup-env/setup-storage-for-swift.sh loopback /srv/node sdb1 4</userinput>
                                    </screen>
                                    
                                </listitem>
                            </itemizedlist>
                        </para>

            </listitem>
                    
                    <listitem>   <para>Start servers.</para>
                <para>Execute the following command on the deployment server to start the web server and job server.</para>
                <screen>
<prompt>$</prompt> <userinput>sudo $home/script/start-servers production</userinput>
                </screen>
                <para>You can stop the web server and job server with
                            the following command.</para>
                <screen>
<prompt>$</prompt> <userinput>sudo $home/script/stop-servers</userinput>
                </screen></listitem>
                </orderedlist>
            </para>
        </simplesect>
        <simplesect><title>Using web UI</title>
            <para>You can find step-by-step guidance at <literal>http://<replaceable>$deployment_server</replaceable>:3000/</literal>.</para>
        </simplesect>
        <simplesect><title>Using REST APIs</title>
            <para>An API simulator can be found at
                        <literal>http://<replaceable>$deployment_server</replaceable>:3000/rest_apis/index.html</literal>.
                You can get the list of REST APIs with it. You can
                also execute APIs by simply filling in parameters and
                clicking the "Execute" button.</para>
        </simplesect>
        <simplesect><title>Notes</title>
            <orderedlist>
                <listitem>
                    <para>SSH login nova instance after test of nova </para>
                    <para>An instance will be started during the test of nova. After the test,
                    you can login the instance by executing the following commands.</para>
                    <screen>
<prompt>$</prompt> <prompt>sudo -i</prompt>
<prompt>$</prompt> <prompt>cd /tmp/nova</prompt>
<prompt>$</prompt> <prompt>. env/novarc</prompt>
<prompt>$</prompt> <prompt>euca-describe-instances</prompt>
<prompt>$</prompt> <prompt>ssh -i mykey.priv 10.0.0.3</prompt>
                    </screen>
                </listitem>
                <listitem>
                    <para>Glance should be installed before using
                        nova, because nova depends on glance in
                        default settings.</para>
                    <para>In <filename>/etc/nova/nova.conf</filename>
                        the value of setting
                            <literal>image_service</literal> is
                            <literal>nova.image.glance.GlanceImageService</literal>.</para>
                </listitem>
                <listitem>
                    <para>Change Linux's setting
                            <literal>net.ipv4.ip_forward</literal> to
                            <literal>1</literal> in the machine where
                        nova-network will be installed before nova
                        installation with the following
                        command.</para>
                    <screen>
<prompt>$</prompt> <userinput>sudo sysctl -w net.ipv4.ip_forward=1</userinput>
                    </screen>
                    <para>You can recover the setting with the
                        following command.</para>
                    <screen>
<prompt>$</prompt> <userinput>sudo sysctl -w net.ipv4.ip_forward=0</userinput>
                    </screen>
                </listitem>
            </orderedlist>
        </simplesect>
    </section>
    
    
</chapter>
