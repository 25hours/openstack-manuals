<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
    xml:id="ch_volumes">
    <title>Volumes</title>
    <section xml:id="cinder-vs-nova-volumes">
        <title>Cinder Versus Nova-Volumes</title>
        <para>You now have two options in terms of Block Storage.
            Currently (as of the Folsom release) both are nearly
            identical in terms of functionality, API's and even the
            general theory of operation. Keep in mind however that
            <literal>nova-volume</literal> is deprecated and will be removed at the
            release of Grizzly. </para>
        <para>For Cinder-specific install 
            information, refer to the OpenStack Installation Guide.</para>
    </section>
    <section xml:id="managing-volumes">
        <title>Managing Volumes</title>
        <para>The Cinder project provides the service that allows you
            to give extra block level storage to your OpenStack
            Compute instances. You may recognize this as a similar
            offering from Amazon EC2 known as Elastic Block Storage
            (EBS). However, OpenStack Block Storage is not the same
            implementation that EC2 uses today. This is an iSCSI
            solution that employs the use of Logical Volume Manager
            (LVM) for Linux. Note that a volume may only be attached
            to one instance at a time. This is not a ‘shared storage’
            solution like a SAN of NFS on which multiple servers can
            attach to.</para>
        <para>Before going any further; let's discuss the block
            storage implementation in OpenStack: </para>
        <para>The cinder service uses iSCSI-exposed LVM volumes to the
            compute nodes which run instances. Thus, there are two
            components involved: </para>
        <para>
            <orderedlist>
                <listitem>
                    <para>lvm2, which works with a VG called
                            <literal>cinder-volumes</literal> or
                        another named Volume Group (Refer to <link
                            xlink:href="http://en.wikipedia.org/wiki/Logical_Volume_Manager_(Linux)"
                            >http://en.wikipedia.org/wiki/Logical_Volume_Manager_(Linux)</link>
                        for further details)</para>
                </listitem>
                <listitem>
                    <para><literal>open-iscsi</literal>, the iSCSI
                        implementation which manages iSCSI sessions on
                        the compute nodes </para>
                </listitem>
            </orderedlist>
        </para>
        <para>Here is what happens from the volume creation to its
            attachment: </para>
        <orderedlist>
            <listitem>
                <para>The volume is created via <command>nova
                        volume-create</command>; which creates an LV
                    into the volume group (VG)
                        <literal>cinder-volumes</literal>
                </para>
            </listitem>
            <listitem>
                <para>The volume is attached to an instance via
                        <command>nova volume-attach</command>; which
                    creates a unique iSCSI IQN that will be exposed to
                    the compute node </para>
            </listitem>
            <listitem>
                <para>The compute node which run the concerned
                    instance has now an active ISCSI session; and a
                    new local storage (usually a
                        <filename>/dev/sdX</filename> disk) </para>
            </listitem>
            <listitem>
                <para>libvirt uses that local storage as a storage for
                    the instance; the instance get a new disk (usually
                    a <filename>/dev/vdX</filename> disk) </para>
            </listitem>
        </orderedlist>
        <para>For this particular walk through, there is one cloud
            controller running <literal>nova-api</literal>,
                <literal>nova-scheduler</literal>,
                <literal>nova-objectstore</literal>,
                <literal>nova-network</literal> and
                <literal>cinder-*</literal> services. There are two
            additional compute nodes running
                <literal>nova-compute</literal>. The walk through uses
            a custom partitioning scheme that carves out 60GB of space
            and labels it as LVM. The network uses
                <literal>FlatManger</literal> is the
                <literal>NetworkManager</literal> setting for
            OpenStack Compute (Nova). </para>
        <para>Please note that the network mode doesn't interfere at
            all with the way cinder works, but networking must be set
            up for cinder to work. Please refer to <link
                linkend="ch_networking">Networking</link> for more
            details.</para>
        <para>To set up Compute to use volumes, ensure that Block
            Storage is installed along with lvm2. The guide will be
            split in four parts : </para>
        <para>
            <itemizedlist>
                <listitem>
                    <para>Installing the Block Storage service on the
                        cloud controller.</para>
                </listitem>
                <listitem>
                    <para>Configuring the
                            <literal>cinder-volumes</literal> volume
                        group on the compute nodes.</para>
                </listitem>
                <listitem>
                    <para>Troubleshooting your installation.</para>
                </listitem>
                <listitem>
                    <para>Backup your nova volumes.</para>
                </listitem>
            </itemizedlist>
        </para>
        <xi:include href="../openstack-install/cinder-install.xml"/>
        <xi:include href="../openstack-block-storage-admin/troubleshoot-cinder.xml"/>
        <xi:include href="backup-block-storage-disks.xml"/>
    </section>
    <section xml:id="volume-drivers">
        <title>Volume drivers</title>
        <para>The default behaviour can be altered by
            using different volume drivers that are included in the Compute (Nova)
            code base. To set volume driver, use
                <literal>volume_driver</literal> flag. The default is
            as follows:</para>
        <programlisting>
volume_driver=nova.volume.driver.ISCSIDriver
iscsi_helper=tgtadm
        </programlisting>
        <para>Refer to the <link xlink:href="../openstack-block-storage/admin/content/">OpenStack Block Storage Admin Manual</link> for information about configuring drivers.</para>
    </section>
    <xi:include href="../openstack-install/adding-block-storage.xml" />
    <section xml:id="boot-from-volume">
        <title>Boot From Volume</title>
        <para>The Compute service has preliminary support for booting an instance from a
            volume.</para>
        <simplesect>
            <title>Creating a bootable volume</title>
            <para>To create a bootable volume, mount the volume to an existing instance, and then
                build a volume-backed image. Here is an example based on <link
                    xlink:href="https://github.com/openstack-dev/devstack/blob/master/exercises/boot_from_volume.sh"
                    >exercises/boot_from_volume.sh</link>. This example assumes that you have a
                running instance with a 1GB volume mounted at <literal>/dev/vdc</literal>. These
                commands will make the mounted volume bootable using a CirrOS image. As
                root:<screen><prompt>#</prompt> <userinput>mkfs.ext3 -b 1024 /dev/vdc 1048576</userinput>
<prompt>#</prompt> <userinput>mkdir /tmp/stage</userinput>
<prompt>#</prompt> <userinput>mount /dev/vdc /tmp/stage</userinput>

<prompt>#</prompt> <userinput>cd /tmp</userinput>
<prompt>#</prompt> <userinput>wget https://launchpad.net/cirros/trunk/0.3.0/+download/cirros-0.3.0-x86_64-rootfs.img.gz</userinput>
<prompt>#</prompt> <userinput>gunzip cirros-0.3.0-x86_64-rootfs.img.gz</userinput>
<prompt>#</prompt> <userinput>mkdir /tmp/cirros</userinput>
<prompt>#</prompt> <userinput>mount /tmp/cirros-0.3.0-x86_64-rootfs.img /tmp/cirros</userinput>

<prompt>#</prompt> <userinput>cp -pr /tmp/cirros/* /tmp/stage</userinput>
<prompt>#</prompt> <userinput>umount /tmp/cirros</userinput>
<prompt>#</prompt> <userinput>sync</userinput>
<prompt>#</prompt> <userinput>umount /tmp/stage</userinput></screen></para>
            <para>Detach the volume once you are done.</para>
        </simplesect>
        <simplesect>
            <title>Booting an instance from the volume</title>
            <para>To boot a new instance from the volume, use the
                    <command>nova boot</command> command with the
                    <literal>--block_device_mapping</literal> flag.
                The output for <command>nova help boot</command> shows
                the following documentation about this
                flag:<screen><computeroutput> --block_device_mapping &lt;dev_name=mapping>
                        Block device mapping in the format &lt;dev_name=&lt;id>:&lt;typ
                        e>:&lt;size(GB)>:&lt;delete_on_terminate>.
 </computeroutput></screen></para>
            <para>The command arguments are:<variablelist>
                    <varlistentry>
                        <term><literal>dev_name</literal></term>
                        <listitem>
                            <para>A device name where the volume will be attached in the system at
                                        <filename>/dev/<replaceable>dev_name</replaceable></filename>.
                                This value is typically <literal>vda</literal>.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><literal>id</literal></term>
                        <listitem>
                            <para>The ID of the volume to boot from, as shown in the output of
                                    <command>nova volume-list</command>.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><literal>type</literal></term>
                        <listitem>
                            <para>This is either <literal>snap</literal>, which means that the
                                volume was created from a snapshot, or anything other than
                                    <literal>snap</literal> (a blank string is valid). In the
                                example above, the volume was not created from a snapshot, so we
                                will leave this field blank in our example below.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><literal>size (GB)</literal></term>
                        <listitem>
                            <para>The size of the volume, in GB. It is safe to leave this blank and
                                have the Compute service infer the size.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><literal>delete_on_terminate</literal></term>
                        <listitem>
                            <para>A boolean to indicate whether the volume should be deleted when
                                the instance is terminated. True can be specified as
                                    <literal>True</literal> or <literal>1</literal>. False can be
                                specified as <literal>False</literal> or
                                <literal>0</literal>.</para>
                        </listitem>
                    </varlistentry>
                </variablelist></para>
            <para><note>
                    <para>Because of bug <link
                            xlink:href="https://bugs.launchpad.net/nova/+bug/1008622"
                            >#1008622</link>, you must specify an image when booting from a volume,
                        even though this image will not be used.</para>
                </note>The following example will attempt boot from volume with
                    ID=<literal>13</literal>, it will not delete on terminate. Replace the
                    <literal>--image</literal> flag with a valid image on your system, and the
                    <literal>--key_name</literal> with a valid keypair
                name:<screen><prompt>$</prompt> <userinput>nova boot --image <replaceable>f4addd24-4e8a-46bb-b15d-fae2591f1a35</replaceable> --flavor 2 --key_name <replaceable>mykey</replaceable> --block_device_mapping vda=13:::0 boot-from-vol-test</userinput></screen></para>
        </simplesect>
    </section>
</chapter>
