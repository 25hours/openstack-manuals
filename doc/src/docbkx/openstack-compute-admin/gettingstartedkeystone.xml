<?xml version="1.0"?>
<!-- Converted by db4-upgrade version 1.0 -->
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0-extension RaxBook-1.0" xml:id="quick-guide-to-getting-started-with-keystone"><info><title>Quick Guide to Getting Started with the Identity
      Service</title></info>
  <para>The OpenStack Identity Service, Keystone, provides services for
    authenticating and managing user, account, and role information
    for OpenStack clouds running on OpenStack Compute and as an
    authorization service for OpenStack Object Storage.</para>
  
  <section xml:id="what-is">
    <title>What is this Keystone anyway?</title>
    <para>from <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://mirantis.blogspot.com/2011/09/what-is-this-keystone-anyway.html">Yuriy Taraday</link></para>
    <para>The simplest way to authenticate a user is to ask for credentials
      (login+password, login+keys, etc.) and check them over some database.
      But when it comes to lots of separate services as it is in the
      <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://openstack.org/">OpenStack</link>
      world, we have to rethink that. The main problem is an inability to use
      one user entity to be authorized everywhere. For example, a user expects
      <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://nova.openstack.org/">Nova</link>
      to get one's credentials and create or fetch some images in
      <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://launchpad.net/glance">Glance</link>
      or set up networks in
      <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://wiki.openstack.org/Quantum">Quantum</link>.
      This cannot be done without a central authentication and authorization system.</para>
    <para>So now we have one more OpenStack project -
      <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://wiki.openstack.org/keystone">Keystone</link>.
      It is intended to incorporate all common information about users and
      their capabilities across other services, along with a list of these
      services themselves. We have spent some time explaining to our friends
      what, why, and how it is and now we decided to blog about it. What
      follows is an explanation of every entity that drives Keystoneâ€™s life.
      Of course, this explanation can become outdated in no time since the
      Keystone project is very young and it has developed very fast.</para>
    <para>The first basis is the user. Users are users, they represent someone
      or something that can gain access through Keystone. Users come with
      credentials that can be checked like passwords or API keys.</para>
    <para>The second one is tenant. It represents what is called the project in
      Nova, meaning something that aggregates the number of resources in each
      service. For example, a tenant can have some machines in Nova, a number
      of images in Swift/Glance, and couple of networks in Quantum. Users are
      bound to a tenant by assigning them a role on that tenant.</para>
    <para>The third and last authorization-related kinds of objects are roles.
      A role represents a number of privileges or rights a user has or actions
      they are allowed to perform. For example, a user who has an 'Admin' role
      can take admin actions like view all tenants. Users
      can be added to any role either globally or in a tenant. In the first
      case, the user gains access implied by the role to the resources in all
      tenants; in the second case, one's access is limited to resources of the
      corresponding tenant. For example, the user can be an operator of all
      tenants and an admin of his own playground.</para>
    <para>Now let&apos;s talk about service discovery capabilities. With the
      first three primitives, any service (Nova, Glance, Swift) can check
      whether or not the user has access to resources. But to try to access
      some service in the tenant, the user has to know that the service exists
      and to find a way to access it. So the basic objects here are services.
      They are actually just some distinguished names. The roles we've talked
      about recently can be not only general but also bound to a service. For
      example, when Swift requires administrator access to create some object,
      it should not require the user to have administrator access to Nova too.
      To achieve that, we should create two separate Admin roles - one bound to
      Swift and another bound to Nova. After that admin access to Swift can be
      given to user with no impact on Nova and vice versa.</para>
    <para>To access a service, we have to know its endpoint. So there are
      endpoint templates in Keystone that provide information about all
      existing endpoints of all existing services. One endpoint template
      provides a list of URLs to access an instance of service. These URLs are
      public, private and admin ones. The public one is intended to be
      accessible from the global world (like http://compute.example.com),
      the private one can be used to access from a local network (like
      http://compute.example.local), and the admin one is used in case admin
      access to service is separated from the common access (like it is in
      Keystone).</para>
    <para>Now we have the global list of services that exist in our farm and
      we can bind tenants to them. Every tenant can have its own list of
      service instances and this binding entity is named the endpoint, which
      &quot;plugs&quot; the tenant to one service instance. It makes it
      possible, for example, to have two tenants that share a common image
      store but use distinct compute servers.</para>
    <para>This is a long list of entities that are involved in the process but
      how does it actually work?</para>
      <orderedlist>
        <listitem>
          <para>To access some service, users provide their credentials to
            Keystone and receive a token. The token is just a string that is
            connected to the user and tenant internally by Keystone. This token
            travels between services with every user request or requests
            generated by a service to another service to process the
            user&apos;s request.</para>
        </listitem>
        <listitem>
          <para>The users find a URL of a service that they need. If the user,
            for example, wants to spawn a new VM instance in Nova, one can find
            an URL to Nova in the list of endpoints provided by Keystone and
            send an appropriate request.</para>
        </listitem>
        <listitem>
          <para>After that, Nova verifies the validity of the token in Keystone
            and should create an instance from some image by the provided image
            ID and plug it into some network.</para>
            <itemizedlist>
              <listitem><para>At first Nova passes this token to Glance to get the
                image stored somewhere in there.</para></listitem>
              <listitem><para>After that, it asks Quantum to plug this new instance
                into a network; Quantum verifies whether the user has access to
                the network in its own database and to the interface of VM by
                requesting info in Nova.</para></listitem>
           </itemizedlist>
        </listitem>
        <listitem><para>All the way this token travels between services so that they can
            ask Keystone or each other for additional information or some
            actions.</para></listitem></orderedlist>
      <para>Here is a rough diagram of this process:</para>
    
    
      <figure><title>Keystone flowchart</title><mediaobject><imageobject>
        <imagedata fileref="figures/keystone-flowchart.png" />
      </imageobject></mediaobject></figure>
  </section>

  <section xml:id="Identity-Service-Concepts-e1362">
  <title>Identity Service Concepts</title>
  <para> The OpenStack Identity Service, Keystone, has several key concepts
  which are important to understand: </para>
  <variablelist>
    <varlistentry>
      <term>User</term>
      <listitem><para>A digital representation of a person, system, or service who
            uses OpenStack cloud services. The authentication services
            will validate that incoming request are being made by the
            user who claims to be making the call. Users have a login
            and may be assigned tokens to access resources. Users may
            be directly assigned to a particular tenant and behave as
            if they are contained in that tenant.</para></listitem>
    </varlistentry>
    <varlistentry>
      <term>Credentials</term>
      <listitem><para>
        Data that belongs to, is owned by, and generally only known by a user that the user can present
        to prove they are who they are (since nobody else should know that data).
      </para><para>Examples are:
        <itemizedlist>
          <listitem><para>a matching username and password</para></listitem>
          <listitem><para>a matching username and API key</para></listitem>
          <listitem><para>a token that was issued to you that nobody else knows of</para></listitem>
          <listitem><para>A real life example, for illustration only, would be you showing up
          and presenting a driver's license with a picture of you. The person
          behind the desk can then 'authenticate' you and verify you are who you
          say you are. Keystone performs effectively the same operation.</para></listitem>
        </itemizedlist>
      </para></listitem>
    </varlistentry>
    <varlistentry>
      <term>Authentication</term>
      <listitem><para> In the context of the Identity Service (Keystone),
            authentication is the act of confirming the identity of a
            user or the truth of a claim. The Identity Service will
            confirm that incoming request are being made by the user
            who claims to be making the call by validating a set of
            claims that the user is making. These claims are initially
            in the form of a set of credentials (username &amp;
            password, or username and API key). After initial
            confirmation, the Identity Service will issue the user a
            token which the user can then provide to demonstrate that
            their identity has been authenticated when making
            subsequent requests. </para></listitem>
    </varlistentry>
    <varlistentry>
      <term>Token</term>
      <listitem><para>
        A token is an arbitrary bit of text that is used to access
        resources. Each token has a scope which describes which
        resources are accessible with it. A token may be
        revoked at anytime and is valid for a finite duration.
      </para>
        <para> While the Identity Service supports token-based
            authentication in this release, the intention is for it to
            support additional protocols in the future. The intent is
            for it to be an integration service foremost, and not a
            aspire to be a full-fledged identity store and management
            solution. </para></listitem>
    </varlistentry>
    <varlistentry>
      <term>Tenant</term>
      <listitem><para> A container used to group or isolate resources and/or identity objects. Depending on the
            service operator, a tenant may map to a customer, account, organization, or project. For
            Compute, a tenant is a project. For Object Storage, a tenant is an account.</para></listitem>
    </varlistentry>
    <varlistentry>
      <term>Service</term>
      <listitem><para>
        An OpenStack service, such as Compute (Nova), Object Storage (Swift), or Image Service (Glance). A service provides
        one or more endpoints through which users can access resources and perform
        (presumably useful) operations.
      </para></listitem>
    </varlistentry>
    <varlistentry>
      <term>Endpoint</term>
      <listitem> <para>
        An network-accessible address, usually described by URL, where a service may be accessed. If using an extension for templates, you can create an endpoint template, which represents the templates of all the consumable services that are available across the regions. 
      </para></listitem>
    </varlistentry>
    <varlistentry>
      <term>Role</term>
      <listitem><para> A personality that a user assumes when performing a specific set of operations.
        A role includes a set of right and privileges. A user assuming that role inherits
        those rights and privileges.
      </para><para> In the Identity Service, a token that is issued to a user
            includes the list of roles that user can assume. Services
            that are being called by that user determine how they
            interpret the set of roles a user has and which operations
            or resources each roles grants access to. </para></listitem>
    </varlistentry>
  </variablelist>
    <figure xml:id="KeystoneIdentityFigure">
      <title>The Keystone Identity Manager flow</title>
      <mediaobject>
        <imageobject role="fo">
          <imagedata scale="60" fileref="figures/SCH_5002_V00_NUAC-Keystone.png"/>
        </imageobject>
      </mediaobject>
    </figure>
  </section>
  <section xml:id="installing-openstack-identity-service"><title>Installing the OpenStack Identity Service</title>
    <para>You can install the Identity service from packages or from source. Refer to http://keystone.openstack.org for more information.</para>


      </section>
  <section xml:id="configuring-the-identity-service"><title>Configuring the Identity Service</title>
    <para>Here are the steps to get started with authentication using Keystone, the project name for
      the OpenStack Identity Service. </para>
    <para>Typically a project that uses the OpenStack Identity Service
      has settings in a configuration file:</para> 
    
    <para>
      <itemizedlist>
        <listitem>
          <para>In Compute, the settings are in
            etc/nova/api-paste.ini, but the Identity Service also
            provides an example file in
            keystone/examples/paste/nova-api-paste.ini. Restart the
            nova-api service for these settings to be
            configured.</para>
        </listitem>
        <listitem>
          <para>In Image Service, the settings are in glance-api.conf and glance-registry.conf
            configuration files in the examples/paste directory. Restart the glance-api service and
            also ensure your environment contains OS_AUTH credentials which you can set up with tools/nova_to_os_env.sh provided by the Glance project.</para>
        </listitem>
        <listitem>
          <para>In Object Storage, the settings are held in /etc/swift/proxy-server.conf in a
            [filter:keystone] section. Use <code>swift-init main start</code> to restart Object
            Storage with the new configuration. Here's an example
            /etc/swift/proxy-server.conf:</para>
          
          
          <literallayout class="monospaced">
[DEFAULT]
bind_port = 8888
user = &lt;user&gt;

[pipeline:main]
pipeline = catch_errors cache keystone proxy-server

[app:proxy-server]
use = egg:swift#proxy
account_autocreate = true

[filter:keystone]
use = egg:keystone#swiftauth
keystone_admin_token = 999888777666
keystone_url = http://localhost:35357/v2.0

[filter:cache]
use = egg:swift#memcache
set log_name = cache

[filter:catch_errors]
use = egg:swift#catch_errors
 </literallayout>
        </listitem>
        
        
      </itemizedlist>
    </para></section>
    <section xml:id="starting-identity-service"><title>Starting the Identity Service</title>
      
      <para>By default, configuration parameters (such as the IP and port binding
      for each service) are parsed from etc/keystone.conf, so ensure it is up-to-date
      prior to starting the service.</para>
      <para>To start up the Identity Service (Keystone), enter the
      following:</para>
        
        <literallayout class="monospaced">$ cd ~/keystone/bin &amp;&amp; ./keystone </literallayout>
        
        <para>In return you should see something like this:</para>
        <literallayout class="monospaced">Starting the Legacy Authentication component
        Service API listening on 0.0.0.0:5000
        Admin API listening on 0.0.0.0:35357</literallayout>
        
        <para>Use this command for starting the auth server only which exposes the Service API:</para>
        
        <literallayout class="monospaced">$ ./bin/keystone-auth</literallayout>
        
        <para>Use this command for starting the admin server only which exposes the Admin API:</para>
        
        <literallayout class="monospaced">$ ./bin/keystone-admin</literallayout>
      <para>After starting the Identity Service or running
      keystone-manage a keystone.db sqlite database should be created
      in the keystone folder.</para>
     </section>
    
  <section xml:id="dependencies"><info><title>Dependencies</title></info>
    <para>Once the Identity Service is installed you need to
      initialize the database. You can do so with the keystone-manage
      command line utility. The keystone-manage utility helps with
      managing and configuring an Identity Service installation. You
      configure the keystone-manage utility itself with a SQL Alchemy
      connection configuration via a parameter passed to the
      utility:</para>
    <para>--sql_connection=CONN_STRING</para>
    <para>Where the CONN_STRING is a proper SQLAlchemy connection string as described in
      http://www.sqlalchemy.org/docs/05/reference/sqlalchemy/connections.html?highlight=engine#sqlalchemy.create_engine.</para>
  </section>
  
<section xml:id="creating-tenants-users-roles-tokens-and-endpoints"><title>Creating Tenants, Users, Roles, Tokens and Endpoints</title>
  <para>Sample data entries are available in keystone/bin/sampledata.sh. The following are just
  examples for a walk-through.</para>
  <note><para>
    Some reserved roles are defined (and can be modified) through the keystone.conf in the /etc folder.</para>
  </note>
  <para>Add two tenants, and administrative tenant and a tenant named demo. Tenants are equivalent to projects in the previous auth system in Compute. In Object Storage, Tenants are similar to accounts in the swauth system.</para>
  <literallayout class="monospaced">  bin/keystone-manage  tenant add admin
  bin/keystone-manage  tenant add demo</literallayout>
  
  <para>Next add two users to the Identity Service and assign their passwords. The last value in the
      list is the tenant name.</para>
  <literallayout class="monospaced">  bin/keystone-manage  user add admin p4ssw0rd admin
  bin/keystone-manage  user add demo p455w0rd demo</literallayout>
  
  <para>Now you can assign roles, which includes a set of rights and privileges that are double-checked with the token that the user is issued.</para>
  <literallayout class="monospaced">  bin/keystone-manage  role add Admin
  bin/keystone-manage  role add Member
  bin/keystone-manage  role grant Admin admin</literallayout>
  
  <para>Now define the endpointTemplates, which are URLs plus port values that indicate where a
      service may be accessed. This example shows many services available to Compute including the
      Image Service, the Object Storage service, as well as Identity itself. Since there is just one
      zone in this example, it represents all the services across the single region (but could also
      represent all the regions). The last two values are flags which indicate the template is
      enabled and global. If an endpoint template is global, all tenants automatically have access
      to the endpoint. Note that the URLs contain a %tenant_id% string which Keystone populates
      at runtime. </para>

  <literallayout class="monospaced">  HOST_IP=127.0.0.1
  bin/keystone-manage  endpointTemplates add RegionOne swift http://$HOST_IP:8080/v1/AUTH_%tenant_id% http://$HOST_IP:8080/ http://$HOST_IP:8080/v1/AUTH_%tenant_id% 1 1
  bin/keystone-manage  endpointTemplates add RegionOne nova_compat http://$HOST_IP:8774/v1.0/ http://$HOST_IP:8774/v1.0  http://$HOST_IP:8774/v1.0 1 1
  bin/keystone-manage  endpointTemplates add RegionOne nova http://$HOST_IP:8774/v1.1/%tenant_id% http://$HOST_IP:8774/v1.1/%tenant_id%  http://$HOST_IP:8774/v1.1/%tenant_id% 1 1
  bin/keystone-manage  endpointTemplates add RegionOne glance http://$HOST_IP:9292/v1.1/%tenant_id% http://$HOST_IP:9292/v1.1/%tenant_id% http://$HOST_IP:9292/v1.1/%tenant_id% 1 1
  bin/keystone-manage  endpointTemplates add RegionOne identity http://$HOST_IP:5000/v2.0 http://$HOST_IP:35357/v2.0 http://$HOST_IP:5000/v2.0 1 1</literallayout>


<para>  Now you add a default token for the admin user to get when requesting a token.</para>
  <literallayout class="monospaced">bin/keystone-manage  token add 999888777666 admin admin 2015-02-05T00:00</literallayout>

  <para> If an endpoint template is not global, endpoints must be manually added using the
      tenant name and endpoint template ID. You can retrieve the endpoint template
      id by doing:</para>

      <literallayout class="monospaced">  bin/keystone-manage   endpointTemplates list</literallayout>

  <para>You can then add endpoints manually by doing:</para>

  <literallayout class="monospaced">  bin/keystone-manage   endpoint add $TENANT $ENDPOINT_TEMPLATE_ID</literallayout>

  <para>For example (assuming the new endpoint template has an ID of 6):</para>
  <literallayout class="monospaced">  bin/keystone-manage  endpointTemplates add RegionTwo nova http://$HOST_IP:8774/v1.1/%tenant_id% http://$HOST_IP:8774/v1.1/%tenant_id%  http://$HOST_IP:8774/v1.1/%tenant_id% 1 0
  bin/keystone-manage  endpoint add admin 6
  bin/keystone-manage  endpoint add demo 6
  </literallayout>
  
  
  <para>You can configure Identity and Compute with a single region or multiple regions using
          zones. You need to add a label for the endpoint for each region. Having a single region
          doesn't require any work other than adding label.</para>
<para>
          <literallayout class="monospaced">keystone-manageÂ endpointTemplatesÂ addÂ SWRegionÂ identityÂ http://%HOST_IP%:5000/v2.0Â http://%HOST_IP%:35357/v2.0Â http://%HOST_IP%:5000/v2.0Â 1Â 1</literallayout>
        </para> </section>
  
</chapter>
