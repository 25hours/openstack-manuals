<?xml version="1.0" encoding="UTF-8"?>
<section xml:id="verify-swift-installation"
    xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
    <title>Verify the Installation</title>
    <para>You can run these commands from the proxy server or any
        server that has access to the Identity Service.</para>
    <note>     
        <para>If you use the Identity Service, use the following
            commands. If you use swauth, use the
                <literal>default_swift_cluster</literal> variable to
            connect to your swift cluster. Follow the <link
                xlink:href="http://gholt.github.com/swauth/stable/"
                >swauth documentation</link> to verify your
            installation. </para>
    </note>
    <procedure><title>To verify the installation</title>
        <step>
            <para>Export the swift admin password, which you set up
                previously, to a variable:</para>
            <screen><prompt>$</prompt> <userinput>export ADMINPASS=secrete</userinput>          </screen>
            <note>
                <para>If you do not wish to have the swift admin
                    password stored in your shell's history, you can
                    run the following command: </para>
                <screen><prompt>$</prompt> <userinput>export SWIFT_PROXY_CONF="/etc/swift/proxy-server.conf export ADMINPASS=$( grep admin_password ${SWIFT_PROXY_CONF} | awk '{ print $NF }' )</userinput> </screen>
            </note>
        </step>
        <step>
            <para> Export the ADMINPASS environment variable: </para>      
            <screen><prompt>$</prompt> <userinput>export ADMINPASS=secrete</userinput></screen></step>
        <step><para>Run the following swift command with the correct Identity
                Service URL:</para><screen><prompt>$</prompt> <userinput>swift -V 2.0 -A http://&lt;AUTH_HOSTNAME&gt;:5000/v2.0 -U demo:admin -K $ADMINPASS stat</userinput></screen>
        </step>
        <step>
            <para>Get the <literal>X-Storage-Url</literal> and
                    <literal>X-Auth-Token</literal> headers:</para>
            <screen><prompt>$</prompt> <userinput>curl -s http://&lt;AUTH_HOSTNAME&gt;:5000/v2.0/tokens -X 'POST' -d '{"auth":{"passwordCredentials":{"username":"demo", "password":"$DEMOPASS"}}}' -H "Content-Type: application/json" | python -mjson.tool</userinput>    </screen>
        </step>
        <step>
            <para>Check that you can HEAD the account:</para>
            <screen><prompt>$</prompt> <userinput>curl -X HEAD -i -H "X-Auth-Token:&lt;token-returned-from-above-request&gt;' &lt;internal-url-returned-above-including-AUTHnnnnnn&gt;</userinput>       </screen>
            <para>For example:</para>
            <screen><computeroutput>HTTP/1.1 204 No Content
Content-Length: 0
Accept-Ranges: bytes
X-Timestamp: 1375369982.17376
X-Account-Bytes-Used: 0
X-Account-Container-Count: 0
Content-Type: text/plain; charset=utf-8
X-Account-Object-Count: 0
X-Trans-Id: txb014c725573b44f48e260002f39ce2b6
Date: Thu, 01 Aug 2013 18:39:00 GMT</computeroutput></screen>
        </step>
        <step>
            <para>Run the following swift commands to upload files to
                a container:</para>
            <screen><prompt>$</prompt> <userinput>swift -V 2.0 -A http://&lt;AUTH_HOSTNAME&gt;:5000/v2.0 -U demo:admin -K $ADMINPASS upload myfiles bigfile1.tgz</userinput>
<prompt>$</prompt> <userinput>swift -V 2.0 -A http://&lt;AUTH_HOSTNAME&gt;:5000/v2.0 -U demo:admin -K $ADMINPASS upload myfiles bigfile2.tgz</userinput>         </screen>
        </step>
        <step>
            <para>Run the following swift command to download all
                files from the &#8216;myfiles&#8217; container:</para>
            <screen><prompt>$</prompt> <userinput>swift -V 2.0 -A http://&lt;AUTH_HOSTNAME&gt;:5000/v2.0 -U demo:admin -K $ADMINPASS download myfiles</userinput>        </screen>
        </step>
    </procedure>
</section>
