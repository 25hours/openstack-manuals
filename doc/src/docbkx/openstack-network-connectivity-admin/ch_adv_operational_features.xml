<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!-- Some useful entities borrowed from HTML -->
<!ENTITY ndash  "&#x2013;">
<!ENTITY mdash  "&#x2014;">
<!ENTITY hellip "&#x2026;">
<!ENTITY plusmn "&#xB1;">

<!-- Useful for describing APIs -->
<!ENTITY GET    '<command xmlns="http://docbook.org/ns/docbook">GET</command>'>
<!ENTITY PUT    '<command xmlns="http://docbook.org/ns/docbook">PUT</command>'>
<!ENTITY POST   '<command xmlns="http://docbook.org/ns/docbook">POST</command>'>
<!ENTITY DELETE '<command xmlns="http://docbook.org/ns/docbook">DELETE</command>'>

<!ENTITY CHECK  '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
<imageobject role="fo">
<imagedata fileref="figures/Check_mark_23x20_02.svg"
format="SVG" scale="60"/>
</imageobject>
<imageobject role="html">
<imagedata fileref="../figures/Check_mark_23x20_02.png"
format="PNG" />
</imageobject>
</inlinemediaobject>'>

<!ENTITY ARROW  '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
<imageobject role="fo">
<imagedata fileref="figures/Arrow_east.svg"
format="SVG" scale="60"/>
</imageobject>
<imageobject role="html">
<imagedata fileref="../figures/Arrow_east.png"
format="PNG" />
</imageobject>
</inlinemediaobject>'>

]>
<chapter xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
    xml:id="ch_adv_operational_features">
    <title>Advanced Operational Features</title>
    <section xml:id="ch_adv_logging">
        <title>Logging Settings</title>
        <para>Quantum components use Python logging module to do logging.
        Logging configuration can be provided in quantum.conf or as command line options.
        Command options will override ones in quantum.conf.</para>
        <para>Two ways to specify the logging configuration for Quantum components:</para>
        <orderedlist>
            <listitem>
                <para>Provide logging settings in a logging configuration file.</para>
                <para>Please see <link xlink:href="http://docs.python.org/howto/logging.html">Python Logging HOWTO</link> for logging configuration file.</para>
            </listitem>
            <listitem>
                <para>Provide logging setting in quantum.conf</para>
                <screen>
                    <computeroutput>
[DEFAULT]
# Default log level is WARNING
# Show debugging output in logs (sets DEBUG log level output)
# debug = False

# Show more verbose log output (sets INFO log level output) if debug is False
# verbose = False

# log_format = %(asctime)s %(levelname)8s [%(name)s] %(message)s
# log_date_format = %Y-%m-%d %H:%M:%S

# use_syslog = False
# syslog_log_facility = LOG_USER

# if use_syslog is False, we can set log_file and log_dir.
# if use_syslog is False and we do not set log_file,
# the log will be printed to stdout.
# log_file =
# log_dir =</computeroutput>
                </screen>
            </listitem>
        </orderedlist>
    </section>
    <section xml:id="ch_adv_notification">
        <title>Notifications</title>
        <section xml:id="ch_adv_notification_overview">
        <title>Notification Options</title>
        <para>Notifications can be sent when Quantum resources such as network, subnet and port
        are created, updated or deleted. To support DHCP agent, rabbit_notifier driver must be set.
        To set up the notification, edit notification options in quantum.conf:</para>
        <screen>
                    <computeroutput>
# ============ Notification System Options =====================

# Notifications can be sent when network/subnet/port are create, updated or deleted.
# There are three methods of sending notifications: logging (via the
# log_file directive), rpc (via a message queue) and
# noop (no notifications sent, the default)

# Notification_driver can be defined multiple times
# Do nothing driver
# notification_driver = quantum.openstack.common.notifier.no_op_notifier
# Logging driver
# notification_driver = quantum.openstack.common.notifier.log_notifier
# RPC driver
notification_driver = quantum.openstack.common.notifier.rabbit_notifier

# default_notification_level is used to form actual topic names or to set logging level
# default_notification_level = INFO

# default_publisher_id is a part of the notification payload
# host = myhost.com
# default_publisher_id = $host

# Defined in rabbit_notifier for rpc way, can be comma separated values.
# The actual topic names will be %s.%(default_notification_level)s
notification_topics = notifications
                    </computeroutput>
                </screen>
                </section>
                <section xml:id="ch_adv_notification_cases">
                <title>Setting Cases</title>
                <section xml:id="ch_adv_notification_cases_log_rpc">
                <title>Logging and RPC</title>
                <para>The options below will make Quantum server send notifications via logging and RPC.
                The logging options are described in <link linkend="ch_adv_logging">Logging Settings</link>.
                RPC notifications will go to 'notifications.info' queue binded to a topic exchange defined
                by 'control_exchange' in quantum.conf.</para>
        <screen>
                    <computeroutput>
# ============ Notification System Options =====================

# Notifications can be sent when network/subnet/port are create, updated or deleted.
# There are three methods of sending notifications: logging (via the
# log_file directive), rpc (via a message queue) and
# noop (no notifications sent, the default)

# Notification_driver can be defined multiple times
# Do nothing driver
# notification_driver = quantum.openstack.common.notifier.no_op_notifier
# Logging driver
notification_driver = quantum.openstack.common.notifier.log_notifier
# RPC driver
notification_driver = quantum.openstack.common.notifier.rabbit_notifier

# default_notification_level is used to form actual topic names or to set logging level
default_notification_level = INFO

# default_publisher_id is a part of the notification payload
# host = myhost.com
# default_publisher_id = $host

# Defined in rabbit_notifier for rpc way, can be comma separated values.
# The actual topic names will be %s.%(default_notification_level)s
notification_topics = notifications
                    </computeroutput>
                </screen>
                </section>
                <section xml:id="ch_adv_notification_cases_multi_rpc_topics">
                <title>Multiple RPC Topics</title>
                <para>The options below will make Quantum server send notifications to multiple RPC topics.
                RPC notifications will go to 'notifications_one.info' and 'notifications_two.info' queues binded
                to a topic exchange defined by 'control_exchange' in quantum.conf.</para>
        <screen>
                    <computeroutput>
# ============ Notification System Options =====================

# Notifications can be sent when network/subnet/port are create, updated or deleted.
# There are three methods of sending notifications: logging (via the
# log_file directive), rpc (via a message queue) and
# noop (no notifications sent, the default)

# Notification_driver can be defined multiple times
# Do nothing driver
# notification_driver = quantum.openstack.common.notifier.no_op_notifier
# Logging driver
# notification_driver = quantum.openstack.common.notifier.log_notifier
# RPC driver
notification_driver = quantum.openstack.common.notifier.rabbit_notifier

# default_notification_level is used to form actual topic names or to set logging level
default_notification_level = INFO

# default_publisher_id is a part of the notification payload
# host = myhost.com
# default_publisher_id = $host

# Defined in rabbit_notifier for rpc way, can be comma separated values.
# The actual topic names will be %s.%(default_notification_level)s
notification_topics = notifications_one,notifications_two
                    </computeroutput>
                </screen>
                </section>
                </section>
    </section>
    <section xml:id="ch_adv_quotas">
      <title>Quotas</title>
      <para>
	Quota is a function to limit number of resources. You can
	enforce default quota for all tenant. You will get error
	when you try to create resources more than the number of
	quota value.
      </para>
      <screen><computeroutput>$ quantum net-create test_net
Quota exceeded for resources: ['network']</computeroutput></screen>
      <para>
	Per-tenant quota configuration is also supported by quota
	extension API. See <link linkend="cfg_quotas_per_tenant">
	Per-tenant quota configuration</link> for details.
      </para>
      <section xml:id="cfg_quotas_common">
	<title>Basic quota configuration</title>
	<para>
	  In Quantum default quota mechanism, all tenants have a same
	  quota value, i.e., a number of resources that a tenant can create.
	  This is enabled by default.
	</para>
	<para>
	  The value of quota is defined in the Quantum configuration file
	  (quantum.conf). If you want to disable quota for a specific resource
	  (e.g., network, subnet, port), remove a corresponding item from 'quota_items'.
	  Each of the quota values in the example below is the default value.
	</para>
	<screen><computeroutput>[QUOTAS]
# resource name(s) that are supported in quota features
quota_items = network,subnet,port

# number of networks allowed per tenant, and minus means unlimited
quota_network = 10

# number of subnets allowed per tenant, and minus means unlimited
quota_subnet = 10

# number of ports allowed per tenant, and minus means unlimited
quota_port = 50

# default driver to use for quota checks
quota_driver = quantum.quota.ConfDriver</computeroutput></screen>
        <para>
	  Quantum also supports quotas for L3 resources: router and floating IP.
	  You can configure them by adding the following lines to
	  'QUOTAS' section in quantum.conf.
	  (Note that 'quota_items' does not affect these quotas.)
	</para>
	<screen><computeroutput>[QUOTAS]
# number of routers allowed per tenant, and minus means unlimited
quota_router = 10

# number of floating IPs allowed per tenant, and minus means unlimited
quota_floatingip = 50</computeroutput></screen>
      </section>
      <section xml:id="cfg_quotas_per_tenant">
	<title>Per-tenant quota configuration</title>
	<para>
	  Quantum also supports per-tenant quota limit by quota	extension API.
	  To enable per-tenant quota, you need to set 'quota_driver' in 'quantum.conf'.
	</para>
	<screen><computeroutput>quota_driver = quantum.extensions._quotav2_driver.DbQuotaDriver</computeroutput></screen>
	<para>
	  When per-tenant quota is enabled, the output of the following command contains 'quotas'.
	</para>
	<screen><computeroutput>$ quantum ext-list -c alias -c name
+----------+------------------------+
| alias    | name                   |
+----------+------------------------+
| router   | Quantum L3 Router      |
| quotas   | Quotas for each tenant |
| provider | Provider Network       |
+----------+------------------------+</computeroutput></screen>
	<note><para>
	  In Folsom release, per-tenant quota is supported by Open vSwitch plugin
	  and Linux Bridge plugin and cannot be used with other plugins.
	</para></note>
	<para>
	  There are four CLI commands to manage per-tenant quota.
	</para>
	<screen><computeroutput>  quota-delete               Delete defined quotas of a given tenant.
  quota-list                 List defined quotas of all tenants.
  quota-show                 Show quotas of a given tenant
  quota-update               Define tenant's quotas not to use defaults.</computeroutput></screen>
        <para>
	  Only users with 'admin' role can change a quota value.
	  Note that the default set of quotas are enforced for all
	  tenants by default, so there is no 'quota-create' command.
	</para>
        <para>
	  'quota-list' displays a list of tenants for which per-tenant quota is enabled.
	  The tenants who have the default set of quota limits are not listed.
	  This command is permitted to only 'admin' users.
	</para>
	<screen><computeroutput>$ quantum quota-list
+------------+---------+------+--------+--------+----------------------------------+
| floatingip | network | port | router | subnet | tenant_id                        |
+------------+---------+------+--------+--------+----------------------------------+
|         20 |       5 |   20 |     10 |      5 | 6f88036c45344d9999a1f971e4882723 |
|         25 |      10 |   30 |     10 |     10 | bff5c9455ee24231b5bc713c1b96d422 |
+------------+---------+------+--------+--------+----------------------------------+</computeroutput></screen>
        <para>
	  'quota-show' reports the current set of quota limits for the specified tenant.
	  Regular (non-admin) users can call this command (without --tenant_id parameter).
	  If per-tenant quota limits are not defined for the tenant, the default set of
	  quotas are displayed.
	</para>
	<screen><computeroutput>$ quantum quota-show --tenant_id 6f88036c45344d9999a1f971e4882723
+------------+-------+
| Field      | Value |
+------------+-------+
| floatingip | 20    |
| network    | 5     |
| port       | 20    |
| router     | 10    |
| subnet     | 5     |
+------------+-------+</computeroutput></screen>
        <para>
	  The below is an example called by a non-admin user.
	</para>
	<screen><computeroutput>$ quantum quota-show
+------------+-------+
| Field      | Value |
+------------+-------+
| floatingip | 20    |
| network    | 5     |
| port       | 20    |
| router     | 10    |
| subnet     | 5     |
+------------+-------+</computeroutput></screen>
	<para>You can update a quota of the given tenant by 'quota-update' command.</para>
	<para>Update the limit of network quota.</para>
	<screen><computeroutput>$ quantum quota-update --tenant_id 6f88036c45344d9999a1f971e4882723 --network 5
+------------+-------+
| Field      | Value |
+------------+-------+
| floatingip | 50    |
| network    | 5     |
| port       | 50    |
| router     | 10    |
| subnet     | 10    |
+------------+-------+</computeroutput></screen>
        <para>You can update quotas of multiple resources in one command.</para>
	<screen><computeroutput>$ quantum quota-update --tenant_id 6f88036c45344d9999a1f971e4882723 --subnet 5 --port 20
+------------+-------+
| Field      | Value |
+------------+-------+
| floatingip | 50    |
| network    | 5     |
| port       | 20    |
| router     | 10    |
| subnet     | 5     |
+------------+-------+</computeroutput></screen>
        <para>
	  To update the limits of L3 resource (router, floating IP), we need to
	  specify new values of the quotas after '--'. The example below updates
	  the limit of the number of floating IPs for the given tenant.
	</para>
	<screen><computeroutput>$ quantum quota-update --tenant_id 6f88036c45344d9999a1f971e4882723 -- --floatingip 20
+------------+-------+
| Field      | Value |
+------------+-------+
| floatingip | 20    |
| network    | 5     |
| port       | 20    |
| router     | 10    |
| subnet     | 5     |
+------------+-------+</computeroutput></screen>
        <para>
	  You can update the limits of multiple resources including L2 resources and L3 resource in one command.
	</para>
	<screen><computeroutput>$ quantum quota-update --tenant_id 6f88036c45344d9999a1f971e4882723 --network 3 --subnet 3 --port 3 -- --floatingip 3 --router 3
+------------+-------+
| Field      | Value |
+------------+-------+
| floatingip | 3     |
| network    | 3     |
| port       | 3     |
| router     | 3     |
| subnet     | 3     |
+------------+-------+</computeroutput></screen>
        <para>
	  To clear per-tenant quota limits, use 'quota-delete'.
	  After 'quota-delete', quota limits enforced to the tenant are reset to
	  the default set of quotas.
	</para>
	<screen><computeroutput>$ quantum quota-delete --tenant_id 6f88036c45344d9999a1f971e4882723
Deleted quota: 6f88036c45344d9999a1f971e4882723
$ quantum quota-show --tenant_id 6f88036c45344d9999a1f971e4882723
+------------+-------+
| Field      | Value |
+------------+-------+
| floatingip | 50    |
| network    | 10    |
| port       | 50    |
| router     | 10    |
| subnet     | 10    |
+------------+-------+</computeroutput></screen>
      </section>
    </section>
</chapter>
