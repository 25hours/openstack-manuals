<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
    xml:id="ch_using">
    <title>Using OpenStack Networking</title>

    <para>There are two main approaches to using OpenStack Networking.  The first
        is to expose the OpenStack Networking API to cloud tenants, allowing them
        to build rich network topologies.  The second is to have the
        cloud administrator, or another tool run the cloud admin,
        create network connectivity on behalf of tenants.  In this
        document, we commonly describe operations as being performed
        by a tenant, but they might also be performed by the cloud
        admin on behalf of the tenant.  </para>
    <section xml:id="api_features">
        <title>Core OpenStack Networking API Features</title>
        <para>Once OpenStack Networking is installed and running, both tenants and admins primarily
            interact with the service via create-read-update-delete (CRUD) API operations performed
            either directly against the API, or more commonly via the 'neutron' CLI tool.  Like
            other OpenStack CLI tools, the 'neutron' tool is just a basic wrapper around the
            OpenStack Networking API, so any operation that can be performed via the CLI has an
            equivalent API call that can be performed programmatically.  </para>
        <para>The CLI supports many options for filtering results, limiting fields show, etc.  For
            details, refer to the OpenStack Networking CLI documentation.   </para>
        <section xml:id="api_abstractions">
            <title>API Abstractions</title>
            <para>The OpenStack Networking v2.0 API provides control over both L2 network topologies and the IP
                addresses used on those networks (IP Address Management or IPAM).  There is also an
                extension to cover basic L3 forwarding and NAT, providing capabilities similar to
                nova-network.  </para>
            <para>In the OpenStack Networking API, an isolated L2 network segment (similar to a VLAN)
                is called a 'Network' and forms the basis for describing the L2 network
                topology available in a given OpenStack Networking deployment.</para>
            <para>The OpenStack Networking API uses
                the notion of a 'Subnet', which associates a block of IP addresses and
                other network configuration (e.g., default gateway,
                dns-servers) with an OpenStack Networking network. Each subnet represents an IPv4 or IPv6
                address block and each OpenStack Networking network can have multiple subnets, if
                desired.  </para>
            <para>A 'Port' represents an attachment port to a L2 OpenStack Networking network.  When a port
                is created on the network, by default it will be allocated an available fixed IP
                address out of one of the designated Subnets for each IP version (if one
                exists).  When the Port is
                destroyed, the allocated addresses return to the pool of available IPs on the
                subnet(s). Users of the OpenStack Networking API can either choose a specific IP address from the
                block, or let OpenStack Networking choose the first available IP address.</para>
            <para>The table below summarizes the attributes available
                for each of these abstractions. For more operations
                about API abstraction and operations, please refer to
                the <link xlink:href="http://docs.openstack.org/api/openstack-network/2.0/content/">OpenStack Networking v2.0 API Developer Guide</link>.</para>

            <table rules="all">
                <caption>Network</caption>
		<col width="20%"/>
		<col width="20%"/>
		<col width="20%"/>
		<col width="40%"/>
                <thead>
                    <tr>
                        <th>Attribute name</th>
                        <th>Type</th>
                        <th>Default Value</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>id</td>
                        <td>uuid-str</td>
                        <td>generated</td>
                        <td>UUID for the network.</td>
                    </tr>
                    <tr>
                        <td>name</td>
                        <td>String</td>
                        <td>None</td>
                        <td>Human-readable name for the network. Might
                            not be unique.</td>
                    </tr>
                    <tr>
                        <td>admin_state_up</td>
                        <td>Bool</td>
                        <td>True</td>
                        <td>The administrative state of network. If
                            false (down), the network does not forward
                            packets.</td>
                    </tr>
                    <tr>
                        <td>status</td>
                        <td>String</td>
                        <td>N/A</td>
                        <td><para>Indicates whether network is
                                  currently operational.</para></td>
                    </tr>
                    <tr>
                        <td>subnets</td>
                        <td>list(uuid-str)</td>
                        <td>Empty list</td>
                        <td>Subnets associated with this network.
                        </td>
                    </tr>
                    <tr>
                        <td>shared</td>
                        <td>Bool</td>
                        <td>False</td>
                        <td>Specifies whether the network resource can
                            be accessed by any tenant or not.</td>
                    </tr>
                    <tr>
                        <td>tenant_id</td>
                        <td>uuid-str</td>
                        <td>N/A</td>
                        <td>Owner of network. Only admin users can
                            specify a tenant_id other than its own.
                        </td>
                    </tr>
                </tbody>
            </table>
            <table rules="all">
                <caption>Subnet</caption>
		<col width="20%"/>
		<col width="20%"/>
		<col width="20%"/>
		<col width="40%"/>
                <thead>
                    <tr>
                        <th>Attribute</th>
                        <th>Type</th>
                        <th>Default Value</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>id</td>
                        <td>uuid-str</td>
                        <td>generated</td>
                        <td>UUID representing the subnet</td>
                    </tr>
                    <tr>
                        <td>network_id</td>
                        <td>uuid-str</td>
                        <td>N/A</td>
                        <td>network this subnet is associated with.</td>
                    </tr>
                    <tr>
                        <td>name</td>
                        <td>String</td>
                        <td>None</td>
                        <td>Human-readable name for the subnet. Might
                            not be unique.</td>
                    </tr>
                    <tr>
                        <td>ip_version</td>
                        <td>int</td>
                        <td>4</td>
                        <td>IP version</td>
                    </tr>
                    <tr>
                        <td>cidr</td>
                        <td>string</td>
                        <td>N/A</td>
                        <td>cidr representing IP range for this
                            subnet, based on IP version</td>
                    </tr>
                    <tr>
                        <td>gateway_ip</td>
                        <td>string</td>
                        <td>first address in <emphasis role="italic"
                                >cidr</emphasis>
                        </td>
                        <td>default gateway used by devices in this
                            subnet</td>
                    </tr>
                    <tr>
                        <td>dns_nameservers</td>
                        <td>list(str)</td>
                        <td>Empty list</td>
                        <td>DNS name servers used by hosts in this
                            subnet.</td>
                    </tr>
                    <tr>
                        <td>allocation_pools</td>
                        <td>list(dict)</td>
                        <td>Every address in <emphasis role="italic"
                                >cidr</emphasis>, excluding <emphasis
                                role="italic">gateway_ip</emphasis> if
                            configured</td>
                        <td>Sub-ranges of cidr available for dynamic
                            allocation to ports [ { "start":
                            "10.0.0.2", "end": "10.0.0.254"} ]</td>
                    </tr>
                    <tr>
                        <td>host_routes</td>
                        <td>list(dict)</td>
                        <td>Empty List</td>
                        <td>Routes that should be used by devices with
                            IPs from this subnet (not including local
                            subnet route).</td>
                    </tr>
                    <tr>
                        <td>enable_dhcp</td>
                        <td>Bool</td>
                        <td>True</td>
                        <td>Specifies whether DHCP is enabled for
                            this subnet or not.</td>
                    </tr>
                    <tr>
                        <td>tenant_id</td>
                        <td>uuid-str</td>
                        <td>N/A</td>
                        <td>Owner of network. Only admin users can
                            specify a tenant_id other than its own.
                        </td>
                    </tr>
                </tbody>
            </table>
            <table rules="all">
                <caption>Port</caption>
		<col width="20%"/>
		<col width="20%"/>
		<col width="20%"/>
		<col width="40%"/>
                <thead>
                    <tr>
                        <th>Attribute</th>
                        <th>Type</th>
                        <th>Default Value</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>id</td>
                        <td>uuid-str</td>
                        <td>generated</td>
                        <td>UUID for the port.</td>
                    </tr>
                    <tr>
                        <td>network_id</td>
                        <td>uuid-str</td>
                        <td>N/A</td>
                        <td>Network that this port is associated with.
                        </td>
                    </tr>
                    <tr>
                        <td>name</td>
                        <td>String</td>
                        <td>None</td>
                        <td>Human-readable name for the port. Might
                            not be unique.</td>
                    </tr>
                    <tr>
                        <td>admin_state_up</td>
                        <td>bool</td>
                        <td>true</td>
                        <td>Administrative state of port. If false
                            (down), port does not forward packets.
                        </td>
                    </tr>
                    <tr>
                        <td>status</td>
                        <td>string</td>
                        <td>N/A</td>
                        <td><para>Indicates whether network is
			        currently operational.</para>
                        </td>
                    </tr>
                    <tr>
                        <td>mac_address</td>
                        <td>string</td>
                        <td>generated</td>
                        <td>Mac address to use on this port.</td>
                    </tr>
                    <tr>
                        <td>fixed_ips</td>
                        <td>list(dict)</td>
                        <td>automatically allocated from pool</td>
                        <td>Specifies IP addresses for the port thus
                            associating the port itself with the
                            subnets where the IP addresses are picked
                            from</td>
                    </tr>
                    <tr>
                        <td>device_id</td>
                        <td>str</td>
                        <td>None</td>
                        <td>identifies the device (e.g., virtual
                            server) using this port.</td>
                    </tr>
                    <tr>
                        <td>device_owner</td>
                        <td>str</td>
                        <td>None</td>
                        <td>Identifies the entity (e.g.: dhcp agent) using this port.</td>
                    </tr>
                    <tr>
                        <td>tenant_id</td>
                        <td>uuid-str</td>
                        <td>N/A</td>
                        <td>Owner of network. Only admin users can
                            specify a tenant_id other than its own.
                        </td>
                    </tr>
                </tbody>
            </table>
        </section>
        <section xml:id="cli_guide">
            <title>OpenStack Networking CLI Guide</title>
            <para>Before going further, we STRONGLY suggest that you quickly read the few
            pages in the <link xlink:href="http://docs.openstack.org/cli/quick-start/content/index.html">OpenStack CLI Guide</link> that are specific to OpenStack Networking.  OpenStack Networking's CLI has some
        advanced capabilities that are described only in that guide.</para>
        </section>
	<section xml:id="basic_operations">
	  <title>Basic Operations</title>
	  <para>Create a network</para>
	  <screen><prompt>$</prompt> <userinput>neutron net-create net1</userinput></screen>
	  <para>Create a subnet associated with net1</para>
	  <screen><prompt>$</prompt> <userinput>neutron subnet-create net1 10.0.0.0/24</userinput></screen>
	  <para>List ports on a tenant</para>
	  <screen><prompt>$</prompt> <userinput>neutron port-list</userinput></screen>
	  <para><emphasis role="italic">device_owner</emphasis> field describes who owns the port.
	  A port whose <emphasis role="italic">device_owner</emphasis> begins with "network:" is created by OpenStack Networking
	  and a port whose <emphasis role="italic">device_owner</emphasis> begins with "compute:" is created by OpenStack Compute (compute service).</para>
	  <screen><prompt>$</prompt> <userinput>neutron port-list -c id -c fixed_ips -c device_owner</userinput></screen>
          <para><command>port-show</command> shows a detail of a specified port.</para>
	  <screen><prompt>$</prompt> <userinput>neutron port-show &lt;port-id&gt;</userinput></screen>
	</section>
        <section xml:id="admin_api_config">
            <title>Admin API configuration</title>
            <para>These same calls can be performed by the cloud admin
                on behalf of the tenants by specifying a tenant_id in
                the request, for example:</para>
            <screen><computeroutput>neutron net-create --tenant-id=&lt;tenant-id&gt; net1</computeroutput></screen>
            <para>This tenant_id should be the tenant ID from
                OpenStack Identity. To view all OpenStack Identity tenant IDs, run the
                following command as an OpenStack Identity (keystone) admin user:</para>
            <screen><computeroutput>keystone tenant-list</computeroutput></screen>
        </section>
        <section xml:id="advanced_networking">
            <title>Advanced API Operations Examples</title>
            <section xml:id="advanced_networking_create">
                <title>Network, Subnet &amp; Port Creation</title>
                <itemizedlist>
                    <listitem>
                        <para>Create a "shared" network (i.e., a network that can be used by all tenants)</para>
                        <screen><computeroutput>neutron net-create --shared public-net</computeroutput></screen>
                    </listitem>
                    <listitem>
                        <para>Create a subnet that has a specific gateway IP address.</para>
                        <screen><computeroutput>neutron subnet-create --gateway 10.0.0.254 net1 10.0.0.0/24</computeroutput></screen>
                    </listitem>
                    <listitem>
                        <para>Create a subnet that has no gateway IP address.</para>
                        <screen><computeroutput>neutron subnet-create --no-gateway net1 10.0.0.0/24</computeroutput></screen>
                    </listitem>
                    <listitem>
                        <para>Create a subnet for which DHCP is disabled.</para>
                        <screen><computeroutput>neutron subnet-create net1 10.0.0.0/24 --enable_dhcp False</computeroutput></screen>
                    </listitem>
                    <listitem>
                        <para>Create subnet with a specific set of host routes:</para>
                        <screen><computeroutput>neutron subnet-create test-net1 40.0.0.0/24 --host_routes type=dict list=true destination=40.0.1.0/24,nexthop=40.0.0.2</computeroutput></screen>
                    </listitem>
                    <listitem>
                        <para>Create subnet with a specific set of dns nameserver:</para>
                        <screen><computeroutput>neutron subnet-create test-net1 40.0.0.0/24 --dns_nameservers list=true 8.8.8.7 8.8.8.8</computeroutput></screen>
                    </listitem>
                </itemizedlist>
            </section>
            <section xml:id="advanced_networking_listing">
                <title>Searches</title>
                <itemizedlist>
                    <listitem>
                        <para>Find all Ports/IPs allocated on a network.</para>
                        <screen><computeroutput>neutron port-list -- --network_id &lt;net-id&gt;</computeroutput></screen>
                    </listitem>
                </itemizedlist>
            </section>
        </section>
    </section>
    <section xml:id="using_nova_with_neutron">
        <title>Using OpenStack Compute with OpenStack Networking</title>
        <section xml:id="basic_workflow_with_nova">
            <title>Basic Workflow</title>
            <para>Check available networks:</para>
            <screen><prompt>$</prompt> <userinput>neutron net-list</userinput></screen>
            <para>Boot the VM with a single NIC on the selected network (net1):</para>
            <screen><prompt>$</prompt> <userinput>nova boot --image &lt;img&gt; --flavor &lt;flavor&gt; --nic net-id=&lt;net-id&gt; &lt;vm-name&gt;</userinput></screen>
            <para>Congrats, you have booted a VM on an OpenStack Networking network.
	    You may need to configure <link linkend="enabling_ping_and_ssh">security group rules</link>
	    to allow accesses to the VM.
	    </para>
            <para>There is now an OpenStack Networking port on 'net1' that
                corresponds to the VM Nic.  You can view it with the
                following command, which searches for all ports with a
                "device_id" corresponding to the OpenStack Compute instance
                UUID:</para>
            <screen><prompt>$</prompt> <userinput>neutron port-list -- --device_id=&lt;vm-id&gt;</userinput></screen>
            <para>To view only a few fields of the port, you can limit
                output using -c.  For example to see only the
                mac_address of the port, use:</para>
            <screen><prompt>$</prompt> <userinput>neutron port-list -c mac_address -- --device_id=&lt;vm-id&gt;</userinput></screen>
            <para>You could temporarily disable the port from sending
                traffic by updating it to have
                admin_state_up=False:</para>
            <screen><prompt>$</prompt> <userinput>neutron port-update &lt;port-id&gt; --admin_state_up=False</userinput></screen>
            <para>When we delete the OpenStack Compute VM, the underlying OpenStack Networking
                port is automatically deleted:</para>
            <screen><prompt>$</prompt> <userinput>neutron port-list -c mac_address -- --device_id=&lt;vm-id&gt;</userinput></screen>
        </section>
	<section xml:id="advanceed_vm_creation">
	  <title>Advanced VM creation</title>
	  <para>
	    <itemizedlist>
	      <listitem>
		<para>Booting a VM with multiple NICs</para>
		<screen><prompt>$</prompt> <userinput>nova boot --image &lt;img&gt; --flavor &lt;flavor&gt; \
--nic net-id=&lt;net1-id&gt; --nic net-id=&lt;net2-id&gt; &lt;vm-name&gt;</userinput></screen>
	      </listitem>
	      <listitem>
		<para>Booting a VM with a specific IP address.
		To do this, we need to create an OpenStack Networking port with a specific IP address first,
		and then boot a VM specifying a port-id rather than a net-id.</para>
		<screen><prompt>$</prompt> <userinput>neutron port-create --fixed-ip subnet_id=&lt;subnet-id&gt;,ip_address=192.168.57.101 &lt;net-id&gt;
nova boot --image &lt;img&gt; --flavor &lt;flavor&gt; --nic port-id=&lt;port-id&gt; &lt;vm-name&gt;</userinput></screen>
               <note><para><command>v4-fixed-ip</command> parameter of <command>--nic</command> option
	       in <command>nova</command> command is not supported with OpenStack Networking at the moment.</para></note>
	      </listitem>
	      <listitem>
		<para>booting a VM with no --nic option specified.
		In this case the launched VM connects to all networks
		that are accessible to the tenant who submits the request.</para>
		<screen><prompt>$</prompt> <userinput>nova boot --image &lt;img&gt; --flavor &lt;flavor&gt; &lt;vm-name&gt;</userinput></screen>
	      </listitem>
	    </itemizedlist>
	  </para>
	</section>
   <section xml:id="enabling_ping_and_ssh">
     <title>Security Groups (Enabling Ping and SSH on VMs)</title>
     <para>If using a plugin that implements neutron security groups you can configure security
                group rules directly by using neutron security-group-rule-create to enable access to
                your VMs. The example below allows <command>ping</command> and
                    <command>ssh</command> to your VMs.
                <screen>
     <prompt>$</prompt> <userinput>neutron security-group-rule-create --protocol icmp --direction ingress default</userinput>
     <prompt>$</prompt> <userinput>neutron security-group-rule-create --protocol tcp --port-range-min 22 --port-range-max 22 --direction ingress default</userinput>
     </screen></para>
     <para>If your plugin does not implement neutron security group, security groups can still be
                leveraged via OpenStack Compute. This can be done using <command>nova
                    secgroup-add-rule</command> or <command>euca-authorize</command> command to
                enable accesses to your VMs. Below are the nova commands to allow
                    <command>ping</command> and <command>ssh</command> to your VMs.</para>
     <screen>
     <prompt>$</prompt> <userinput>nova secgroup-add-rule default icmp -1 -1 0.0.0.0/0</userinput>
     <prompt>$</prompt> <userinput>nova secgroup-add-rule default tcp 22 22 0.0.0.0/0</userinput></screen>

     <note><para>If your plugin implements neutron security groups you can still leverage nova security groups
                    by setting security_group_api = neutron in <filename>nova.conf</filename>. After
                    setting this all nova security group commands will be proxied to neutron.</para></note></section>
    </section>
</chapter>
